[{"path":"https://icpm-kth.github.io/uqsa/articles/ABC_sampling.html","id":"available-prior-functions-in-our-examples","dir":"Articles","previous_headings":"","what":"Available Prior functions in our examples","title":"ABC sampling","text":"(Log)uniform (Log)normal","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/ABC_sampling.html","id":"acceptance-criteria","dir":"Articles","previous_headings":"Available Prior functions in our examples","what":"Acceptance criteria","title":"ABC sampling","text":"-Distance function- Acceptance probability","code":""},{"path":[]},{"path":"https://icpm-kth.github.io/uqsa/articles/ABC_sampling.html","id":"abcmcmc","dir":"Articles","previous_headings":"R-functions","what":"ABCMCMC","title":"ABC sampling","text":"Build chain parameters approximately distributed posterior distribution model parameters ABCMCMC function generates chains sample parameters using ABCMCMC algorithm. samples approximately distributed posterior probability model parameters. build chain, algorithm considers (current) last value chain proposes parameter sampled multivariate normal distribution cenetered current parameter Sigma0 covariance matrix. covariance matrix adaptively modified: chain gets stuck, regularization performed. 4 regularizations, chain aborted. , understand proposed parameter just sampled “agreement” experimental data objectiveFunction called proposed parameter vector: objectiveFunction simulates model computes distance experimental data output functions model. distance larger threshold delta, proposed parameter likely generated experimental data, therefore rejected. Markov chain repeat point (stands still). distance less threshold delta, proposed parameter accepted probability equal ratio prior probability density (calculated dprior) evaluated proposed current parameter, respectively. Input arguments * objectiveFunction (function) - function , given (vectorial) parameter input, simulated model outputs distance experimental data data simulated model parameter provided input * startPar (numeric) - parameter (vector) corresponds starting parameter chain * nSims (integer) - requested number samples output chain * Sigma0 (numeric) - matrix dimensions equal length (vectorial) model parameter, corresponding covariance matrix desired proposed moves parameter space. ABCMCMC algorithm covariance matrix slightly modified regularized enhance exploration parameter space convergence method * delta (numeric) - ABC acceptance threshold * dprior (function) - function evaluates prior probability density function parameter given input Output (list) output ABCMCMC list containing following data: * draws (numeric) - matrix nSims rows number columns equal length model parameter. row corresponds sample ABCMCMC chain * scores (numeric) - vector length nSims containing distances experimental data data simulated corresponding ABCMCMC samples (stored draws) * acceptanceRate (numeric) - fraction parameters ABCMCMC chain proposed accepted. * nRegularizations (integer) - number regularizations performed covariance matrix moves proposed algorithm","code":"mcmc <- ABCMCMC(objectiveFunction, startPar, nSims, Sigma0, delta, dprior, acceptanceProbability=NULL)"},{"path":"https://icpm-kth.github.io/uqsa/articles/ABC_sampling.html","id":"checkfitwithpreviousexperiments","dir":"Articles","previous_headings":"R-functions","what":"checkFitWithPreviousExperiments","title":"ABC sampling","text":"ABC acceptance currently sampled values given old data (Prior) function tests samples draws experimental data used generate draws. experimental data needs used construct variable objectiveFunction. objectiveFunction used simualte model draws parameters, compare simulated data old experimental data. distances computed objectiveFunction ABC threshold delta, corresponding parameters draws kept. Otherwise, discarded. Input arguments * draws (numeric) - matrix sampled values (filtered) * objectiveFunction (function) - function , given (vectorial) parameter input, simulated model outputs distance experimental data data simulated model parameter provided input * delta (numeric) - acceptance threshold Output (numeric) Filtered subset (matrix) acceptable parameter draws","code":"oldObjective <- makeObjective(oldExperiments,modelName, distanceMeasure, parMap, simulate) filteredDraws <- checkFitWithPreviousExperiments(draws=mcmc$draws, objectiveFunction=oldObjective, delta)"},{"path":"https://icpm-kth.github.io/uqsa/articles/Examples_overview.html","id":"example-models","dir":"Articles","previous_headings":"","what":"Example Models","title":"Examples overview","text":"simple example using AKAR4 model available Jupyter notebook file UQ_AKAR4.ipynb. can run locally installing Jupyter (read imformation). Three larger examples available form R scripts can run locally (preferably) computer cluster: * AKAP79 ODE model * CaMKII ODE model * AKAR4 stochastic model ODE models added measurement noise used acceptance probability order allow use ABC (Alahmadi et al 2020). demo R scrips can found folder inst/extdata.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/Installation.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Installation","text":"Alternatively, download release tar.gz zip file run","code":"# requires the 'remotes' package remotes::install_github(\"icpm-kth/uqsa\") R CMD INSTALL uqsa*.{tar.gz,zip}"},{"path":"https://icpm-kth.github.io/uqsa/articles/Installation.html","id":"prerequisites","dir":"Articles","previous_headings":"Installation","what":"Prerequisites","title":"Installation","text":"R package uqsa contains examples addition normal package dependencies also use * reshape2, ggplot2; * R package icpm-kth/SBtabVFGEN, used generate vector field files SBtab files (can installed running remotes::install_github(\"icpm-kth/SBtabVFGEN\")); - SBtabVFGEN benefits libSBML installed R bindings; hard dependency, required export SBML, L2V4. - hdf5r also (minor) optional benefit. * R package icpm-kth/rgsl, used solve ODEs C using functions GNU scientific library (gsl) (can install running remotes::install_github(\"icpm-kth/rgsl\")). - also need install GNU Scientific Library (rgsl package tested MACOS GNU Linux platforms [debian, ubuntu]) * auto-generation code, GSL odeiv2 compatible code R code model done using shell script icpm-kth/RPN-derivative; package several backends analystic (symbolc) math (thing computer algebra systems ) - maxima - yacas - RPN-derivative package code perform derivatives (needs make && sudo make install) R kernel jupyter notebooks IRkernel required run Jupyter notebook examples.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/Installation.html","id":"note-on-model-code","dir":"Articles","previous_headings":"Installation > Prerequisites","what":"Note on Model code","title":"Installation","text":"Strictly speaking auto-generation code required, user can also hand-craft model code just use SBtab related functionality. package requires either R code deSolve C code gsl_odeiv2 (https://www.gnu.org/software/gsl/doc/html/ode-initval.html) user visible functions manual (e.g. run > ?ABCMCMC R)","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/Models.html","id":"parameters","dir":"Articles","previous_headings":"","what":"Parameters","title":"Models","text":"goal perform parameter estimation. systems biology model typically parameters either reaction rate coefficients \\(k_f\\), equilibrium constants \\(K_d\\), Hill coefficients, many quantities related kinetc laws; often unknown uniquely determined yet. , parameters model unknown, model parameters intrinsic system study. model interventions model performing experiment. frequency driving force mechanical model, amount treatment dose (added system) affects time course reactions: substrate, buffer enzyme, silencing agent, inhibitor parameters known us, written protocol. input time dependent, dynamics (explicit algebraic functions) become part model. input parameters can different experiments, intrinsic parameters always . ordinary differential equation hand need know distinction known unknown parameters. reason: k intrinsic, unknown parameters (subject sampling), u known input parameters encoded input field experiment. input parameters exist, always concatenated order passed model, model’s C code sees p. wrapper functions rgsl package concatenation solver called. sample k usually logarithmic space, solver gets proposed k appends right u experiment, linear space.","code":"u = experiments[[i]]$input #, p = c(k,u) #,"},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"scheduled-events","dir":"Articles","previous_headings":"","what":"Scheduled Events","title":"Data","text":"experiment can contain sudden events, systems biology useful describe experiments include intervention specified time (activation, silencing, stimulus, action potential, etc.), events happen much faster system dynamics modelling exactly slow solver dramatically. case event \\(t\\), solver stopped, linear (affine) transformation current state \\(x(t)\\) parameters \\(p\\) applied (C): \\[ x(t) := x(t) + b \\] (assignment, mathematical equality, discontinuity \\(\\) \\(b\\) non-trivial values) experiment[[]]$event structure: time (numeric vector, event schedule) (three dimensional array, third dimension corresponds time) b (three dimensional array, second dimension always 1, third long time vector) (three dimensional array, third dimension corresponds time) b (three dimensional array, second dimension always 1, third long time vector) […] […] type content experiment. cases permissible omit parts trivial (\\(b\\) trivial 0, neutral element addition). cases, omitted items can NULL (may work combinations, subject improvement).","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"r-functions","dir":"Articles","previous_headings":"","what":"R-functions","title":"Data","text":"[icpm-kth/SBtabVFGEN] package functions import model data R data structures: installed: experiments variable list, member (list), describes simulation experiment. experiment may result one calls simulator (C amounts resetting driver chosen solver). experiment properties:","code":"remotes::install_github(\"icpm-kth/SBtabVFGEN\") model.tsv <- dir(pattern=\"[.]tsv$\",full.names=TRUE) # a list of file paths to TSV files model.tab <- SBtabVFGEN::sbtab_from_tsv(model.tsv)  # a list of data.frames experiments <- SBtabVFGEN::sbtab.data(model.tab)    # a list of simulation experiments with data"},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"gaussian-measurement-errors","dir":"Articles","previous_headings":"","what":"Gaussian Measurement errors","title":"Data","text":"Gaussian noise, errorValues can standard deviation mean. data frame shape names output values. usual way write somewhere typically error models, noise distributions, user can decide kind values useful use custom scoring functions (untested us).","code":"outputValues ± errorValues"},{"path":"https://icpm-kth.github.io/uqsa/articles/examples_overview.html","id":"example-models","dir":"Articles","previous_headings":"","what":"Example Models","title":"Examples overview","text":"simple example using AKAR4 model available Jupyter notebook file UQ_AKAR4.ipynb. can run locally installing Jupyter (read imformation). Three larger examples available form R scripts can run locally (preferably) computer cluster: * AKAP79 ODE model * CaMKII ODE model * AKAR4 stochastic model ODE models added measurement noise used acceptance probability order allow use ABC (Alahmadi et al 2020). demo R scrips can found folder inst/extdata.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/installation.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Installation","text":"Alternatively, download release tar.gz zip file run","code":"# requires the 'remotes' package remotes::install_github(\"icpm-kth/uqsa\") R CMD INSTALL uqsa*.{tar.gz,zip}"},{"path":"https://icpm-kth.github.io/uqsa/articles/installation.html","id":"prerequisites","dir":"Articles","previous_headings":"Installation","what":"Prerequisites","title":"Installation","text":"R package uqsa contains examples addition normal package dependencies also use * reshape2, ggplot2; * R package icpm-kth/SBtabVFGEN, used generate vector field files SBtab files (can installed running remotes::install_github(\"icpm-kth/SBtabVFGEN\")); - SBtabVFGEN benefits libSBML installed R bindings; hard dependency, required export SBML, L2V4. - hdf5r also (minor) optional benefit. * R package icpm-kth/rgsl, used solve ODEs C using functions GNU scientific library (gsl) (can install running remotes::install_github(\"icpm-kth/rgsl\")). - also need install GNU Scientific Library (rgsl package tested MACOS GNU Linux platforms [debian, ubuntu]) * auto-generation code, GSL odeiv2 compatible code R code model done using shell script icpm-kth/RPN-derivative; package several backends analystic (symbolc) math (thing computer algebra systems ) - maxima - yacas - RPN-derivative package code perform derivatives (needs make && sudo make install) R kernel jupyter notebooks IRkernel required run Jupyter notebook examples.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/installation.html","id":"note-on-model-code","dir":"Articles","previous_headings":"Installation > Prerequisites","what":"Note on Model code","title":"Installation","text":"Strictly speaking auto-generation code required, user can also hand-craft model code just use SBtab related functionality. package requires either R code deSolve C code gsl_odeiv2 (https://www.gnu.org/software/gsl/doc/html/ode-initval.html) user visible functions manual (e.g. run > ?ABCMCMC R)","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/literature_references.html","id":"data-references","dir":"Articles","previous_headings":"","what":"Data references","title":"Model and Data references","text":"experimental data AKAP79 AKAR4 models publication: described detail SBtab files AKAP79 AKAR4 model folders. experimental data CaMKII model extracted following references: described detail SBtab files CaMKII model folder.","code":"Church, Timothy W., et al. \"AKAP79 enables calcineurin to directly suppress protein kinase A activity.\"  Elife 10 (2021): e68164. Stemmer PM, Klee CB. Biochemistry. 1994;33(22):6859-6866 (phenotype 1, 3 and 4) O'Donnell SE et al. Proteins. 2011;79(3):765-786 (phenotype 2)"},{"path":"https://icpm-kth.github.io/uqsa/articles/literature_references.html","id":"model-references","dir":"Articles","previous_headings":"","what":"Model references","title":"Model and Data references","text":"AKAP79 model modified : CaMKII model ","code":"Church, Timothy W., et al. \"AKAP79 enables calcineurin to directly suppress protein kinase A activity.\"  Elife 10 (2021): e68164.` Buxbaum JD, Dudai Y. 1989. \"A quantitative model for the kinetics of cAMP-dependent protein kinase (type II)  activity. Long-term activation of the kinase and its possible relevance to learning and memory.\"  The Journal of Biological Chemistry 264:9344–9351. Nair, A. G., Gutierrez-Arenas, O., Eriksson, O., Jauhiainen, A., Blackwell, K. T., & Kotaleski, J. H. (2014). \"Modeling intracellular signaling underlying striatal function in health and disease.\" Progress in molecular biology and translational science, 123, 277-304."},{"path":"https://icpm-kth.github.io/uqsa/articles/models.html","id":"parameters","dir":"Articles","previous_headings":"","what":"Parameters","title":"Models","text":"goal perform parameter estimation. systems biology model typically parameters either reaction rate coefficients \\(k_f\\), equilibrium constants \\(K_d\\), Hill coefficients, many quantities related kinetc laws; often unknown uniquely determined yet. , parameters model unknown, model parameters intrinsic system study. model interventions model performing experiment. frequency driving force mechanical model, amount treatment dose (added system) affects time course reactions: substrate, buffer enzyme, silencing agent, inhibitor parameters known us, written protocol. input time dependent, dynamics (explicit algebraic functions) become part model. input parameters can different experiments, intrinsic parameters always . ordinary differential equation hand need know distinction known unknown parameters. reason: k intrinsic, unknown parameters (subject sampling), u known input parameters encoded input field experiment. input parameters exist, always concatenated order passed model, model’s C code sees p. wrapper functions rgsl package concatenation solver called. sample k usually logarithmic space, solver gets proposed k appends right u experiment, linear space.","code":"u = experiments[[i]]$input #, p = c(k,u) #,"},{"path":[]},{"path":"https://icpm-kth.github.io/uqsa/articles/simulate.html","id":"runmodel","dir":"Articles","previous_headings":"R-functions","what":"runModel","title":"Simulate","text":"Simulate Experiment using ODE Model, without using closures previous sections. function uses GSL solvers, R solver deSolve [default] simulate ODE model initial states input characteristic experiments provided input. model name comment indicates model file ending ., function use shared library GSL solvers. Input arguments * experiments (list) - experiments simulate. experiment variable element variable experiments imported via function import_experiments * modelName(character) - used find model files functions within file (prefix), optionally comment indicating file * parABC (numeric) - matrix column vectors; column contains vector normal parameters (e.g. kinetic parameters like kf kr) input_parameters (concatenated order, .e. first parameters, inputs). number columns N, N simulations performed. * parMap (function) - re-mapping function apply parameters (e.g. switch linear logarithmic scale) Output (list) List whose elements correspond simulation experiment provided input argument experiments. element turn list, elements: - state (numeric) - value approximated solution ODE system time point experimental measurements - func (numeric) - value output time point experimental measurements","code":"runModel(experiments, modelName,  parABC, parMap=identity)"},{"path":"https://icpm-kth.github.io/uqsa/articles/simulate.html","id":"checkmodel","dir":"Articles","previous_headings":"R-functions","what":"checkModel","title":"Simulate","text":"Assign simulation file given model, compile model necessary, check existence: SBtab document contains model name, SBtabVFGEN::sbtab_from_tsv includes information comment return value. checkModel returns model name supplied first slot, additional comments file. user can course pick different model name point. circumvent function. alternative function, sufficient write function attempt find model file, current directory. , checkModel compile GSL compatible C source file shared object modelFile ends .c stop doesn’t work. case, function stops execution model file doesn’t exist. Input arguments * modelName (character) * modelFile (character) - string, model file different “modelName.R”. file name ends .c, c source compiled shared library. Output (character) returned value “modelName” additional comment file use simulations.","code":"model.sbtab <- SBtabVFGEN::sbtab_from_tsv(model.tsv) modelName <- checkModel(comment(model.sbtab),modelFile=NULL) modelName <- \"test_ode_model\"             # or some other model name comment(modelName) <- \"test_ode_model.so\" # e.g.: manually compiled"},{"path":"https://icpm-kth.github.io/uqsa/articles/simulate.html","id":"makeobjective","dir":"Articles","previous_headings":"R-functions","what":"makeObjective","title":"Simulate","text":"Creates Objective functions ingredients (closures) function creates function obj (closure), used ABCMCMC parameter estimation. created function accepts one argument input: vectorial parameter matrix parameters, column corresponding parameter vector. function obj(par) : 1. apply transformation parMap column par: 1. experiment, append input parameters (experiments[[]]$input) 2. simulate experiments, inputs, events, initial values experiments 3. calculate model’s output functions 4. use distance measure function obtain distance simulation experimental data (experiments[[]]$outputValues) 2. save distances matrix: distance[,j] distance data model functions experiment parameter set j Input arguements * experiments (list) - simulation experiments * modelName (character) - model name string, model storage file comment variable * distance (function) - function calculates ABC scores, .e. distance experimental simulated data * parMap (function) - function transforms ABC variables acceptable model parameters (e.g. allowing switch linear logarithmic scale) Output (function) output function accepts one parameter matrix par calculates distance experimental data data simulated model using par.","code":"obj <- makeObjective(experiments,modelName,distance,parMap=identity)"},{"path":"https://icpm-kth.github.io/uqsa/articles/uqsa.html","id":"introduction-to-uqsa","dir":"Articles","previous_headings":"","what":"Introduction to UQSA","title":"uqsa","text":"Uncertainty Quantification global Sensitivity Analysis common tasks systems biology. TODO","code":""},{"path":"https://icpm-kth.github.io/uqsa/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexandra Jauhiainen. Author. Olivia Eriksson. Author, maintainer. Federica Milinanni. Author. Andrei Kramer. Author, contributor.","code":""},{"path":"https://icpm-kth.github.io/uqsa/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kramer , Milinanni F, Nyquist P, Jauhiainen , Eriksson O (2023). “UQSA – R-Package Uncertainty Quantification Sensitivity Analysis Biochemical Reaction Network Models.” doi: 10.48550/arXiv.2308.05527, 2308.05527. Jauhiainen Alexandra, Eriksson Olivia, Milinanni Federica, Kramer Andrei, (2023). uqsa: Uncertainty Quanitification Global Sensitivity Analysis via ABC sampling. R package version 0.1.4, https://icpm-kth.github.io/uqsa/","code":"@Misc{,   title = {UQSA -- An R-Package for Uncertainty Quantification and Sensitivity Analysis for Biochemical Reaction Network Models},   author = {Andrei Kramer and Federica Milinanni and Pierre Nyquist and Alexandra Jauhiainen and Olivia Eriksson},   year = {2023},   eprint = {2308.05527},   archiveprefix = {arXiv},   primaryclass = {q-bio.QM},   doi = {https://doi.org/10.48550/arXiv.2308.05527}, } @Manual{,   title = {{uqsa}: Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling},   author = {Alexandra Jauhiainen and Olivia Eriksson and Federica Milinanni and Andrei Kramer},   year = {2023},   note = {R package version 0.1.4},   url = {https://icpm-kth.github.io/uqsa/}, }"},{"path":"https://icpm-kth.github.io/uqsa/index.html","id":"uncertainty-quantification-uq-and-sensitivity-analysis-sa","dir":"","previous_headings":"","what":"Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling","title":"Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling","text":"R package performs parameter estimation, uncertainty quantification, global sensitivity analysis using Bayesian methods ABC-MCMC sampling. Source code: https://github.com/icpm-kth/uqsa/","code":""},{"path":"https://icpm-kth.github.io/uqsa/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling","text":"Articles page user guide package. function reference also accessible R (?uqsa::ABCMCMC). package includes example models run script. advise users copy run scripts either github package adapt . location run file can found like : browsing folders GitHub (inst/extdata/) examples also covered articles: AKAR4, AKAP79, CaMKII.","code":"uqsa::uqsa_example(\"AKAP79\",pat=\"^run.*R$\")"},{"path":"https://icpm-kth.github.io/uqsa/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling","text":"first two packages optional work, need examples: rgsl interface R ODE solvers GNU Scientific Library SBtabVFGEN R package works models written SBtab format","code":"remotes::install_github(\"icpm-kth/rgsl\")       # requires gsl in your OS remotes::install_github(\"icpm-kth/SBtabVFGEN\") # if you plan to use SBtab remotes::install_github(\"icpm-kth/uqsa\")       # this package"},{"path":"https://icpm-kth.github.io/uqsa/index.html","id":"gnu-scientific-library-optional","dir":"","previous_headings":"Installation","what":"GNU Scientific Library (optional)","title":"Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling","text":"simulation backend using GNU Scientific Library (gsl) needs installed OS.","code":""},{"path":"https://icpm-kth.github.io/uqsa/names.html","id":null,"dir":"","previous_headings":"","what":"Function Names and Defaults","title":"Function Names and Defaults","text":"functions renamed","code":""},{"path":"https://icpm-kth.github.io/uqsa/names.html","id":"mcmc-functions","dir":"","previous_headings":"","what":"MCMC Functions","title":"Function Names and Defaults","text":"getMCMCPar renamed estimateSettingsForMCMC show binding/mandatory, trying guess sensible values. addition, lots things already named Par, par, maybe MCMC “settings” “options” avoid confusion.","code":""},{"path":"https://icpm-kth.github.io/uqsa/names.html","id":"objectives-and-distances","dir":"","previous_headings":"","what":"Objectives and Distances","title":"Function Names and Defaults","text":"makeAcceptanceProbability makeObjective intended different (one minimize one maximize) Maybe need two different functions sort. Objective clear enough word deduce whether high low (objectives just met).","code":""},{"path":"https://icpm-kth.github.io/uqsa/names.html","id":"to-minimize","dir":"","previous_headings":"Objectives and Distances","what":"to minimize","title":"Function Names and Defaults","text":"functions want minimize related distance fit observable data. return function maps parABC (parMCMC) list values long number experiments list member size number parameters. defaultDistance returns vector distances (one parameter vector),","code":"# we should perhaps have a default distance function like this: defaultDistance<-function(experiment,simulation){     n<-dim(simulation$func)     if (errorValues %in% names(experiment)){         d<-unlist(lapply(1:n[3], function(j) mean(((simulation$func[1,,j]-experiment$outputValues)/experiment$errorValues)^2, na.rm=TRUE)))     } else {         d<-unlist(lapply(1:n[3], function(j) mean((abs(simulation$func[1,,j]-experiment$outputValues)), na.rm=TRUE)))     }     return(d) }  makeDistanceMeasure(experiments, modelName, distance=defaultDistance, parMap=identity, mc.cores=detectCores()){     out <- runModel(experiments, modelName,  parABC, parMap, mc.cores)     for(i in 1:length(experiments)){         D<-mclapply(1:length(experiments), function(i) distance(experiments[[i]],out[[i]]),mc.cores=mc.cores)         }         return(D) }  # or simply makeDistance(experiments, modelName, distance=defaultDistance, parMap=identity, mc.cores=detectCores()) {[...]} # without \"Measure\""},{"path":"https://icpm-kth.github.io/uqsa/names.html","id":"to-maximize","dir":"","previous_headings":"Objectives and Distances","what":"to maximize","title":"Function Names and Defaults","text":"word Score seems OK. Sometimes Score Bayesian statistics, ’s appropriate write:","code":"makeScore(experiments, modelName, score=defaultScore, parMap=identity, mc.cores=detectCores()) makeLikelihood(experiments, modelName, distance=defaultDistance, parMap=identity, mc.cores=detectCores())"},{"path":"https://icpm-kth.github.io/uqsa/names.html","id":"small-suggestions-related-to-data-import","dir":"","previous_headings":"","what":"Small suggestions related to Data import","title":"Function Names and Defaults","text":"sprintf can sometimes clearer read example: change output function ABC code always need time vectors","code":"paste(\">\",inputs_and_initState_ids,sep=\"\")  sprintf(\">%s\",inputs_and_initState_ids) experiments[[i]][[\"outputFunction\"]] <- function(yy,par=c(default_par,default_input)) {vectorialOutputFunction(0.0, yy, par)} vectorialOutputFunction"},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"Given set simulation experiments (list), model, parameter boundaries, function draw sample parameters posterior probability density given problem.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"","code":"ABCMCMC(   objectiveFunction = NULL,   startPar,   nSims,   Sigma0,   delta,   dprior,   acceptanceProbability = NULL )"},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"startPar starting value parameter vector nSims requested sample size Sigma0 multivariate normal covariance Markov chain transition kernel delta ABC acceptance threshold dprior function returns prior probability density values experiments list experiments modelName model functions assumed prefix (comment(modelName) can contain file-name) parMap re-mapping function ABC MCMC variables model parameters getScore function(model_output,experiment) returns scores nCores setting multicore package","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"list containing sample matrix vector scores (values delta sample)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"Initially function performs similar job optimizer, transitions MCMC sampling.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkFitWithPreviousExperiments.html","id":null,"dir":"Reference","previous_headings":"","what":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","title":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","text":"prior probability density model using copulas vines perfect, values sampled imperfect prior estimate can checked old data.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkFitWithPreviousExperiments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","text":"","code":"checkFitWithPreviousExperiments(draws, objectiveFunction, delta)"},{"path":"https://icpm-kth.github.io/uqsa/reference/checkFitWithPreviousExperiments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","text":"draws matrix sampled values (filtered). objectiveFunction function , given (vectorial) parameter input, simulated model outputs distance experimental data data simulated model parameter provided input delta acceptance threshold.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkFitWithPreviousExperiments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","text":"filtered subset acceptable parameter draws","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":null,"dir":"Reference","previous_headings":"","what":"checkModel tries to establish the simulation file for a given model — checkModel","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"function returns model name, additional comments file","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"","code":"checkModel(modelName, modelFile = NULL)"},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"modelName string modelFile string, model file different \"modelName.R\". file name ends .c, c source compiled shared library.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"modelName additional comment file use simulations","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"alternative function, sufficient write modelName <- \"test_ode_model\"             # model name comment(modelName) <- \"test_ode_model.\" # .R function attempt find model file, current directory. , checkModel compile GSL compatible C source file shared object modelFile ends `.c` stop work. case, function stops execution model file exist.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"convert ODE parameter to Gillespie parameter — convert.parameter","title":"convert ODE parameter to Gillespie parameter — convert.parameter","text":"ODE parameters usually different unit measurement parameters need stochastic simulators.  ODEs fluxes, multiples M/s (M mol/liter), unit first derivative state variables.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert ODE parameter to Gillespie parameter — convert.parameter","text":"","code":"convert.parameter(k, n = 0, LV = 602214076)"},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert ODE parameter to Gillespie parameter — convert.parameter","text":"k ODE reaction rate coefficient (mandatory) n multiplicity reactant, (order > 0); omit zero-order LV L*V -- product _Avogadro's number_ _volume_ [defaults 6.02214076e+8]","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert ODE parameter to Gillespie parameter — convert.parameter","text":"rescaled parameter stochastic simulation comment re-scale ","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert ODE parameter to Gillespie parameter — convert.parameter","text":"reaction rate coefficients mass action kinetics, kf kb units compatible flux units, depending order reaction (order related reaction's stoichiometry).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert ODE parameter to Gillespie parameter — convert.parameter","text":"","code":"# reaction: \"2 A + B -> C\" k <- 1.0 attr(k,'unit') <- \"µM/s\" n <- c(2,1) reactants <- c('A','B') convert.parameter(k,n) #> Error in convert.parameter(k, n): could not find function \"convert.parameter\""},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"copulaPrior creates a prior probability density function — dCopulaPrior","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"function accepts return list fitCopula() makeIndepCopula() creates density function .","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"","code":"dCopulaPrior(Copula)"},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"Copula list, returned fitCopula() makeIndepCopula","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"function maps parameters (vector) probability density values (scalar)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"","code":"prior_pdf<-dCopulaPrior(makeIndepCopula(ll=c(-1,-1,-1),ul=c(1,1,1))) prior_pdf(runif(3)) #> Error in xy.coords(x, y, setLab = FALSE): 'x' and 'y' lengths differ # 0.125"},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"returned density function takes vectors size mean sd. returns product components' one-dimensional normal distribution, mean \"mean\" standard deviation \"sd\".","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"","code":"dNormalPrior(mean, sd)"},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"mean mean random variables (vector) sd standard deviation random variables (size vector mean)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"probability density function vectors length mean sd.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"","code":"dnp<-dNormalPrior(mean=c(0,1,2),sd=c(1,2,3)) dnp(c(0.5,1.5,2.5)) #> [1] 0.008926651"},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"dUniformPrior creates a uniform density function — dUniformPrior","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"returned denisty function takes vectors size ll ul. returns product component's one-dimensional uniform distribtions.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"","code":"dUniformPrior(ll, ul)"},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"ll lower limit random variables (vector) ul upper limit random variables (size vector ll)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"probability density function vectors withthe length ll ul.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"","code":"dup<-dUniformPrior(ll=c(0,1,2),ul=c(1,2,3)) dup(c(0.5,1.5,2.5)) #> [1] 1"},{"path":"https://icpm-kth.github.io/uqsa/reference/fitCopula.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a Probability Density Estimate (from a sample) — fitCopula","title":"Makes a Probability Density Estimate (from a sample) — fitCopula","text":"Given sample (probability distribution) function makes Copula fit source distribution using VineCopula package.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fitCopula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a Probability Density Estimate (from a sample) — fitCopula","text":"","code":"fitCopula(X, nCores = detectCores())"},{"path":"https://icpm-kth.github.io/uqsa/reference/fitCopula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a Probability Density Estimate (from a sample) — fitCopula","text":"X sample characterizes traget distribution (rows) nCores passed parallel::mclapply()","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fitCopula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a Probability Density Estimate (from a sample) — fitCopula","text":"list: vineCop, U, Z, Y U marginal     probability samples, Z cummulative density values U,     Y probability density values U.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getMCMCPar.html","id":null,"dir":"Reference","previous_headings":"","what":"Selects MCMC scheme specific setup parameters — getMCMCPar","title":"Selects MCMC scheme specific setup parameters — getMCMCPar","text":"MCMC scheme uses transition kernel. function returns parameters transition kernel. Better parameters make Markov chain perform better (.e. lower auto-correlation).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getMCMCPar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selects MCMC scheme specific setup parameters — getMCMCPar","text":"","code":"getMCMCPar(prePar, preDelta, p = 0.05, sfactor = 0.1, delta = 0.01, num = 1)"},{"path":"https://icpm-kth.github.io/uqsa/reference/getMCMCPar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selects MCMC scheme specific setup parameters — getMCMCPar","text":"prePar sample parameters pre-Calibration preDelta distance values (scores) parameters p fraction (top scoring) sampled points base Sigma [default 0.05] sfactor scales Sigma [default 0.1] delta ABC threshold [default 1e-2] num number different starting parameter vectors [default 1].","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getMCMCPar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selects MCMC scheme specific setup parameters — getMCMCPar","text":"Sigma startPar (matrix `num` rows) list","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/importReactionsSSA.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","title":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","text":"translates Reaction network specific form required GillespieSSA2","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/importReactionsSSA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","text":"","code":"importReactionsSSA(model)"},{"path":"https://icpm-kth.github.io/uqsa/reference/importReactionsSSA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","text":"model model, represented list data.frames SBtab content","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/importReactionsSSA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","text":"list GillespieSSA2::reaction items","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"SBtab Document set tables represent reactions, compounds, parameters, measured data correspond simulations model certain input conditions initial values.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"","code":"import_experiments(modelName = NULL, SBtabDir)"},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"modelName (string) functions model prefix SBtabDir (string) local directory contains tsv files (SBtab content)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"list simulation experiments (data corresponding simulation)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"function assumes information stored series tsv files. content imported using SBtabVFGEN package. data contents reorganized list simulation experiments (initial values, measurement time points, etc.)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"function uses SBtabVFGEN read series tsv files, containing one systems biology table together create model (Reactions, Parameters, etc.). model converted vfgen compatible file. file processed vfgen system call create source code R (deSolve) C (GSL solvers).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"","code":"import_from_SBtab(SBtabDir)"},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"SBtabDir directory contains `.tsv` files (SBtab content)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"model list data.frames, one per tsv file,     Document title attached comment attribute:     comment(model) = Document Title","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"requires vfgen installed (https://github.com/WarrenWeckesser/vfgen) - R package. SBtab particular convention structure tables (sbtab.net)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"","code":"model <- import_from_SBtab(\"./model\") #> Warning: cannot open file './model/': No such file or directory #> Error in file(con, \"r\"): cannot open the connection  comment(model) #> Error in comment(model): object 'model' not found  source(\"model.R\") #> Warning: cannot open file 'model.R': No such file or directory #> Error in file(filename, \"r\", encoding = encoding): cannot open the connection"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeAcceptanceProbability.html","id":null,"dir":"Reference","previous_headings":"","what":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","title":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","text":"returned closure needs sampling variables (parABC) inputand calculates probability accepting Markov chainmoves.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeAcceptanceProbability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","text":"","code":"makeAcceptanceProbability(   experiments,   modelName,   getAcceptanceProbability,   parMap = identity )"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeAcceptanceProbability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","text":"experiments list experiments modelName annotated string, model name model file comment getAcceptanceProbability R function mape results simulation experimental data acceptance probability parMap optional mapping sampling parameters (parABC) model parameters (e.g. rescaling,re-ordering).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeAcceptanceProbability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","text":"function calculates probabilities given parABC input; implicitly uses argiments function.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"function takes series SBtab tables, returned SBtabVFGEN::sbtab_from_tsv() creates GillespieSSA2 reactions . Reactions arfe made pairwise, forward backward reaction pairs. backward reaction exist, list item NULL. valid set reactions can obtained `!.null(reactions)`","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"","code":"makeGillespieModel(SBtab, LV = NULL, strip.null = TRUE)"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"SBtab series tables returned `sbtab_from_tsv()` LV product Avogadro's constant L system's volume V litres; unspecified information retrieved SBtab files, missing assume 1µm³ volume (approximate sizes bacteria synapses)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"list reactions","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"","code":"model.tsv<-dir(pattern=\"[.]tsv$\")  model.sbtab<-SBtabVFGEN::sbtab_from_tsv(model.tsv) #> Error in file(con, \"r\"): invalid 'description' argument  reactions<-makeGillespieModel(model.sbtab) #> Error in \"Reaction\" %in% names(SBtab): object 'model.sbtab' not found  l<-is.null(reactions) #> Error in eval(expr, envir, enclos): object 'reactions' not found  model.ssa2<-reactions[!l] #> Error in eval(expr, envir, enclos): object 'reactions' not found"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeIndepCopula.html","id":null,"dir":"Reference","previous_headings":"","what":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","title":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","text":"Covers (simpler) special case prior(x) iid uniform. return value structure value fitCopula().","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeIndepCopula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","text":"","code":"makeIndepCopula(ll, ul)"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeIndepCopula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","text":"ll ll[] lower limit random variable x[] ul upper limit, analogous ll.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeIndepCopula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","text":"list : copula, U, Z, Y entries.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjective.html","id":null,"dir":"Reference","previous_headings":"","what":"creates Objective functions from ingredients — makeObjective","title":"creates Objective functions from ingredients — makeObjective","text":"returned objective function one argument (ABC parameters)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates Objective functions from ingredients — makeObjective","text":"","code":"makeObjective(   experiments,   modelName = NULL,   distance,   parMap = identity,   simulate = NULL )"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates Objective functions from ingredients — makeObjective","text":"experiments list simulation experiments modelName model storage file comment parMap function transforms ABC variables acceptable model parameters getScore function calculates ABC scores","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjective.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"creates Objective functions from ingredients — makeObjective","text":"objective function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjectiveSSA.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that creates the objective function — makeObjectiveSSA","title":"Function that creates the objective function — makeObjectiveSSA","text":"Given parameter set, function computes distance experimental data simulated data (coresponding parameter input).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjectiveSSA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that creates the objective function — makeObjectiveSSA","text":"","code":"makeObjectiveSSA(   experiments,   parNames,   distance,   parMap = identity,   Phi,   reactions,   nStochSim = 1 )"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjectiveSSA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that creates the objective function — makeObjectiveSSA","text":"experiments list experiments parNames names (biological) parameters model distance user supplied function calculates distance simulation data interface distance(simulation, data, errVal), errVal estimate measuremnet noise (e.g. standard deviation), needed function. parMap function translates ABC variables (parABC) something model accept. Phi Volume reactions list encodes reactions GillespieSSA2 nStochSim number stochastic simulations average ","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjectiveSSA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that creates the objective function — makeObjectiveSSA","text":"closure objective function implicitly     depends arguments function explicitly     ABC parameters parABC.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":null,"dir":"Reference","previous_headings":"","what":"find the coefficients in a formula — match.coefficients","title":"find the coefficients in a formula — match.coefficients","text":"reaction formula reactants products, separated <=>, reactants left products right (convention). plus separated list reacting compounds modifiers, optional coefficients, e.g.: + 2*B <=> AB2","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find the coefficients in a formula — match.coefficients","text":"","code":"match.coefficients(chrv)"},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find the coefficients in a formula — match.coefficients","text":"chrv character vector returned parse.formula","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find the coefficients in a formula — match.coefficients","text":"coefficients, vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"find the coefficients in a formula — match.coefficients","text":"formula split left right side, function determines coefficients. example, function returns c(1,2) left side 1 right side.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find the coefficients in a formula — match.coefficients","text":"","code":"lapply(parse.formula(\"A + 2*B <=> AB2\"),match.coefficients) #> Error in match.fun(FUN): object 'match.coefficients' not found # $reactants # [1] 1 2 # $products # [1] 1"},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the variable names in a formula — match.names","title":"Find the variable names in a formula — match.names","text":"reaction formula reactants products, separated <=>, reactants left products right (convention). plus separated list reacting compounds modifiers, optional coefficients, e.g.: + 2*B <=> AB2","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the variable names in a formula — match.names","text":"","code":"match.names(chrv)"},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the variable names in a formula — match.names","text":"chrv character vector returned parse.formula","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the variable names in a formula — match.names","text":"coefficients, vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the variable names in a formula — match.names","text":"formula split left right side, function determines names. example, function returns c(\"\",\"B\") left side \"AB2\" right side.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the variable names in a formula — match.names","text":"","code":"lapply(parse.formula(\"A + 2*B <=> AB2\"),match.names) #> Error in match.fun(FUN): object 'match.names' not found lapply(parse.formula(\"A + 2*B <=> AB2\"),match.names) #> Error in match.fun(FUN): object 'match.names' not found # $reactants # [1] \"A\" \"B\" # $products # [1] \"AB2\""},{"path":"https://icpm-kth.github.io/uqsa/reference/observable.mean.in.bin.html","id":null,"dir":"Reference","previous_headings":"","what":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","title":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","text":"model parameters binned histogram function. bin one parameters almost fixed (varies much less parameters [full range]). function returns mean observable bin, vector.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/observable.mean.in.bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","text":"","code":"observable.mean.in.bin(id, outputSample)"},{"path":"https://icpm-kth.github.io/uqsa/reference/observable.mean.in.bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","text":"id integer vector identifies bin parameter vector falls create row outputSample (output stems model simulation parameters). id length outputSample rows. outputSample matrix output values, one output vector per row (different rows results different parameter values)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/observable.mean.in.bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","text":"M[,j] mean observable[j] bin[]","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parUpdate.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates Parameter Values — parUpdate","title":"Updates Parameter Values — parUpdate","text":"valid ABC update conditions (successful simulation) parameters updated new values.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parUpdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates Parameter Values — parUpdate","text":"","code":"parUpdate(objectiveFunction, curPar, canPar, curDelta, curPrior, delta, dprior)"},{"path":"https://icpm-kth.github.io/uqsa/reference/parUpdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates Parameter Values — parUpdate","text":"curPar current parameter values (ABC samples ) canPar candidate parameter values (MCMC) curDelta current distance data simulation, MCMC chain yet reached point threshold (delta), can accepted new current state chain. curPrior current Prior values given curPar delta distance threshold ABC dprior prior probability density function experiments list simulation experiments modelName (characters), used find model file functions file parMap optional remapping function set passing parameters model: parModel<-parMap(parABC) getScore scoring function nCores number cores use mclapply().","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parUpdate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates Parameter Values — parUpdate","text":"updated values curPar, curDelta, curPrior","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":null,"dir":"Reference","previous_headings":"","what":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"function assumes kinetic Law mass action kinetics. function helps converting units ODE units work stochastic simulations. Converting units general formula (Michaelis Menten, Hill kinetics, etc.) difficult dubious stochastic simulations.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"","code":"parameter.from.kinetic.law(kineticLaw, tab)"},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"kineticLaw string mathematical formula tab SBtab document, returned SBtabVFGEN::sbtab_from_tsv()","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"parameter value, unit attribute","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"reasons, functions assumes: \"kf**B*[...]\" first word \"kf\" representing reaction rate coefficient. Given SBtab document, function finds value () unit coefficient. coefficient can defined fixed constant, parameter, algebraic expression document. important attribute unit.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits a formula into a left and right side — parse.formula","title":"Splits a formula into a left and right side — parse.formula","text":"function splits reaction formulka apart parts, removing whitespace side: \"+ 2*B <=> AB2\" split list two entries list$reactants == c(\"\",\"2*B\") list$products == c(\"AB2\")","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits a formula into a left and right side — parse.formula","text":"","code":"parse.formula(reactionFormula)"},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits a formula into a left and right side — parse.formula","text":"string - reactionFormula","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits a formula into a left and right side — parse.formula","text":"named list forward component backward     component, entry contains character vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Find forward and backward component in a reaction kinetic — parse.kinetic","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"reaction kinetic can almost function, general possible tell apart part kinetic law .","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"","code":"parse.kinetic(reactionKinetic)"},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"reactionKinetic string kinetic law reaction","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"character vector components named 'forward' 'backward'","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"mass action kinetics, positive reaction rate coefficients, expressions mostly look like : kf*prod(reactants.concentration) - kb*prod(product.concentrations) functions splits '-', none present, reaction assumed irreversible. general setting ('-' split wrong), splitting done hand complex rules.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"","code":"parse.kinetic(\"kf*A*B-kb*C\") #> Error in parse.kinetic(\"kf*A*B-kb*C\"): could not find function \"parse.kinetic\"  parse.kinetic(\"kf*A*B\") #> Error in parse.kinetic(\"kf*A*B\"): could not find function \"parse.kinetic\"  parse.kinetic(\"kf*A/(Km+A)\") #> Error in parse.kinetic(\"kf*A/(Km+A)\"): could not find function \"parse.kinetic\""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotSimualtionsFromSBtab.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","title":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","text":"function imports model experimental data saved SBtab files, simualtes model initial conditions input corresponding experiments, plots simulations together corresponding experimental data. currently works one dimensional output.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotSimualtionsFromSBtab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","text":"","code":"plotSimualtionsFromSBtab(   SBtabDir,   paramVal,   plotDir = NULL,   width = 15,   heigth = 10 )"},{"path":"https://icpm-kth.github.io/uqsa/reference/plotSimualtionsFromSBtab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","text":"SBtabDir directory contains `.tsv` files (SBtab content) paramVal parameter vector model simulated plotDir directory plots saved .pdf .RData variables width width plot window heigth heigth plot window","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotSimualtionsFromSBtab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","text":"vector R plot objects","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/preCalibration.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine a starting value for ABC's delta — preCalibration","title":"Determine a starting value for ABC's delta — preCalibration","text":"ABC settings model solution compared data acceptance threshold: delta. -pre calibration function attempts adjust delta value.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/preCalibration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine a starting value for ABC's delta — preCalibration","text":"","code":"preCalibration(objectiveFunction, npc = 1000, rprior, rep = 1)"},{"path":"https://icpm-kth.github.io/uqsa/reference/preCalibration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine a starting value for ABC's delta — preCalibration","text":"npc sample size pre-calibration. rprior function generates random ABC variables, distributed according prior. rep number repetitions preCalibration process experiments list simulation experiments. ABCMCMC. modelName name used find file functions within file according naming conventions (model name file can differ, file-name can attached name comment). parMap remapping function takes ABC sampling variables returns valid model parameters getScore function maps model's output values ABC score values (comparison data).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/preCalibration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine a starting value for ABC's delta — preCalibration","text":"list entries preDelta prePar, final values     calibration run","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":null,"dir":"Reference","previous_headings":"","what":"propensity creates a propensity formula — propensity","title":"propensity creates a propensity formula — propensity","text":"given custom math expressions needed calculate propensity, propensity coefficient kinetic law reaction, function makes string can used GillespieSSA2.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"propensity creates a propensity formula — propensity","text":"","code":"propensity(conv.coeff, kinetic.law, rExpressions)"},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"propensity creates a propensity formula — propensity","text":"conv.coeff propensity conversion coefficient: conv.coeff*kinetic.law = propensity function kinetic.law kinetic law reaction (used ODEs) rExpressions named math expressions appear kinetic.law reaction","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"propensity creates a propensity formula — propensity","text":"string representation propensity function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"propensity creates a propensity formula — propensity","text":"propensity coefficient translates ","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rCopulaPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","title":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","text":"returned function generates n random vectors, rows matrix.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rCopulaPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","text":"","code":"rCopulaPrior(Copula)"},{"path":"https://icpm-kth.github.io/uqsa/reference/rCopulaPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","text":"Copula return value fitCopula()","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rCopulaPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","text":"matrix random values","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rCopulaPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","text":"","code":"rcp<-rCopulaPrior(makeIndepCopula(ll=c(0,1,2),ul=c(1,2,3))) rcp(12) #>              [,1]     [,2]     [,3] #>  [1,] 0.291391848 1.821820 2.308914 #>  [2,] 0.276698532 1.195348 2.300304 #>  [3,] 0.580791103 1.938274 2.660440 #>  [4,] 0.006571502 1.770272 2.889942 #>  [5,] 0.815847922 1.891756 2.707124 #>  [6,] 0.499349561 1.982081 2.770393 #>  [7,] 0.012910675 1.448696 2.687135 #>  [8,] 0.511471820 1.924873 2.061243 #>  [9,] 0.283148868 1.670716 2.178225 #> [10,] 0.383028873 1.841478 2.481764 #> [11,] 0.573533862 1.909427 2.901721 #> [12,] 0.193835517 1.378211 2.585805"},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"rNormalPrior returns a random vector generator — rNormalPrior","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"return value function generates random vectors size mean sd multivariate normal distribution  independent components mean \"mean\" standard deviation \"sd\". random vectors returned n rows matrix, n argument returned function.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"","code":"rNormalPrior(mean, sd)"},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"mean mean random variables (vector) sd standard deviation random variables (size vector mean)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"independentent multivariate normal random vector generating function: rprior(n),     n requested number vectors (rows)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"","code":"rnp<-rNormalPrior(mean=c(0,1,2),sd=c(1,2,3)) rnp(12) #>              [,1]         [,2]       [,3] #>  [1,] -0.11869206 -0.079396009  2.1491155 #>  [2,] -1.16177970  1.670616637  1.6448440 #>  [3,] -0.78161249 -0.190884129  1.0286433 #>  [4,] -1.45308142  3.758467429  2.7927955 #>  [5,]  0.50986588  1.034911519  1.2207974 #>  [6,]  0.08146079  0.464557053  0.6433692 #>  [7,]  0.16496506  5.813204942 -1.5227606 #>  [8,] -1.09097039  0.365109335 -4.7660843 #>  [9,]  0.62933216  0.655815962  3.3280845 #> [10,]  2.36670105  2.119520728  5.1527349 #> [11,]  0.63343223 -0.912841692  1.6685404 #> [12,]  0.50887599 -0.002240231  3.7996742"},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"rUniformPrior returns a random vector generator — rUniformPrior","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"return value function generates random vectors size ll ul uniform distribution within limits defined ul ll. random vectors returned n rows matrix, n argument returned function.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"","code":"rUniformPrior(ll, ul)"},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"ll lower limit random variables (vector) ul upper limit random variables (size vector ll)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"uniform random vector generating function: runiform(n),     n requested number vectors (rows)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"","code":"rup<-rUniformPrior(ll=c(0,1,2),ul=c(1,2,3)) rup(12) #>             [,1]     [,2]     [,3] #>  [1,] 0.38033531 1.946956 2.155851 #>  [2,] 0.35705499 1.163762 2.550624 #>  [3,] 0.42701145 1.119825 2.176123 #>  [4,] 0.38967556 1.092091 2.515930 #>  [5,] 0.05672616 1.276438 2.156068 #>  [6,] 0.83478765 1.106827 2.264240 #>  [7,] 0.50135596 1.873825 2.731459 #>  [8,] 0.02241598 1.117188 2.100773 #>  [9,] 0.61243155 1.413464 2.006078 #> [10,] 0.05593073 1.452468 2.966817 #> [11,] 0.26547947 1.097157 2.908125 #> [12,] 0.89753910 1.483017 2.950395"},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an Experiment using the named ODE Model — runModel","title":"Simulate an Experiment using the named ODE Model — runModel","text":"Simulation experiments consist least initial values state variables, parameter vector, list times solution needs known.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an Experiment using the named ODE Model — runModel","text":"","code":"runModel(experiments, modelName, parABC, parMap = identity)"},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an Experiment using the named ODE Model — runModel","text":"experiments list experiments simulate modelName used find model files functions within file (prefix) parABC matrix column vectors; column contains vector normal parameters (e.g. kinetic params like kf kr) input_parameters (concatenated order). N columns, N simulations performed.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate an Experiment using the named ODE Model — runModel","text":"output function values","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate an Experiment using the named ODE Model — runModel","text":"function use GSL solvers, deSolve [default].  addition, model usually observables: values depend state variables can measured real experiment. modeled output functions. distinguish normal parameters input parameters. Input parameters known subject estimation procedure. Furthermore, meant represent experimental conditions, either direct control experimenter carefully measured. inputs probably different simulation experiment least one value. environment variable set \"C\", function attempt compile file modelName_gvf.c shared library modelName., already exist.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.graph.html","id":null,"dir":"Reference","previous_headings":"","what":"plot the sensitivity matrix — sensitivity.graph","title":"plot the sensitivity matrix — sensitivity.graph","text":"Produce cumulative shaded area plot sensitivity matrix.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot the sensitivity matrix — sensitivity.graph","text":"","code":"sensitivity.graph(   u,   S,   color = hcl.colors(dim(S)[2]),   line.color = hcl.colors(dim(S)[2] + 1),   do.sort = TRUE,   decreasing = FALSE,   title = \"Sensitivity\" )"},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot the sensitivity matrix — sensitivity.graph","text":"u values x-axis plot, named, names put tick-marks S sensitivity matrix returned `sensitivity()`, S[,j] respect model output parameter j color list colors use shaded areas, e.g.: rainbow(24) line.color color lines drawn shaded areas .sort parameter sensitivities sorted according mean outputs, parameter sensitivity plotted first, bottom decreasing direction sort, first item sorted list (parameter) plotted first, thus bottom plot title string, written , title","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot the sensitivity matrix — sensitivity.graph","text":"nothing","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Sensitivity Analysis — sensitivity","title":"Global Sensitivity Analysis — sensitivity","text":"function performs binning based estimation global sensitivity model's output respect model's parameters. output can prediction model's behaviour scenario interest (parameters, input, intial values, boundary conditions, scheduled events etc.). output models potentially measurable value (\"observable\"). sample-rows output rows must correspond (must model simulation).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Sensitivity Analysis — sensitivity","text":"","code":"sensitivity(parSample, outputSample, nBins = \"Sturges\")"},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Sensitivity Analysis — sensitivity","text":"parSample matrix parameter vectors (rows) outputSample matrix, rows outputs (row-index sample index) nBins number bins, unset defaults default hist function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Sensitivity Analysis — sensitivity","text":"sensitivity S[,j] output[] respect parameter[j]","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":null,"dir":"Reference","previous_headings":"","what":"This creates a closure that simulates the model — simulator.R","title":"This creates a closure that simulates the model — simulator.R","text":"shorter alternative runModel function (R, deSolve backend).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This creates a closure that simulates the model — simulator.R","text":"","code":"simulator.R(experiments, model, parMap = identity)"},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This creates a closure that simulates the model — simulator.R","text":"experiments list experiments simulate: inital values, inputs, time vectors, initial times parMap model called parMap(parABC); parameter transformation can happen . modelName string (optional comment indicating .file) points model simulate parABC parameters model, subject change parMap.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This creates a closure that simulates the model — simulator.R","text":"closure returns model's output given parameter vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This creates a closure that simulates the model — simulator.R","text":"returns closure around:     - experiments,     - model,     - parameter mapping returned function depends parABC (sampling parameters).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This creates a closure that simulates the model — simulator.R","text":"","code":"model.sbtab <- SBtabVFGEN::sbtab_from_tsv(dir(pattern=\"[.]tsv$\")) #> Error in file(con, \"r\"): invalid 'description' argument    experiments <- SBtabVFGEN::sbtab.data(model.sbtab) #> Error in is.factor(x): object 'model.sbtab' not found    parABC <- SBtabVFGEN::sbtab.quantity(model.sbtab$Parameter) #> Error: 'sbtab.quantity' is not an exported object from 'namespace:SBtabVFGEN'     source(\"<model name>.R\") # this defines the `model` variable #> Warning: cannot open file '<model name>.R': No such file or directory #> Error in file(filename, \"r\", encoding = encoding): cannot open the connection    simulate <- simulator.R(experiments, model,  parABC) #> Error in simulator.R(experiments, model, parABC): object 'experiments' not found    yf <- sim(parABC) #> Error in sim(parABC): could not find function \"sim\""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":null,"dir":"Reference","previous_headings":"","what":"This creates a closure that simulates the model — simulator.c","title":"This creates a closure that simulates the model — simulator.c","text":"shorter alternative runModel function (C backend).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This creates a closure that simulates the model — simulator.c","text":"","code":"simulator.c(experiments, modelName, parMap = identity, noise = FALSE)"},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This creates a closure that simulates the model — simulator.c","text":"experiments list experiments simulate: inital values, inputs, time vectors, initial times modelName string (optional comment indicating .file) points model simulate parMap model called parMap(parABC); parameter transformation can happen . noise boolean variable. noise=TRUE, Gaussian noise added output simulations. standard deviation Gaussian noise equal measurement error. noise=FALSE output deterministic solution ODE system. parABC parameters model, subject change parMap.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This creates a closure that simulates the model — simulator.c","text":"closure returns model's output given parameter vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This creates a closure that simulates the model — simulator.c","text":"returns closure around:     - experiments,     - model,     - parameter mapping returned function depends parABC (sampling parameters). simulation done suing rgsl backend.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This creates a closure that simulates the model — simulator.c","text":"","code":"model.sbtab <- SBtabVFGEN::sbtab_from_tsv(dir(pattern=\"[.]tsv$\")) #> Error in file(con, \"r\"): invalid 'description' argument    experiments <- SBtabVFGEN::sbtab.data(model.sbtab) #> Error in is.factor(x): object 'model.sbtab' not found    parABC <- SBtabVFGEN::sbtab.quantity(model.sbtab$Parameter) #> Error: 'sbtab.quantity' is not an exported object from 'namespace:SBtabVFGEN'     modelName <- checkModel(\"<insert_model_name>_gvf.c\") #> Error in checkModel(\"<insert_model_name>_gvf.c\"): !is.null(modelFile) && length(modelFile) > 0 is not TRUE    simulate <- simulator.c(experiments, modelName,  parABC) #> Loading required package: rgsl    yf <- sim(parABC) #> Error in sim(parABC): could not find function \"sim\""},{"path":"https://icpm-kth.github.io/uqsa/reference/sum.of.bin.variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","title":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","text":"function calculates variance sum vector valued observable.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sum.of.bin.variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","text":"","code":"sum.of.bin.variance(hst, binMeans, totalMean)"},{"path":"https://icpm-kth.github.io/uqsa/reference/sum.of.bin.variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","text":"hst histogram parameter sample binMeans means observable within bin (rows means) totalMean mean observable entire sample (vector)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sum.of.bin.variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","text":"weighted sum square differences binMean totalMean","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa-package.html","id":null,"dir":"Reference","previous_headings":"","what":"uqsa: Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling — uqsa-package","title":"uqsa: Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling — uqsa-package","text":"package solve initial value problem (given ordinary differential equation) list simulation experiments. simulations compared data, repeatedly. package can sample parameters model via ABC (approximate Bayesian computation) quantify uncertainty remains within model even considering data. Experiments evaluated sequence, intermediate probability densities modeled using VineCopua package.","code":""},{"path":[]},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"uqsa: Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling — uqsa-package","text":"Maintainer: Olivia Eriksson olivia@mech.kth.se Authors: Alexandra Jauhiainen Alexandra.Jauhiainen@astrazeneca.com Federica Milinanni fedmil@kth.se Andrei Kramer andreikr@kth.se [contributor]","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Load an example model for this package — uqsa_example","title":"Load an example model for this package — uqsa_example","text":"function finds path example model, given name. SBtab format, model data travel together (different tables, documents).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load an example model for this package — uqsa_example","text":"","code":"uqsa_example(modelName = NULL, full.names = TRUE, pat = \"[.]tsv$\", f = NULL)"},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load an example model for this package — uqsa_example","text":"modelName name model, e.g.: \"AKAR4\", \"AKAP79\", \"CaMKII\"; empty, function lists available examples. full.names return full paths files - defaults TRUE pat pattern find specific files; NULL, function returns directory example f alternatively, pat can set files ending f [value]","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load an example model for this package — uqsa_example","text":"location examples current environment     called arguments, paths model files     modelName provided full path example     file pattern _pat_ unset","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load an example model for this package — uqsa_example","text":"default function returns names tsv files belonging named model. modelName provided returns possible names (contents top-level example directory).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load an example model for this package — uqsa_example","text":"","code":"uqsa_example() #> [1] \"AKAP79\"    \"AKAR4\"     \"CaMKII\"    \"README.md\" uqsa_example(\"AKAR4\") #> [1] \"/tmp/RtmpaFeTqf/temp_libpatha75ce2b4cdfbc/uqsa/extdata/AKAR4/AKAR4_100nM.tsv\"       #> [2] \"/tmp/RtmpaFeTqf/temp_libpatha75ce2b4cdfbc/uqsa/extdata/AKAR4/AKAR4_25nM.tsv\"        #> [3] \"/tmp/RtmpaFeTqf/temp_libpatha75ce2b4cdfbc/uqsa/extdata/AKAR4/AKAR4_400nM.tsv\"       #> [4] \"/tmp/RtmpaFeTqf/temp_libpatha75ce2b4cdfbc/uqsa/extdata/AKAR4/AKAR4_Compound.tsv\"    #> [5] \"/tmp/RtmpaFeTqf/temp_libpatha75ce2b4cdfbc/uqsa/extdata/AKAR4/AKAR4_Experiments.tsv\" #> [6] \"/tmp/RtmpaFeTqf/temp_libpatha75ce2b4cdfbc/uqsa/extdata/AKAR4/AKAR4_Output.tsv\"      #> [7] \"/tmp/RtmpaFeTqf/temp_libpatha75ce2b4cdfbc/uqsa/extdata/AKAR4/AKAR4_Parameter.tsv\"   #> [8] \"/tmp/RtmpaFeTqf/temp_libpatha75ce2b4cdfbc/uqsa/extdata/AKAR4/AKAR4_Reaction.tsv\"    uqsa_example(\"AKAR4\",pat=NULL) #> [1] \"/tmp/RtmpaFeTqf/temp_libpatha75ce2b4cdfbc/uqsa/extdata/AKAR4\""},{"path":"https://icpm-kth.github.io/uqsa/news/index.html","id":"uqsa-014","dir":"Changelog","previous_headings":"","what":"uqsa 0.1.4","title":"uqsa 0.1.4","text":"Published Application Note pre-print arxiv.org.","code":""}]
