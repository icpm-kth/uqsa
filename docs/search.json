[{"path":"https://icpm-kth.github.io/uqsa/articles/ABC_sampling.html","id":"available-prior-functions-in-our-examples","dir":"Articles","previous_headings":"","what":"Available Prior functions in our examples","title":"ABC sampling","text":"(Log)uniform (Log)normal","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/ABC_sampling.html","id":"acceptance-criteria","dir":"Articles","previous_headings":"Available Prior functions in our examples","what":"Acceptance criteria","title":"ABC sampling","text":"-Distance function- Acceptance probability","code":""},{"path":[]},{"path":"https://icpm-kth.github.io/uqsa/articles/ABC_sampling.html","id":"abcmcmc","dir":"Articles","previous_headings":"R-functions","what":"ABCMCMC","title":"ABC sampling","text":"Build chain parameters approximately distributed posterior distribution model parameters ABCMCMC function generates chains sample parameters using ABCMCMC algorithm. samples approximately distributed posterior probability model parameters. build chain, algorithm considers (current) last value chain proposes parameter sampled multivariate normal distribution cenetered current parameter Sigma0 covariance matrix. covariance matrix adaptively modified: chain gets stuck, regularization performed. 4 regularizations, chain aborted. , understand proposed parameter just sampled “agreement” experimental data objectiveFunction called proposed parameter vector: objectiveFunction simulates model computes distance experimental data output functions model. distance larger threshold delta, proposed parameter likely generated experimental data, therefore rejected. Markov chain repeat point (stands still). distance less threshold delta, proposed parameter accepted probability equal ratio prior probability density (calculated dprior) evaluated proposed current parameter, respectively. Input arguments * objectiveFunction (function) - function , given (vectorial) parameter input, simulated model outputs distance experimental data data simulated model parameter provided input * startPar (numeric) - parameter (vector) corresponds starting parameter chain * nSims (integer) - requested number samples output chain * Sigma0 (numeric) - matrix dimensions equal length (vectorial) model parameter, corresponding covariance matrix desired proposed moves parameter space. ABCMCMC algorithm covariance matrix slightly modified regularized enhance exploration parameter space convergence method * delta (numeric) - ABC acceptance threshold * dprior (function) - function evaluates prior probability density function parameter given input Output (list) output ABCMCMC list containing following data: * draws (numeric) - matrix nSims rows number columns equal length model parameter. row corresponds sample ABCMCMC chain * scores (numeric) - vector length nSims containing distances experimental data data simulated corresponding ABCMCMC samples (stored draws) * acceptanceRate (numeric) - fraction parameters ABCMCMC chain proposed accepted. * nRegularizations (integer) - number regularizations performed covariance matrix moves proposed algorithm","code":"mcmc <- ABCMCMC(objectiveFunction, startPar, nSims, Sigma0, delta, dprior, acceptanceProbability=NULL)"},{"path":"https://icpm-kth.github.io/uqsa/articles/ABC_sampling.html","id":"checkfitwithpreviousexperiments","dir":"Articles","previous_headings":"R-functions","what":"checkFitWithPreviousExperiments","title":"ABC sampling","text":"ABC acceptance currently sampled values given old data (Prior) function tests samples draws experimental data used generate draws. experimental data needs used construct variable objectiveFunction. objectiveFunction used simualte model draws parameters, compare simulated data old experimental data. distances computed objectiveFunction ABC threshold delta, corresponding parameters draws kept. Otherwise, discarded. Input arguments * draws (numeric) - matrix sampled values (filtered) * objectiveFunction (function) - function , given (vectorial) parameter input, simulated model outputs distance experimental data data simulated model parameter provided input * delta (numeric) - acceptance threshold Output (numeric) Filtered subset (matrix) acceptable parameter draws","code":"oldObjective <- makeObjective(oldExperiments,modelName, distanceMeasure, parMap, simulate) filteredDraws <- checkFitWithPreviousExperiments(draws=mcmc$draws, objectiveFunction=oldObjective, delta)"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"akar4-with-conservation-law-analysis","dir":"Articles","previous_headings":"","what":"AKAR4 with Conservation Law Analysis","title":"AKAR4 with MCMC","text":"version AKAR4 model built conservation law analysis turned processing SBtab content produce vector field file (vf). downstream effect R C code.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"loading-model-and-data","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis","what":"Loading Model and Data","title":"AKAR4 with MCMC","text":"load SBtab content tsv files extract data : next block load series functions: AKAR4cl_vf, AKAR4cl_jac, etc.; also loads model variable: list functions generic names.","code":"modelFiles <- uqsa_example(\"AKAR4cl\",pattern=\"[.]tsv$\",full.names=TRUE) SBtab <- SBtabVFGEN::sbtab_from_tsv(modelFiles) #> [tsv] file[1] «/home/andrei/R/library/uqsa/extdata/AKAR4cl/100nM.tsv» belongs to Document «AKAR4cl» #>  I'll take this as the Model Name. source(uqsa_example(\"AKAR4cl\",pat=\"^AKAR4cl[.]R$\")) names(model) #> [1] \"vf\"       \"jac\"      \"jacp\"     \"func\"     \"funcJac\"  \"funcJacp\" \"init\"     #> [8] \"par\"      \"name\" # compile modelName <- checkModel(\"AKAR4cl\",uqsa_example(\"AKAR4cl\",pat=\"_gvf[.]c$\")) #> building a shared library from c source, and using GSL odeiv2 as backend (pkg-config is used here). #> cc -shared -fPIC `pkg-config --cflags gsl` -o './AKAR4cl.so' '/home/andrei/R/library/uqsa/extdata/AKAR4cl/AKAR4cl_gvf.c' `pkg-config --libs gsl`"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"data-and-experiments","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis > Loading Model and Data","what":"Data and Experiments","title":"AKAR4 with MCMC","text":"experiments variable contains description simulate experiment also data simulation try replicate. Since model build conservation law analysis, need load results analysis, adjust simulation instructions: default values ODE model parameters, taking new inputs account:","code":"load(uqsa_example(\"AKAR4cl\",pat=\"^ConservationLaws[.]RData$\")) print(ConLaw$Text) #> [1] \"AKAR4_C_ConservedConst = AKAR4_C+1*C\"      #> [2] \"AKAR4_ConservedConst = AKAR4+1*AKAR4p-1*C\" experiments <- sbtab.data(SBtab,ConLaw) n <- length(experiments[[1]]$input) stopifnot(n>0) parVal <- head(AKAR4cl_default(),-n) print(parVal) #> kf_C_AKAR4 kb_C_AKAR4 kcat_AKARp  #>      0.018      0.106     10.200"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"prior","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis","what":"Prior","title":"AKAR4 with MCMC","text":"Scale determine prior values, default parameter range:","code":"defRange <- 2 # log-10 space dprior <- dNormalPrior(mean=log10(parVal),sd=rep(defRange,length(parVal))) rprior <- rNormalPrior(mean=log10(parVal),sd=rep(defRange,length(parVal))) print(dprior(log10(parVal))) #> [1] 0.007936704"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"mcmc-related-model-functions","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis","what":"MCMC related Model Functions","title":"AKAR4 with MCMC","text":"construct several closures needed MCMC","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"simulations","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis > MCMC related Model Functions","what":"Simulations","title":"AKAR4 with MCMC","text":"","code":"sensApprox <- sensitivityEquilibriumApproximation(experiments, model, log10ParMap, log10ParMapJac) simulate <- simulator.c(experiments,modelName,log10ParMap,noise=FALSE,sensApprox) y <- simulate(log10(parVal))  plot(experiments[[1]]$outputTimes,as.numeric(y[[1]]$state[1,,1]),xlab='time',ylab='AKAR4p', main='state',type='l')"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"likelihood-related-functions","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis > MCMC related Model Functions","what":"Likelihood related Functions","title":"AKAR4 with MCMC","text":"","code":"llf <- logLikelihood(experiments) gradLL <- gradLogLikelihood(model,experiments, parMap=log10ParMap, parMapJac=log10ParMapJac) fiIn <- fisherInformation(model, experiments, parMap=log10ParMap) fiPrior <- solve(diag(defRange, length(parVal))) print(fiPrior) # constant matrix #>      [,1] [,2] [,3] #> [1,]  0.5  0.0  0.0 #> [2,]  0.0  0.5  0.0 #> [3,]  0.0  0.0  0.5"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"maerkov-chain-update-function","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis > MCMC related Model Functions","what":"Maerkov Chain Update Function","title":"AKAR4 with MCMC","text":"","code":"update  <- mcmcUpdate(simulate=simulate,     experiments=experiments,     model=model,     logLikelihood=llf,     gradLogLikelihood=gradLL,     fisherInformation=fiIn,     fisherInformationPrior=fiPrior,     dprior=dprior)"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"find-a-good-smmala-step-size","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis","what":"Find a Good SMMALA step size:","title":"AKAR4 with MCMC","text":", construct mcmc function derived update function, initialize Markov chain start several chains parallel: define adjustment factor L() h, based acceptance rate test chain size N (good value test chain around 100). factor L() increases h target acceptance 25%.  Initialize parallel execution, 4 processes, 16 Markov chains. Next, perform sampling parallel, also swap positions every :","code":"m <- mcmc(update)   # a Markov chain h <- 1e-1           # step size guess  nChains <- 4 accTarget <- 0.25 L <- function(a) { (1.0 / (1.0+exp(-(a-accTarget)/0.1))) + 0.5 } N <- 100  start_time <- Sys.time() x <- log10(parVal)                               # do the adjustment of h a few times options(mc.cores = parallel::detectCores()) for (j in seq(6)){  cat(\"adjusting step size: \",h,\" \\n\");  x <- mcmcInit(1.0,x,simulate,dprior,llf,gradLL,fiIn)  Sample <- m(x,N,eps=h)  a <- attr(Sample,\"acceptanceRate\")  cat(\"acceptance: \",a*100,\" %\\n\")  h <- h * L(a)  x <- as.numeric(tail(Sample,1)) } #> adjusting step size:  0.1   #> acceptance:  27  % #> adjusting step size:  0.1049834   #> acceptance:  29  % #> adjusting step size:  0.115344   #> acceptance:  18  % #> adjusting step size:  0.09594452   #> acceptance:  28  % #> adjusting step size:  0.1030869   #> acceptance:  19  % #> adjusting step size:  0.08807162   #> acceptance:  29  % plot(attr(Sample,\"logLikelihood\"),xlab=\"iteration\",ylab=\"log-likelihood\",main=\"small Sample to find a good step size\",type='l') cat(\"final step size: \",h,\"\\n\") #> final step size:  0.0967632 cat(\"finished adjusting after\",difftime(Sys.time(),start_time,units=\"sec\"),\" seconds\\n\") #> finished adjusting after 30.12104  seconds n <- 16                                          # cluster size nChains <- 16 options(mc.cores = parallel::detectCores() %/% n) cl <- parallel::makeForkCluster(n) parallel::clusterSetRNGStream(cl, 1337)          # seeding random numbers sequences  betas <- seq(1,0,length.out=nChains)^2 parMCMC <- lapply(betas,mcmcInit,parMCMC=log10(parVal),simulate=simulate,dprior=dprior,logLikelihood=llf,gradLogLikelihood=gradLL,fisherInformation=fiIn) start_time <- Sys.time()                         # measure sampling time Sample <- NULL for (i in seq(100)){                            # 16 chains, 4 workers  s <- parallel::parLapply(cl, parMCMC, m, N=100, eps=h)  parMCMC <- lapply(s,attr,which=\"lastPoint\")  parMCMC <- swap_points(parMCMC)  if (i>2) {   Sample <- rbind(Sample,s[[1]])  } }  colnames(Sample) <- names(parVal)   time_ = difftime(Sys.time(),start_time,units=\"sec\") parallel::stopCluster(cl) cat(\"finished sampling after\",time_,\" seconds\\n\") #> finished sampling after 650.7688  seconds"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"AKAR4 with MCMC","text":"final sample looks like :","code":"print(tail(Sample,10)) #>          kf_C_AKAR4 kb_C_AKAR4 kcat_AKARp #> [39991,]  -1.748616  -1.226415   2.167335 #> [39992,]  -1.748616  -1.226415   2.167335 #> [39993,]  -1.748616  -1.226415   2.167335 #> [39994,]  -1.748616  -1.226415   2.167335 #> [39995,]  -1.728994  -1.217590   2.261970 #> [39996,]  -1.745386  -1.282003   2.287830 #> [39997,]  -1.745386  -1.282003   2.287830 #> [39998,]  -1.745386  -1.282003   2.287830 #> [39999,]  -1.745386  -1.282003   2.287830 #> [40000,]  -1.745386  -1.282003   2.287830 hexbin::hexplom(Sample)"},{"path":"https://icpm-kth.github.io/uqsa/articles/GenerateCodeInSHELL.html","id":"generated-code","dir":"Articles","previous_headings":"","what":"Generated Code","title":"Generate C Code outside of R","text":"files generated manner need re-created change model structurally. change initial conditions, parameter values result largely code, except function returns default initial conditions default parameter values. myModel_gvf.c can either convert shared library , use checkModel function included uqsa: simulator guess name ./myModel.supply modelName=\"myModel\", locations, attach path modelName comment.","code":"gcc -shared -fPIC -O2 -o myModel.so myModel_gvf.c"},{"path":"https://icpm-kth.github.io/uqsa/articles/GenerateCodeInSHELL.html","id":"gnu-make","dir":"Articles","previous_headings":"","what":"GNU make","title":"Generate C Code outside of R","text":"can automated Makefile: Calling make arguments project directory re build model anything changed tsv files.","code":".PHONY: all  model = myModel  all: $(model).so $(model).R   %.R: %.tar.gz     ode -R --maxima $^ > $@  %_gvf.c: %.tar.gz     ode -C --maxima $^ > $@  %.vf %.tar.gz %.zip: *.tsv     sbtab_to_vfgen $^  %.so: %_gvf.c     gcc -shared -fPIC -O2 -o $@ $^"},{"path":"https://icpm-kth.github.io/uqsa/articles/GenerateCodeInSHELL.html","id":"for-open-document-spreadsheets","dir":"Articles","previous_headings":"GNU make","what":"for Open Document Spreadsheets","title":"Generate C Code outside of R","text":"similar file, models stored .ods spreadsheets, using prefix function GNU make:","code":".PHONY: all  all: $(addprefix myModel, .so .R)   %.R: %.tar.gz     ode -R --maxima $^ > $@  %_gvf.c: %.tar.gz     ode -C --maxima $^ > $@  %.vf %.tar.gz: %.ods     sbtab_to_vfgen $^  %.so: %_gvf.c     gcc -shared -fPIC -O2 -o $@ $^"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"advantages-of-sbtab","dir":"Articles","previous_headings":"","what":"Advantages of SBtab","title":"SBtab","text":"Data models tightly linked also include two tables relationships data model simulations examples: Experiments, table list experiments together appropriate model settings Output, list output functions correspond measurable values model, named corresponding data columns SBML level 2 lacks ability carry data model also lacks vocabulary define parameters inputs model internal. also way define observable SBML (function models measurement device, observation). reason, SBML document converted SBtab document qualities (need). , may wrong SBML can . Future versions SBML may course add new features. general, SBML hard.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"sbtab-file-structure","dir":"Articles","previous_headings":"","what":"SBtab File Structure","title":"SBtab","text":"file header, attributes key='value' separated spaces tabs, e.g.: header doesn’t columns, ’s line text, immediately followed actual table. sections , specify header like give example table can follow header. can also include columns order; column names special meanings, unknown columns parsed (harmless). don’t parse version attribute attribute TableName Document. Document must string tables. don’t check . use attribute assign name model read files TableType (matter) two generic table-types can used specific one applicable: TableType='Quantity' TableType='QuantityMatrix'. don’t use TableType property , needed official (sbtab.net) tool-set work. TableName Tables pre-determined name, e.g. Reaction, Compound. found name, case sensitive spelling. tables mentioned somewhere matter. SBtab document can number data tables, can name long unique. name tables used experiment ID. function SBtabVFGEN::sbtab.data() first reads table called Experiments, collects IDs searches tables named like experiment ID. mechanism used Event Schedules. SBtabVersion ignored","code":"!!SBtab SBtabVersion='1.0' TableName='Reaction' TableType='Reaction' Document='AKAP79' f <- uqsa_example(\"AKAP79\")          # this is what the directory is called sb <- SBtabVFGEN::sbtab_from_tsv(f) #> [tsv] file[1] «AKAP79_Compound.tsv» belongs to Document «AKAP79» #>  I'll take this as the Model Name. #> AKAP79_Compound.tsv  AKAP79_Experiments.tsv  AKAP79_Expression.tsv  AKAP79_Input.tsv  AKAP79_Output.tsv  AKAP79_Parameter.tsv  AKAP79_Reaction.tsv  X0uM_cAMPCaN_AKAP79_0_nM_cAMP.tsv  X0uM_cAMPCaN_only_0_nM_cAMP.tsv  X0uM_cAMPno_CaN_0_nM_cAMP.tsv  X1000nM_cAMPCaN_AKAP79_1_uM_cAMP.tsv  X1000nM_cAMPCaN_only_1_uM_cAMP.tsv  X1000nM_cAMPno_CaN_1_uM_cAMP.tsv  X100nM_cAMPCaN_AKAP79_100_nM_cAMP.tsv  X100nM_cAMPCaN_only_100_nM_cAMP.tsv  X100nM_cAMPno_CaN_100_nM_cAMP.tsv  X2000nM_cAMPCaN_AKAP79_2_uM_cAMP.tsv  X2000nM_cAMPCaN_only_2_uM_cAMP.tsv  X2000nM_cAMPno_CaN_2_uM_cAMP.tsv  X200nM_cAMPCaN_AKAP79_200_nM_cAMP.tsv  X200nM_cAMPCaN_only_200_nM_cAMP.tsv  X200nM_cAMPno_CaN_200_nM_cAMP.tsv  X500nM_cAMPCaN_AKAP79_500_nM_cAMP.tsv  X500nM_cAMPCaN_only_500_nM_cAMP.tsv  X500nM_cAMPno_CaN_500_nM_cAMP.tsv print(comment(sb))                   # the value of the Document attribute of f[1] #> [1] \"AKAP79\" print(names(sb))                     # the values of the TableName attributes #>  [1] \"Compound\"                          \"Experiments\"                       #>  [3] \"Expression\"                        \"Input\"                             #>  [5] \"Output\"                            \"Parameter\"                         #>  [7] \"Reaction\"                          \"X0uM_cAMPCaN_AKAP79_0_nM_cAMP\"     #>  [9] \"X0uM_cAMPCaN_only_0_nM_cAMP\"       \"X0uM_cAMPno_CaN_0_nM_cAMP\"         #> [11] \"X1000nM_cAMPCaN_AKAP79_1_uM_cAMP\"  \"X1000nM_cAMPCaN_only_1_uM_cAMP\"    #> [13] \"X1000nM_cAMPno_CaN_1_uM_cAMP\"      \"X100nM_cAMPCaN_AKAP79_100_nM_cAMP\" #> [15] \"X100nM_cAMPCaN_only_100_nM_cAMP\"   \"X100nM_cAMPno_CaN_100_nM_cAMP\"     #> [17] \"X2000nM_cAMPCaN_AKAP79_2_uM_cAMP\"  \"X2000nM_cAMPCaN_only_2_uM_cAMP\"    #> [19] \"X2000nM_cAMPno_CaN_2_uM_cAMP\"      \"X200nM_cAMPCaN_AKAP79_200_nM_cAMP\" #> [21] \"X200nM_cAMPCaN_only_200_nM_cAMP\"   \"X200nM_cAMPno_CaN_200_nM_cAMP\"     #> [23] \"X500nM_cAMPCaN_AKAP79_500_nM_cAMP\" \"X500nM_cAMPCaN_only_500_nM_cAMP\"   #> [25] \"X500nM_cAMPno_CaN_500_nM_cAMP\""},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"tabular-content","dir":"Articles","previous_headings":"SBtab File Structure","what":"Tabular Content","title":"SBtab","text":"second line/row contains table column names, often start exclamation point, another special character signify special meaning.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"special-column-symbols-prefixes","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content","what":"Special Column Symbols (Prefixes)","title":"SBtab","text":"!abc, ! means column special meaning, defined SBtab standard must table xyz appears !ID column, column specifies standard error >xyz ultimately, meaning values column objective-function likelihood-function. user supplied function can interpret value way user wishes. value NA Inf, >xyz values removed default likelihood functions well. unknown standard error, x ± NA, x ± Inf value unknown; discount cases. column doesn’t start one !>~ isn’t special isn’t interpreted us. first column can called either !ID !Name (harmless ). first column called , scripts carry regardless, assuming kind name. , !Id, !id, ID? also work us – software. columns found name (case sensitive), can appear order. Variables reaction rates formulae first column IDs (regardless column label).","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"examples","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content","what":"Examples","title":"SBtab","text":"set columns given example tables following Sections. example SBtab file, general, header: file can look like spreadsheet software, e.g.gnumeric: variable mentioned , e.g. cAMP ID row another table, cAMP compound can found Compound.tsv, named like first column. Note 1 code ignores almost everything first line, except TableName Note 2 FALSE TRUE (Boolean values lots spreadsheet software uses) mostly work R correctly, can also work (literally) C (defined macros enums). spreadsheet software exports TRUE/FALSE 1/0 TSV (usually better). See last Section page topic. following examples tab separated (originally) printed using automatic vertical alignment, starting second line. copy paste new files, must tabs. code snippet displays SBtab screen (terminal) column alignment (losing tabstops):","code":"!!SBtab Document='AKAP79' SBtabVersion='1.0' TableName='Reaction' TableTitle='Reactions in AKAP79 Model' TableType='Reaction' !ID          !KineticLaw                                                                                    !ReactionFormula                   !IsReversible reaction_51  kf_Rii_C__RiiP_C*Rii_C                                                                         Rii_C <=> RiiP_C                   0 reaction_14  kf_RiiPxC__RiiP_C*RiiP*C - kb_RiiPxC__RiiP_C*RiiP_C                                            RiiP + C <=> RiiP_C                1 reaction_12  kf_RiiP_CxcAMP__RiiP_C_cAMP*RiiP_C*cAMP - kb_RiiP_CxcAMP__RiiP_C_cAMP*RiiP_C_cAMP              RiiP_C + cAMP <=> RiiP_C_cAMP      1 reaction_43  kf_RiiPXcAMP__RiiP_cAMP*cAMP*RiiP - kb_RiiPXcAMP__RiiP_cAMP*RiiP_cAMP                          cAMP + RiiP <=> RiiP_cAMP          1 reaction_23  kf_RiiP_cAMPxC__RiiP_C_cAMP*RiiP_cAMP*C - kb_RiiP_cAMPxC__RiiP_C_cAMP*RiiP_C_cAMP              RiiP_cAMP + C <=> RiiP_C_cAMP      1 reaction_78  kf_cAMPxRii__Rii_cAMP*cAMP*Rii - kb_cAMPxRii__Rii_cAMP*Rii_cAMP                                cAMP + Rii <=> Rii_cAMP            1 reaction_56  kf_Rii_CxcAMP__Rii_C_cAMP*Rii_C*cAMP - kb_Rii_CxcAMP__Rii_C_cAMP*Rii_C_cAMP                    Rii_C + cAMP <=> Rii_C_cAMP        1 reaction_76  kf_Rii_cAMPxC__Rii_C_cAMP*Rii_cAMP*C - kb_Rii_cAMPxC__Rii_C_cAMP*Rii_C_cAMP                    Rii_cAMP + C <=> Rii_C_cAMP        1 reaction_62  kf_Rii_C_cAMP__RiiP_C_cAMP*Rii_C_cAMP                                                          Rii_C_cAMP <=> RiiP_C_cAMP         0 reaction_58  kf_RiixC__Rii_C*Rii*C - kb_RiixC__Rii_C*Rii_C                                                  Rii + C <=> Rii_C                  1 reaction_44  kf_RiiPxCaN__RiiP_CaN*RiiP*CaN - kb_RiiPxCaN__RiiP_CaN*RiiP_CaN                                RiiP + CaN <=> RiiP_CaN            1 reaction_33  kf_CaNxRiiP_cAMP__RiiP_cAMP_CaN*CaN*RiiP_cAMP - kb_CaNxRiiP_cAMP__RiiP_cAMP_CaN*RiiP_cAMP_CaN  CaN + RiiP_cAMP <=> RiiP_cAMP_CaN  1 reaction_48  kf_RiiP_CaN__RiixCaN*RiiP_CaN                                                                  RiiP_CaN <=> Rii + CaN             0 reaction_37  kf_RiiP_cAMP_CaN__CaNXRii_cAMP*RiiP_cAMP_CaN                                                   RiiP_cAMP_CaN <=> CaN + Rii_cAMP   0 reaction_1   kf_C_AKAR4*C*AKAR4 - kb_C_AKAR4*AKAR4_C                                                        C + AKAR4 <=> AKAR4_C              1 reaction_2   kcat_AKARp*AKAR4_C                                                                             AKAR4_C <=> AKAR4p + C             0 head -n 1 Reaction.tsv tail -n +2 Reaction.tsv | column -t -s '    '"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"constant","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content","what":"Constant","title":"SBtab","text":"list constants. values never change model, e.g. Avogadro’s number: number items first line usually different rest, header, don’t always form neat table. also breaks smart display files tables github.","code":"!!SBtab  TableName='Constant'  Document='myModel'       !ID  !Unit                 !Value        L  1                     6.02214076E+23"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"input","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content","what":"Input","title":"SBtab","text":"Known paramters model, can vary experiments. Inputs distinguishes experiments alongside initial values, event schedules (interventions). default values. values can set line experiment experiment table, e.g.:","code":"!!SBtab TableName='Input' Document='myModel'  !ID  !DefaultValue  !Unit   !Comment  CaB  2000.0         nM      Calcium-Base-Level  ...  ...            ...     ... !!SBtab TableName='Experiment' Document='myModel' !ID !Type        !Time  >CaB    >... E1  Time Series  100    1700.0  ..."},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"parameter","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content","what":"Parameter","title":"SBtab","text":"Possibly unknown parameters model, parameters typically refer internal properties model rather something model experiment. !Scale column optional, often useful; several values possible: log10,log,linear (various spellings). missing, linear assumed.","code":"!!SBtab TableName='Parameter' Document='myModel'  !ID  !DefaultValue  !Std  !Unit     !Scale  kf1            1.8   0.1  s^(1)     natural logarithm   ...            ...  ...   ...       ..."},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"expression","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content","what":"Expression","title":"SBtab","text":"Mathematical sub-expressions can used reaction fluxes. Can used encode thermodynamic relationships parameters, model input signal. used assign name algebraic expression.","code":"!!SBtab TableName='Expression' Document='myModel'   !ID  !Unit  !Formula  KD_1  nM     (KD_3*KD_4)/KD_2   ...  ...    ..."},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"compound","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content","what":"Compound","title":"SBtab","text":"SBML parlance, species. several optional columns, e.g. !IsConstant !Type. variables usually used state variables ODE framework.","code":"!!SBtab TableName='Compound' TableType='Compound' Document='myModel'       !ID  !Unit  !InitialValue   PP2B_CaM  μM     0.0       ...  ...    ..."},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"reaction","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content","what":"Reaction","title":"SBtab","text":"Table Reactions can seen main piece information model. KineticLaw Formula required, even though kinetic law determined formula pinch (mass action). don’t infer kinetic laws code. reversibility reactions set via !IsReversible can expressed via TRUE/FALSE 1/0; effect arrow formula (intended official SBtab documentation), one sided arrow.","code":"!!SBtab TableName='Reaction' TableType='Reaction' Document='myModel'        !ID  !KineticLaw    !IsReversible   !ReactionFormula   Reaction1  kf*A*B - kb*C  TRUE            A + B <=> C        ...  ...            ...             ..."},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"output","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content","what":"Output","title":"SBtab","text":"Outputs Observables. function can related measured data. unit 1 means 'dimensionless' SBML. function can inequality. experimental data allowed range (min max), rather standard error, Output useful: data table : Data can Boolean/logical (’s alsways treated 1 0). See also last Section page.","code":"!!SBtab TableName='Output' Document='myModel'       !ID  !Unit  !Formula  CaPerCaM  1      totalCa/totalCaM       ...  ...    ... !!SBtab TableName='Output' Document='myModel'   !ID  !Unit  !Formula     A  1      Ca/CaB Bound  1      (A<5000) && (A>1000) !!SBtab [...] !TimePoint !Time    >A  ~A  >Bound  ~Bound         T1     0  1500  150   TRUE  0.1"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"transformation","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content","what":"Transformation","title":"SBtab","text":"table possible transformations (maps) part experiment’s described procedure. event can trigger transformation specific event-times. see one transformation per line affects variables listed column names >Var, .e.: conceptually happen generated code (literally, actually happens C code).","code":"!!SBtab TableName='Transformation' Document='MyModel'  !ID  >A     >B     >C  TF1  A-B    B      C  TF2  A      B/2    C  TF3  A*0.1  B*0.1  C*0.1 A <- A-B  # TF1 ... B <- B/2  # TF2 ... A <- A*0.1 # TF3 B <- B*0.1 # TF3 C <- C*0.1 # TF3 ..."},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"event","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content","what":"Event","title":"SBtab","text":"Events interrupt ODE solver rgsl package (solvers), change values input parameters, state variables according available named tranformations (see ). transformation solver re-initialized continue .","code":"!!SBtab TableName='EventScheduleAlpha' Document='myModel'    !TimePoint  !Time  !Tranformation   Event0Time0  10.0   TF1  Event0Time0  11.0   TF2          ...  ...    ..."},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"experiments","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content","what":"Experiments","title":"SBtab","text":"AuthorYear citation keys make good ID values data sets. !Type one : Time Series, Dose Response purposes (possibly types future). types convenience features, Time Series basic type thta can anything. initial time ODE, \\(t_0\\), corresponds beginning experiment setup: !T0 (time value). value !Time default time measurements none given data table. dose response experiments, place specify measurement time. !Event names table contains event schedule (time sequence named transformations). !Citation column entirely optional.","code":"!!SBtab TableName='Experiments' Document='myModel'                !ID  !Type          !Time  !T0    !Event              !Citation     Smith2019Fig2E  Time Series    600.0  -100.0  EventScheduleAlpha  https//doi.org/10.[...]                 ...  ...            ...    ...     ...                ..."},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"data","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content","what":"Data","title":"SBtab","text":"Data stored TSV files well, isn’t used building ODE code. used parameter estimation.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"time-series","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content > Data","what":"Time Series","title":"SBtab","text":"!TimePoint kind !ID, scripts check first column called, contents always used rownames R data-frames. ID’s used anything, currently. particular Table, find missing value (measured).","code":"!!SBtab Document='myModel' Version='1.0' TableName='Smith2019Fig2E' TableType='QuantityMatrix'           !TimePoint  !Time  >AKAR4pOUT  ~AKAR4pOUT E0301T001   -15    99.4136     0.711886579917949 E0301T002   -10    100.617     0.401234567901235 E0301T003   -5     101.944     0.927467851933129 E0301T004   0      NA          NA E0301T005   5      101.204     0.28287504289851 E0301T006   10     102.037     0.565750085797018 E0301T007   15     102.346     0.432098765432101 E0301T008   20     103.765     0.40478015582111 E0301T009   25     105.463     1.14280917170207 E0301T010   30     106.204     1.07316905251319 E0301T011   35     110.648     0.509960235859822 E0301T012   40     110.988     1.31417708987925 E0301T013   45     112.438     1.60137305815714"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"dose-response","dir":"Articles","previous_headings":"SBtab File Structure > Tabular Content > Data","what":"Dose Response","title":"SBtab","text":"dose response experiments, system reacts input dose repeatedly. row simulated time series . table works way, rather Time input column: Ca_set input value, CaPerCam output value. Input Output determined Table , rest Document. row can considered mini time series, one measurement time . time measurement shall occur written table experiments, column !Time (default measurement time). different time row possible (currently).","code":"!!SBtab SBtabVersion='1.0' Document='CaMKIIs' TableName='Shifman2006Fig1Bsq' TableType='QuantityMatrix'  !ID    >Ca_set  >CaPerCaM  ~CaPerCaM E1D0   364      0.011      0.3985 E1D1   2305     1.196      0.3985 E1D2   2548     1.464      0.3985 E1D3   2912     1.743      0.3985 E1D4   3640     1.956      0.3985 E1D5   4126     2.09       0.3985 E1D6   3762     2.291      0.3985 E1D7   4611     2.38       0.3985 E1D8   4247     2.559      0.3985 E1D9   5461     2.604      0.3985 E1D10  4611     2.85       0.3985 E1D11  6067     2.917      0.3985 E1D12  5339     3.04       0.3985 E1D13  6796     3.163      0.3985 E1D14  6067     3.23       0.3985 E1D15  7281     3.465      0.3985 E1D16  8495     3.61       0.3985 E1D17  9344     3.856      0.3985 E1D18  24393    3.994      0.3985 E1D19  34101    3.996      0.3985"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"a-note-on-units","dir":"Articles","previous_headings":"","what":"A Note on Units","title":"SBtab","text":"Units defined every entity. unit can written human readable conventional form (don’t insist correct). mostly intended human readers, parse use information SBML export. can test unit parser like : Units optional Dimensionless quantities ok, e.g. Hill-exponents, unit just 1 cases. , even though parse , currently don’t auto-convert units: flux kf*- kb*b, units kf, , kb, b compatible, unit kf*kb*b. course legal (general) calculate 1 m + 1 cm, don’t unit-conversion automatically (maybe never ). Although SBML units well software support units SBML side also feature-complete cases. software may restrictions possible units (unit combinations). COPASI wants species unit measurement. don’t make restrictions.","code":"prettyPrint <- function(units){     L <- paste0(rep(\"-\",12),collapse=\"\")     for (u in units){         cat(sprintf(\"%s[%12s]%s\\n\",L,u,L))         print(SBtabVFGEN::unit.from.string(u))         cat(\"\\n\")     } } prettyPrint(c(\"cm\",\"uM\",\"MM\",\"1\",\"μM\",\"nanomolarity\",\"s^-1\")) #> ------------[          cm]------------ #>   scale multiplier exponent  kind #> 1    -2          1        1 metre #>  #> ------------[          uM]------------ #>   scale multiplier exponent  kind #> 1    -6          1        1  mole #> 2     0          1       -1 litre #>  #> ------------[          MM]------------ #>   scale multiplier exponent  kind #> 1     6          1        1  mole #> 2     0          1       -1 litre #>  #> ------------[           1]------------ #>   scale multiplier exponent          kind #> 1     0          1        1 dimensionless #>  #> ------------[         μM]------------ #>   scale multiplier exponent  kind #> 1    -6          1        1  mole #> 2     0          1       -1 litre #>  #> ------------[nanomolarity]------------ #>   scale multiplier exponent  kind #> 1    -9          1        1  mole #> 2     0          1       -1 litre #>  #> ------------[        s^-1]------------ #>   scale multiplier exponent   kind #> 1     0          1       -1 second"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"issues-to-be-aware-of-with-any-file-format","dir":"Articles","previous_headings":"","what":"Issues to be aware of with any File format","title":"SBtab","text":"According specifications SBtab authors, MS Excel spreadsheets acceptable storage format - don’t use original code therefore carry guarantees. SBtabVFGEN package uses either multiple TSV files one ODS file. TSV reading done using core R functions, ODS read readODS. formats can issues general specific package: line endings can \\n \\n\\r fields automatically unnecessarily quoted spreadsheet software encoding (UTF-8, something else) spreadsheets may want write unicode minus sign − rather - tsv file: U+2212 (vs ascii dash), careful lines can blank, quite, contain just tabs spaces comments inside fields imported field content confuse model parser issue unicode minus signs readODS theoretically discontinued (deprecated), despite format continuing exist spreadsheet software comes auto-correct correct SBtab Sbtab probably also unusual protein names (PKA Pka similar) Models can automatically converted SBtab format modelling formats (SBML). information SBtab please refer official git repository. aware conversion SBML SBtab done official SBtab tools, (SBML hard).","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"alternatives","dir":"Articles","previous_headings":"","what":"Alternatives","title":"SBtab","text":"user can circumvent entire format just writing C code R code model hand entirely different tool, VFGEN , SBML related project like SBFC generates code. , model small enough, can also write files using text editor without tool. data load SBtab files stored list R, item list data.frames vectors (’s black-box object). user can just create list (e.g. R script), want avoid SBtab entirely. data stored different format, hdf5 file, read using e.g. hdf5r re-roganized list like . Ultimately, code uqsa expects likelihood function objective-function assigns scalar value parameter vector, function calculate every user.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"note-on-boolean-values","dir":"Articles","previous_headings":"","what":"Note on Boolean Values","title":"SBtab","text":"Special care taken TSV files use TRUE FALSE values. useful, data tables can refer inequality constraints. Consider : Experiment checks condition: data table: perfectly fine. Tests R, verify: setup makes sense, work box R’s read.delim function infers type column. probably stop working values inconsistent (logical numeric). However, model’s ODE content includes TRUE FALSE values way, e.g. switches several distinct behaviours, Booleans written numerically 0 1. Consider : , since mixed types one column, didn’t work right. fix use integers 1 0 explicitly. However, even C code can made work, even explicit TRUE/FALSE values actual reactions: , unlikely useful. inequality statements allowed ODE (switches).","code":"!!SBtab TableName='Output' !ID      !Formula a_lt_b   a < b !!SBtab TableName='Experiments'               !ID  !T0  >A  >B  [...] % input settings, initial values CheckInequalities  -1.0  12  13 !!SBtab TableName='CheckInequalities', !TimePoint  !Time   >a_lt_b,         T1  0.00    TRUE         T2  0.01    TRUE         T3  0.03    FALSE # create a dummy file: cat(\"!!SBtab TableName='CheckInequalities'\", \"!TimePoint\\t!Time\\t>a_lt_b\", \"T1\\t0.00\\tTRUE\", \"T2\\t0.01\\tTRUE\", \"T3\\t0.03\\tFALSE\", file=\"test.tsv\",sep=\"\\n\")  # read this dummy file: test <- read.delim(\"test.tsv\",skip=1) file.remove(\"test.tsv\") #> [1] TRUE print(test) #>   X.TimePoint X.Time X.a_lt_b #> 1          T1   0.00     TRUE #> 2          T2   0.01     TRUE #> 3          T3   0.03    FALSE   # check the type of the Booleans: print(test[[3]]) #> [1]  TRUE  TRUE FALSE lapply(test,class) #> $X.TimePoint #> [1] \"character\" #>  #> $X.Time #> [1] \"numeric\" #>  #> $X.a_lt_b #> [1] \"logical\" # make a similar dummy file, but this time it's an input cat(\"!!SBtab TableName='Input'\", \"!ID\\t!Value\\t!Comment\", \"B\\tTRUE\\ta Boolean value\", \"M\\t65.3\\ta numeric value\", file=\"test.tsv\",sep=\"\\n\")  # read the file: test <- read.delim(\"test.tsv\",skip=1) file.remove(\"test.tsv\") #> [1] TRUE print(test) #>   X.ID X.Value       X.Comment #> 1    B    TRUE a Boolean value #> 2    M    65.3 a numeric value  # check the type of the Booleans: print(test[[2]]) #> [1] \"TRUE\" \"65.3\" lapply(test,class) #> $X.ID #> [1] \"character\" #>  #> $X.Value #> [1] \"character\" #>  #> $X.Comment #> [1] \"character\"  # similarly: as.numeric(c(\"TRUE\",\"1\",\"FALSE\",\"0\")) #> Warning: NAs introduced by coercion #> [1] NA  1 NA  0 as.logical(c(\"TRUE\",\"1\",\"FALSE\",\"0\")) #> [1]  TRUE    NA FALSE    NA ( cat<<EOF #!/usr/bin/tcc -run #include <stdlib.h> #include <stdio.h>  enum logical {FALSE, TRUE};  enum logical as_logical(int value){     return !!value; }  int main(int argc, char *argv[]){     printf(\"TRUE=%i , FALSE=%i (both as integer), as_logical(2)=%i\\n\",TRUE, FALSE, as_logical(2));     return EXIT_SUCCESS; } EOF ) > a.c chmod 744 a.c ./a.c rm a.c #> TRUE=1 , FALSE=0 (both as integer), as_logical(2)=1"},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"time-series","dir":"Articles","previous_headings":"","what":"Time Series","title":"Importing Data","text":"time series table, first column called !TimePoint, second typically !Time, followed measured quantities labelled >outputFunctionID (values) ~outputFunctionID (error estimates). time series typically requires one model simulation reproduce (unless scheduled events happening).","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"example-time-series","dir":"Articles","previous_headings":"Time Series","what":"Example Time Series","title":"Importing Data","text":"","code":"!!SBtab Document='myModel' TableName='DataSetBeta'  !TimePoint  !Time    >A_out  ~A_out      >totalB  ~totalB         E0T0   -1.0      1.20  0.012         201.1  12        E0T1   +0.0      11.8  0.12          203.2  11        E0T2   +1.0      31.7  0.19          198.7  13"},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"dose-response","dir":"Articles","previous_headings":"","what":"Dose Response","title":"Importing Data","text":"experiment maps increasing input output values. cases output happen one pre-defined time-point dose. dose-response curves transformed n time-series experiments parsing, n number content-rows (without headers). dose response curve requires n simulations model reproduce.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"example-dose-response-curve","dir":"Articles","previous_headings":"Dose Response","what":"Example Dose Response Curve","title":"Importing Data","text":"curve two inputs one output (A_final), line separate time series one (final) measurement time point. Anything complex expressed Time series event schedule. measurement time taken Experiments table (Experiments.tsv).","code":"!!SBtab Document='myModel' TableName='DataSetGamma'   !ID  >treatment_dose  >treatment_duration  >A_final  ~A_final   E0D0  200                50                     50.1  1.2  E0D1  1000               50                     83.2  0.9  E0D2  7000               25                     74.7  1.8"},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"scheduled-events","dir":"Articles","previous_headings":"","what":"Scheduled Events","title":"Importing Data","text":"experiment can contain sudden events, systems biology useful describe experiments include intervention specified time (activation, silencing, stimulus, action potential, etc.). events happen much faster system dynamics modelling exactly slow solver dramatically. case event time \\(t\\), solver stopped, transformation current state \\(x(t)\\) parameters \\(p\\) applied (C code, rgsl package, deSolve): SBtab table Transformation (Tranformation.tsv file) defines transformations system subject . event table defines experiment, transformations apply. transformation function (C code), auto-generated RPN-derivative/sh/ode.sh. example Transformation table Spike model: transformations apply times given event schedule (Dose used): schedule applied experiment listing Experiment table: !Event column specifies event schedule experiment (experiment one row). setup create C function: number transformations can added table. switch statement select correct one perform, based label (integer/enum). case, one transformation. See Transformation Events information.","code":"!!SBtab Document='Spike' TableName='Transformation'                  !ID   >Ca  >Buffer APCa  Ca   A*(k2-k1)*dose !!SBtab Document='Spike' TableName='AP20Hz'      !ID          !Time  !Transformation  !Dose Freq20HzAP0  0      APCa             1.0 Freq20HzAP1  50     APCa             1.0 Freq20HzAP2  100    APCa             1.0 Freq20HzAP3  150    APCa             1.0 Freq20HzAP4  200    APCa             1.0 Freq20HzAP5  250    APCa             1.0 Freq20HzAP6  300    APCa             1.0 Freq20HzAP7  350    APCa             1.0 Freq20HzAP8  400    APCa             1.0 !!SBtab Document='Spike' TableName='Experiment'              !ID    !Event  !T0 E20Hz  AP20Hz  -5 int Spike_event(double t, double y_[], void *par, int EventLabel, double dose) {     double *p_=par;     if (!y_ || !par || EventLabel<0) return 1;     enum eventLabel { APCa, numEvents }; /* event name indexes */     enum stateVariable { var_Ca,var_Buffer, numStateVar }; /* state variable indexes  */     enum param { par_k1,par_k2,par_A,par_CaBase, numParam }; /* parameter indexes  */     double k1=p_[0];     double k2=p_[1];     double A=p_[2];     double CaBase=p_[3];     double Ca=y_[0];     double Buffer=y_[1];     double rf1=Buffer;     double rf2=-k1*k2*Ca-(k1+k2)*Buffer;     switch(EventLabel){     case APCa:         y_[var_Buffer] = A*(k2-k1)*dose; /* state variable transformation */     break;     }     return GSL_SUCCESS; }"},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"gaussian-measurement-errors","dir":"Articles","previous_headings":"","what":"Gaussian Measurement errors","title":"Importing Data","text":"Gaussian noise, ~xyz values can standard deviation mean (standard error). data frame shape names output values. usual way write somewhere typically error models, noise distributions, user can decide kind values useful use custom scoring functions (untested us).","code":"outputValues ± errorValues"},{"path":"https://icpm-kth.github.io/uqsa/articles/events.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Transformation Events","text":"Maybe, also simulate one Ca spike look like, also try reducing dose bit:","code":"cfile <- uqsa_example(\"Spike\",pat='_gvf[.]c$') modelName <- checkModel(\"Spike\",cfile) #> building a shared library from c source, and using GSL odeiv2 as backend (pkg-config is used here). #> cc -shared -fPIC `pkg-config --cflags gsl` -o './Spike.so' '/tmp/Rtmp7hRdw6/temp_libpath634d15e1263f/uqsa/extdata/Spike/Spike_gvf.c' `pkg-config --libs gsl` t <- seq(-4,1000)  ex[[1]]$outputTimes <- t SIM <- simcf(ex,modelName) file.exists(comment(modelName)) #> [1] TRUE par <- sb$Parameter[[\"!DefaultValue\"]] print(par) #> [1] 9.78422e-03 3.44800e-02 2.29127e+02 res <- SIM(par) y <- as.numeric(res[[1]]$func)  plot(t,y,bty=\"n\",type='l',xlab=\"t\",ylab=\"Ca\") ex[[1]]$event$time <- 0.0 ex[[1]]$event$label <- 0 ex[[1]]$event$dose <- 1.0  ex[[2]] <- ex[[1]] ex[[2]]$event$dose <- 0.6   SIM <- simcf(ex,modelName) par <- sb$Parameter[[\"!DefaultValue\"]] print(par) #> [1] 9.78422e-03 3.44800e-02 2.29127e+02 res <- SIM(par) y1 <- as.numeric(res[[1]]$func) y2 <- as.numeric(res[[2]]$func)  plot(t,y1,bty=\"n\",type='l',xlab=\"t\",ylab=\"Ca\") lines(t,y2,lty=2)"},{"path":"https://icpm-kth.github.io/uqsa/articles/examples_overview.html","id":"example-models","dir":"Articles","previous_headings":"","what":"Example Models","title":"Examples overview","text":"simple example using AKAR4 model available article AKAR4. can run locally using larger (computationally expensive) examples: AKAP79, CaMKII, stochastic version AKAR4 available form R scripts can run locally (preferably) computer cluster. examples included package AKAR4 AKAP79 ODE model CaMKII ODE model AKAR4 stochastic model ODE models added measurement noise used acceptance probability order allow use ABC (Alahmadi et al 2020). demo R scrips can found folder inst/extdata. uqsa::uqsa_example function can locate example folders package installation.","code":"library(uqsa) source(uqsa_example(\"AKAR4\",pat=\"^runABCMCMC_AKAR4[.]R$\"))"},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Explanation for System Prerequisites ","text":"package, frequently solve ordinary differential equation model context biological experiments. can done using deSolve, prefer use solvers GNU Scientific Library, GSL, specifically gsl_odeiv2 library. written interface solvers (called rgsl). user facing interface designed around idea simulation experiments: list instructions result model simulation, possibly multiple calls ODE solver obtain final time-series. experiment oriented interface convenient context (usually much faster using deSolve). GSL system level dependency, R install , usually admin machine can (cluster). (e.g. laptop) don’t GSL yet, usually one two line command install .","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"system-prerequisites","dir":"Articles","previous_headings":"","what":"System Prerequisites","title":"Explanation for System Prerequisites ","text":"using apple device modelling work (may science-gods mercy), need package manager macbooks don’t come pre-configured . One package-manager homebrew (unofficial work funded donations) - install using command pasted homebrew homepage. WARNING: macOS definitely mention xcode point, apple really keen . absolutely nothing xcode, neither gcc, pkg-config. insistence macOS provide gcc xcode despicable.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"gnu-scientific-library-and-pkg-config","dir":"Articles","previous_headings":"System Prerequisites","what":"GNU Scientific Library and pkg-config","title":"Explanation for System Prerequisites ","text":"compile C sources (without gsl) requires c compiler. also need system specific compiler options related linking location gsl stored. compiler options can look like : -lgsl -lgslcblas -lm, also complex (depends system) – HPC environment almost certainly different. use pkg-config determine right compiler options (pkgconf, thing (faster)); pkg-config available macOS, GNU Linux, Unix, *BSD (even Windows, helps). gsl pkg-config available system, icpm-kth/rgsl package compile nicely. normal user shell (root shell, su -), using guix (NixOS), commands require sudo doas front required system administration rights. GNU Guix NIXOS package managers don’t require administration rights.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"macos-and-pkgconf","dir":"Articles","previous_headings":"System Prerequisites > GNU Scientific Library and pkg-config","what":"macOS and pkgconf","title":"Explanation for System Prerequisites ","text":"can use pkgconf instead pkg-config macOS. something anything us. Everyone wants use pkg-config via pkgconf macOS needs consider things. Please, make sure literal command pkg-config actually available installation. , can make symbolic link pkgconf make available: print path command available (nothing, isn’t). pkgconf prints valid path (), make symlink : Look directories listed PATH environment variable, find one can add files (~/.local/bin) make symbolic link using ln.","code":"which pkg-config      # e.g.: /usr/bin/pkg-config # see which PATHs you have defined, or set a new one in ~/.profile echo $PATH # pick a path, e.g. cd ~/.local/bin # make the link ln -s `which pkgconf` pkg-config"},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"r-itself","dir":"Articles","previous_headings":"System Prerequisites","what":"R itself","title":"Explanation for System Prerequisites ","text":"Availability specific versions R depend version OS, --date package database , etc.. quick list approximate command: MAC, please follow instructions R-studio web-site. install version homebrew.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"r-packages","dir":"Articles","previous_headings":"","what":"R packages","title":"Explanation for System Prerequisites ","text":"system’s package manager may system-wide R packages, e.g.: ubuntu r-cran-desolve, sudo apt install r-cran-desolve install deSolve package users machine. HPC environments preferable user accounts can harsh quotas file sizes file numbers. , R packages can also installed within R (individual users), location writable , typically $HOME diectory. Please ensure .libPaths() returns least one location write access (– – true everyone, nothing us). command doesn’t print path can write , can create new directory (home), make known R: Now, can install R packages Comprehensive R Archive Network cran github: packages CRAN, can installed like :","code":".libPaths() mkdir -p ~/R/library && echo \"R_LIBS=~/R/library\" >> ~/.Renviron install.packages(\"remotes\") remotes::install_github(\"icpm-kth/uqsa\")"},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"installation-of-companion-packages","dir":"Articles","previous_headings":"","what":"Installation of Companion packages","title":"Explanation for System Prerequisites ","text":"developed two companion packages: solves ODEs interface organised around simulation experiments uses solvers GNU Scientific Library used examples organises storage loading models loads SBtab content tsv, ods, excel files creates vfgen, MOD, sbml, format free ODE files also loads biological data contained SBtab files R variables (lists simulation experiment setups) optional, recommended (examples use ).","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"rgsl","dir":"Articles","previous_headings":"Installation of Companion packages","what":"RGSL","title":"Explanation for System Prerequisites ","text":"package solves ODE initial value problems, given lists simulation experiments, sudden interventions (like activation, sudden signal). can replaced standard solvers deSolve package. examples, solvers deSolve always slower.","code":"remotes::install_github(\"icpm-kth/rgsl\")       # requires gsl in your OS, see above"},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"sbtab-model-handling","dir":"Articles","previous_headings":"Installation of Companion packages","what":"SBtab Model Handling","title":"Explanation for System Prerequisites ","text":"package loads model written SBtab format, designed models systems biology, much easier read SBML: can replaced, different method model creation want write model source files hand (hard large models).","code":"remotes::install_github(\"icpm-kth/SBtabVFGEN\") # if you plan to use SBtab"},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"installation-of-uqsa","dir":"Articles","previous_headings":"","what":"Installation of UQSA","title":"Explanation for System Prerequisites ","text":"","code":"remotes::install_github(\"icpm-kth/uqsa\")       # this package library(uqsa)                                  # to load it"},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"examples-in-the-package","dir":"Articles","previous_headings":"Installation of UQSA","what":"Examples in the Package","title":"Explanation for System Prerequisites ","text":"package also includes example models, run script . advise users copy run scripts either repository installed package adapt . location run file can found like : browsing folders GitHub (inst/extdata/). Copy one adapt needs.","code":"uqsa::uqsa_example(\"AKAP79\",pat=\"^run.*R$\")"},{"path":"https://icpm-kth.github.io/uqsa/articles/installExplanations.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Explanation for System Prerequisites ","text":"package, frequently solve ordinary differential equation model context biological experiments. can done using deSolve, prefer use solvers GNU Scientific Library, GSL (gsl_odeiv2 library). written interface solvers (called rgsl). user facing interface designed around idea simulation experiments: list instructions result model simulation, possibly multiple calls ODE solver obtain final time-series. experiment oriented interface convenient context (usually much faster using deSolve). GSL system level dependency, R install , usually admin machine can (cluster). (e.g. laptop) don’t GSL yet, usually one two line command install .","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/installExplanations.html","id":"system-prerequisites","dir":"Articles","previous_headings":"","what":"System Prerequisites","title":"Explanation for System Prerequisites ","text":"using apple device modelling work (may science-gods mercy), need package manager macbooks don’t come pre-configured . One package-manager homebrew (unofficial work funded donations) - install using command pasted homebrew homepage. WARNING: macOS definitely mention xcode point, apple really keen . absolutely nothing xcode, neither gcc, pkg-config. insistence macOS provide gcc xcode despicable right gate-keep .","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/installExplanations.html","id":"gnu-scientific-library-and-pkg-config","dir":"Articles","previous_headings":"System Prerequisites","what":"GNU Scientific Library and pkg-config","title":"Explanation for System Prerequisites ","text":"compile C sources (without gsl) requires c compiler. also need system specific compiler options related linking location gsl stored. compiler options can look like : -lgsl -lgslcblas -lm, also complex (depends system) – HPC environment almost certainly different. use pkg-config determine right compiler options (pkgconf, thing (faster)); pkg-config available macOS, GNU Linux, Unix, *BSD (even Windows, helps). gsl pkg-config available system, icpm-kth/rgsl package compile nicely. normal user shell (root shell, su -), using guix (NixOS), commands require sudo doas front required system administration rights. GNU Guix NIXOS package managers don’t require administration rights.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/installExplanations.html","id":"macos-and-pkgconf","dir":"Articles","previous_headings":"System Prerequisites > GNU Scientific Library and pkg-config","what":"macOS and pkgconf","title":"Explanation for System Prerequisites ","text":"can use pkgconf instead pkg-config macOS. However, possible actually provide pkg-config command (may). something anything us. Everyone wants use pkg-config via pkgconf macOS needs consider things. Make sure literal command pkg-config actually available installation. , can make symbolic link pkgconf make available: print path command available (nothing, isn’t). pkgconf prints valid path (), make symlink : desired effect, ~/.local/bin needs PATH environment variable. , pkg-config becomes available directory, even non-interactive shells.","code":"brew install pkgconf which pkg-config      # e.g.: /usr/bin/pkg-config cd ~/.local/bin # make the link ln -s `which pkgconf` pkg-config"},{"path":"https://icpm-kth.github.io/uqsa/articles/installExplanations.html","id":"r-itself","dir":"Articles","previous_headings":"System Prerequisites","what":"R itself","title":"Explanation for System Prerequisites ","text":"Availability specific versions R depend version OS, --date package database , etc.. quick list approximate command: MAC, please follow instructions R-Studio web-site. install version homebrew. two almost certainly different versions, different locations packages. probably better use one (R-Studio brew R).","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/installExplanations.html","id":"r-packages","dir":"Articles","previous_headings":"","what":"R packages","title":"Explanation for System Prerequisites ","text":"system’s package manager may system-wide R packages, e.g.: ubuntu r-cran-desolve, sudo apt install r-cran-desolve install deSolve package users machine. HPC environments preferable user accounts can harsh quotas file sizes file numbers. , R packages can also installed within R (individual users), location writable , typically $HOME diectory. Please ensure .libPaths() returns least one location write access (– – true everyone, nothing us). command doesn’t print path can write , can create new directory (home), make known R: Now, can install R packages Comprehensive R Archive Network cran github: packages CRAN, can installed like :","code":".libPaths() mkdir -p ~/R/library && echo \"R_LIBS=~/R/library\" >> ~/.Renviron install.packages(\"remotes\") require(remotes) install_github(\"icpm-kth/uqsa\")"},{"path":"https://icpm-kth.github.io/uqsa/articles/installExplanations.html","id":"installation-of-companion-packages","dir":"Articles","previous_headings":"","what":"Installation of Companion packages","title":"Explanation for System Prerequisites ","text":"developed two companion packages: solves ODEs interface organised around simulation experiments uses solvers GNU Scientific Library used examples organises storage loading models loads SBtab content tsv, ods, excel files creates vfgen, MOD, sbml, format free ODE files also loads biological data contained SBtab files R variables (lists simulation experiment setups) optional, recommended (examples use ).","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/installExplanations.html","id":"rgsl","dir":"Articles","previous_headings":"Installation of Companion packages","what":"RGSL","title":"Explanation for System Prerequisites ","text":"package solves ODE initial value problems, given lists simulation experiments, sudden interventions (like activation, sudden signal). can replaced standard solvers deSolve package. examples, solvers deSolve always slower.","code":"remotes::install_github(\"icpm-kth/rgsl\")       # requires gsl in your OS, see above"},{"path":"https://icpm-kth.github.io/uqsa/articles/installExplanations.html","id":"sbtab-model-handling","dir":"Articles","previous_headings":"Installation of Companion packages","what":"SBtab Model Handling","title":"Explanation for System Prerequisites ","text":"package loads model written SBtab format, designed models systems biology, much easier read SBML: can replaced, different method model creation want write model source files hand (hard large models).","code":"remotes::install_github(\"icpm-kth/SBtabVFGEN\") # if you plan to use SBtab"},{"path":"https://icpm-kth.github.io/uqsa/articles/installExplanations.html","id":"installation-of-uqsa","dir":"Articles","previous_headings":"","what":"Installation of UQSA","title":"Explanation for System Prerequisites ","text":"","code":"remotes::install_github(\"icpm-kth/uqsa\")       # this package library(uqsa)                                  # to load it"},{"path":"https://icpm-kth.github.io/uqsa/articles/installExplanations.html","id":"examples-in-the-package","dir":"Articles","previous_headings":"Installation of UQSA","what":"Examples in the Package","title":"Explanation for System Prerequisites ","text":"package also includes example models, run script . advise users copy run scripts either repository installed package adapt . location run file can found like : browsing folders GitHub (inst/extdata/). Copy one adapt needs.","code":"uqsa::uqsa_example(\"AKAP79\",pat=\"^run.*R$\")"},{"path":"https://icpm-kth.github.io/uqsa/articles/installation.html","id":"prerequisites-for-model-building","dir":"Articles","previous_headings":"","what":"Prerequisites for Model Building","title":"Short Installation Instructions","text":"See Sections instructions. Short summary : Install GNU Scientific Library maxima yacas RPN-derivative package code perform derivatives (needs make && sudo make install)","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/installation.html","id":"pick-one","dir":"Articles","previous_headings":"Prerequisites for Model Building","what":"Pick One","title":"Short Installation Instructions","text":"maxima optional","code":"# macOS has a lot of issues with xcode, it loves it for some reason; maybe agree to xcode license brew install pkg-config gcc gsl maxima # other linux distributions have some version of this: # zypper install, apk add, guix install sudo apt install pkg-config gcc libgsl-dev maxima"},{"path":"https://icpm-kth.github.io/uqsa/articles/installation.html","id":"analytical-derivatives-and-model-code-generation","dir":"Articles","previous_headings":"Prerequisites for Model Building","what":"Analytical derivatives and Model Code Generation","title":"Short Installation Instructions","text":"may adjust fit specific circumstances (use zsh? parse .profile?) RPN-derivative contains c program can calculate simple derivatives, can installed like : ode.sh script work regardless whether run make, without block --maxima --yacas backend options mandatory.","code":"git clone https://github.com/icpm-kth/RPN-derivative.git cd RPN-derivative make dir=`pwd` mkdir -p ~/.local/bin && ln -s \"$dir/sh/ode.sh\" \"$HOME/.local/bin/ode\" # this installs the derivative program in RPN-derivative make && make test sudo make install"},{"path":"https://icpm-kth.github.io/uqsa/articles/installation.html","id":"installation-of-the-r-packages","dir":"Articles","previous_headings":"","what":"Installation of the R packages","title":"Short Installation Instructions","text":"","code":"# requires the 'remotes' package if (!require(remotes)) install.packages(remotes) remotes::install_github(\"icpm-kth/SBtabVFGEN\",dependencies=TRUE) remotes::install_github(\"icpm-kth/rgsl\",dependencies=TRUE) remotes::install_github(\"icpm-kth/uqsa\",dependencies=TRUE)"},{"path":"https://icpm-kth.github.io/uqsa/articles/installation.html","id":"mpi","dir":"Articles","previous_headings":"","what":"MPI","title":"Short Installation Instructions","text":"want run several nodes cluster via MPI (debian/ubuntu): R:","code":"sudo apt install libopenmpi-dev install.packages(\"pbdMPI\")"},{"path":"https://icpm-kth.github.io/uqsa/articles/intermediateFiles.html","id":"note-on-vfgen","dir":"Articles","previous_headings":"","what":"Note on VFGEN","title":"Benefits of Intermediates","text":"vfgen software can also create model files R C even two different solver libraries C: cvode GSL; , vfgen can create models many langueges. really good! functions creates slightly different . decided write converter better suit needs, several reasons: double  myModel_ABCoverSUM(double t, double y_[], void *par) { int myModel_func(double t, doubel y_[], double *func_, void *par){ .e. vector valued output, like functions constants model, previous parameters, even initial time \\(t_0\\), e.g.: double par12 = t>0 ? par3*par5 : par5; use error codes probe dimensionality model, without writing extra data structures AKAR4cl_vf(0,NULL,NULL,NULL) returns 2, AKAR4cl two state variables; 0 success. can easily add functionality ode.sh stupid shell script, vfgen (c++ hard).","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/literature_references.html","id":"data-references","dir":"Articles","previous_headings":"","what":"Data references","title":"Model and Data references","text":"experimental data AKAP79 AKAR4 models publication: described detail SBtab files AKAP79 AKAR4 model folders. experimental data CaMKII model extracted following references: described detail SBtab files CaMKII model folder.","code":"Church, Timothy W., et al. \"AKAP79 enables calcineurin to directly suppress protein kinase A activity.\"  Elife 10 (2021): e68164. Stemmer PM, Klee CB. Biochemistry. 1994;33(22):6859-6866 (phenotype 1, 3 and 4) O'Donnell SE et al. Proteins. 2011;79(3):765-786 (phenotype 2)"},{"path":"https://icpm-kth.github.io/uqsa/articles/literature_references.html","id":"model-references","dir":"Articles","previous_headings":"","what":"Model references","title":"Model and Data references","text":"AKAP79 model modified : CaMKII model ","code":"Church, Timothy W., et al. \"AKAP79 enables calcineurin to directly suppress protein kinase A activity.\"  Elife 10 (2021): e68164.` Buxbaum JD, Dudai Y. 1989. \"A quantitative model for the kinetics of cAMP-dependent protein kinase (type II)  activity. Long-term activation of the kinase and its possible relevance to learning and memory.\"  The Journal of Biological Chemistry 264:9344–9351. Nair, A. G., Gutierrez-Arenas, O., Eriksson, O., Jauhiainen, A., Blackwell, K. T., & Kotaleski, J. H. (2014). \"Modeling intracellular signaling underlying striatal function in health and disease.\" Progress in molecular biology and translational science, 123, 277-304."},{"path":"https://icpm-kth.github.io/uqsa/articles/models.html","id":"real-example","dir":"Articles","previous_headings":"","what":"Real Example","title":"Importing Models into R","text":"ex variable holds simulation instructions plain R list: inputs, initial values, measurement times, etc. – also actual data. SBtab content: Data plot:","code":"library(uqsa) library(SBtabVFGEN)  f <- uqsa_example('AKAR4')                           # file names print(f[1]) #> [1] \"/home/andreikr/.local/R/library/uqsa/extdata/AKAR4/AKAR4_100nM.tsv\" sb <- SBtabVFGEN::sbtab_from_tsv(f)                  # a list of data.frames #> [tsv] file[1] «AKAR4_100nM.tsv» belongs to Document «AKAR4» #>  I'll take this as the Model Name. #> AKAR4_100nM.tsv  AKAR4_25nM.tsv  AKAR4_400nM.tsv  AKAR4_Compound.tsv  AKAR4_Experiments.tsv  AKAR4_Output.tsv  AKAR4_Parameter.tsv  AKAR4_Reaction.tsv cl <- SBtabVFGEN::sbtab_to_vfgen(sb)                 # conservation laws, if any #> Document Name: AKAR4. #> SBtab has 8 tables. #> The names of SBtab[[1]]: #> !Time, >AKAR4pOUT, ~AKAR4pOUT #>                 !Name                             !KineticLaw #> reaction_1 reaction_1 kf_C_AKAR4*C*AKAR4 - kb_C_AKAR4*AKAR4_C #> reaction_2 reaction_2                      kcat_AKARp*AKAR4_C #>                  !ReactionFormula !IsReversible #> reaction_1  C + AKAR4 <=> AKAR4_C             1 #> reaction_2 AKAR4_C <=> AKAR4p + C             0 #> There is no «Constant» Table in this model. This is OK. #> There is no «Expression» Table in this model. This is OK. #> compound names: #> [1] \"AKAR4\"   \"AKAR4_C\" \"AKAR4p\"  \"C\" #> Units: #> [1] \"micromole/liter\" \"micromole/liter\" \"micromole/liter\" \"micromole/liter\" #> --- #> There is no «Input» Table in this model. #> class(IsConstant): logical. #> [1] Formula Unit    #> <0 rows> (or 0-length row.names) #> [1] Formula Unit    #> <0 rows> (or 0-length row.names) #> character(0) #> --- #> character #> Reaction 1:line (a->b): «C + AKAR4 » ←→ « AKAR4_C» #>  where a: [1] \"C \"      \" AKAR4 \" #>    and b: [1] \" AKAR4_C\" #> Products: #> 1 × AKAR4_C          (AKAR4_C is compound 2) #> Reactants: #> 1 × C            (C is compound 4) #> 1 × AKAR4            (AKAR4 is compound 1) #> Reaction 2:line (a->b): «AKAR4_C » ←→ « AKAR4p + C» #>  where a: [1] \"AKAR4_C \" #>    and b: [1] \" AKAR4p \" \" C\"       #> Products: #> 1 × AKAR4p           (AKAR4p is compound 3) #> 1 × C            (C is compound 4) #> Reactants: #> 1 × AKAR4_C          (AKAR4_C is compound 2) #> Number of compounds: 4 #> Number of Reactions: 2 #>      [,1] [,2] #> [1,]    0    1 #> [2,]    1    0 #> [3,]    0    1 #> [4,]    1   -1 #> Stoichiometric Matrix: #>      [,1] [,2] #> [1,]   -1    0 #> [2,]    1   -1 #> [3,]    0    1 #> [4,]   -1    1 #> --- #> Conservation Law dimensions: 4 × 2 #> To check that the conservation laws apply: norm(t(StoichiometryMatrix) * ConservationLaw == 0.00000) #>      [,1] [,2] #> [1,]    0    1 #> [2,]    1    0 #> [3,]    0    1 #> [4,]    1   -1 #> [1] 2 #> [1] 0 1 0 1 #> [1] 0.2 0.0 0.0 0.0 #> 1*AKAR4_C+1*C #> This will comment out compound 2 («AKAR4_C», initial value: 0), Conserved Constant = 0.000000 #> [1]  1  0  1 -1 #> [1] 0.2 0.0 0.0 0.0 #> 1*AKAR4+1*AKAR4p-1*C #> This will comment out compound 1 («AKAR4», initial value: 0.2), Conserved Constant = 0.200000 #> StateVariable AKAR4 will be commented out as it was already defined as a Mass Conservation Law Expression.StateVariable AKAR4_C will be commented out as it was already defined as a Mass Conservation Law Expression. #> The vf content was written to: AKAR4.vf #> MOD: StateVariable AKAR4 will be commented out as it was already defined as a Mass Conservation Law Expression. #> MOD: StateVariable AKAR4_C will be commented out as it was already defined as a Mass Conservation Law Expression. #> The mod content was written to: AKAR4.mod ex <- SBtabVFGEN::sbtab.data(sb,cl)                  # includes the data ## Reactions, as an example of SBtab in R: print(sb$Reaction) #>                 !Name                             !KineticLaw #> reaction_1 reaction_1 kf_C_AKAR4*C*AKAR4 - kb_C_AKAR4*AKAR4_C #> reaction_2 reaction_2                      kcat_AKARp*AKAR4_C #>                  !ReactionFormula !IsReversible #> reaction_1  C + AKAR4 <=> AKAR4_C             1 #> reaction_2 AKAR4_C <=> AKAR4p + C             0 ## Conservation Laws, as text, and its attributes: cl$Text #> [1] \"AKAR4_C_ConservedConst = AKAR4_C+1*C\"      #> [2] \"AKAR4_ConservedConst = AKAR4+1*AKAR4p-1*C\" ## data: head(ex[[1]]$outputValues) #>          AKAR4pOUT #> E400T001    108.60 #> E400T002    111.35 #> E400T003    108.75 #> E400T004    111.40 #> E400T005    111.70 #> E400T006    113.25 head(ex[[1]]$errorValues) #>          AKAR4pOUT #> E400T001   14.7950 #> E400T002   14.9325 #> E400T003   14.8025 #> E400T004   14.9350 #> E400T005   14.9500 #> E400T006   15.0275 i <- seq(70) t <- ex[[1]]$outputTimes[i] y <- ex[[1]]$outputValues[[1]][i] dy <- ex[[1]]$errorValues[[1]][i] plot(t,y,bty='n',ylim=c(100,200)) arrows(t,y,t,y+dy,angle=90, length=0.01) arrows(t,y,t,y-dy,angle=90, length=0.01)"},{"path":"https://icpm-kth.github.io/uqsa/articles/models.html","id":"files","dir":"Articles","previous_headings":"","what":"Files","title":"Importing Models into R","text":"function sbtab_to_vfgen produce several files, using model’s name (Document='model_name' attribute SBtab): model_name.vf, vfgen compatible file model_name.mod, NEURON mod file (optional) model_name.xml, SBML file, R bindings libsbml installed R libsbml system model_name.tar.gz, compressed archive text representation ODE elements, specific format model_name.zip, tar.gz, zip archive Let’s look state variables ode: Two State variables commented . two replaced vfgen expressions: Finally, clean generated files:","code":"grep '<StateVariable' AKAR4.vf #> <!-- <StateVariable Name=\"AKAR4\" Description=\"removed compound\" DefaultInitialCondition=\"0.2\" Formula=\"-reaction_1\"/> --> #> <!-- <StateVariable Name=\"AKAR4_C\" Description=\"removed compound\" DefaultInitialCondition=\"0\" Formula=\"+reaction_1-reaction_2\"/> --> #>  <StateVariable Name=\"AKAR4p\" Description=\"compound\" DefaultInitialCondition=\"0\" Formula=\"+reaction_2\"/> #>  <StateVariable Name=\"C\" Description=\"compound\" DefaultInitialCondition=\"0\" Formula=\"-reaction_1+reaction_2\"/> grep '<Expression' AKAR4.vf #>  <Expression Name=\"AKAR4_C\" Description=\"derived from conservation law 1\" Formula=\"AKAR4_C_ConservedConst - (C)\"/> #>  <Expression Name=\"AKAR4\" Description=\"derived from conservation law 2\" Formula=\"AKAR4_ConservedConst - (AKAR4p-C)\"/> #>  <Expression Name=\"reaction_1\" Description=\"flux\" Formula=\"kf_C_AKAR4*C*AKAR4 - kb_C_AKAR4*AKAR4_C\"/> #>  <Expression Name=\"reaction_2\" Description=\"flux\" Formula=\"kcat_AKARp*AKAR4_C\"/> for t in vf tar.gz zip ; do rm ./AKAR4.$t ; done [ -f AKAR4.xml ] && rm AKAR4.xml # since that one is optional echo $? #> 1"},{"path":"https://icpm-kth.github.io/uqsa/articles/models.html","id":"the-vector-field-file","dir":"Articles","previous_headings":"Files","what":"The Vector Field file","title":"Importing Models into R","text":"vf file compatible vfgen tool, creates code many languages vf file (matlab, cvode, octave, python, xppaut). Use tool want use created source code programming languages. SBtab content missing (e.g. scheduled events). vfgen tool uses ginac library calculate Jacobians. Ginac parse vf files inequality expressions (e.g. < b).","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/models.html","id":"converting-the-ode-to-code","dir":"Articles","previous_headings":"Files > The Vector Field file","what":"Converting the ODE to code","title":"Importing Models into R","text":"use tool, RPN-derivative, reads file (one archive files: zip/tar.gz) create slightly different C code. main advantages : vector valued output function predictable name: int MODEL_func() error code function length output buffers need allocated initial conditions: int MODEL_init() default parameter values: int MODEL_default() repository tool, icpm-kth/RPN-derivative, contains shell script ode.sh; script uses one three methods calculate analytical derivatives Jacobians: 1. maxima, 2. yacas, 3. bin/derivative binary RPN-derivative contains (make && make install) Assuming followed installation instructions: Note: ode.sh compatible vf files SBtabVFGEN, doesn’t support output formats VFGEN can , nothing related delays.","code":"ode -R --maxima ./myModel.vf > ./myModel.R  ##     both     ./myModel.{zip,tar.gz}     also work here ode -C --maxima ./myModel.tar.gz > ./myModel_gvf.c"},{"path":"https://icpm-kth.github.io/uqsa/articles/models.html","id":"background-on-parameters-vs-inputs","dir":"Articles","previous_headings":"","what":"Background on Parameters vs Inputs","title":"Importing Models into R","text":"goal perform parameter estimation. systems biology model typically parameters either reaction rate coefficients \\(k_f\\), equilibrium constants \\(K_d\\), Hill coefficients, many quantities related kinetc laws; often unknown uniquely determined yet. , parameters model unknown, model parameters intrinsic system study. model interventions model performing experiment. frequency driving force mechanical model, amount treatment dose (added system) affects time course reactions: substrate, buffer enzyme, silencing agent, inhibitor parameters known us, written protocol. input time dependent, dynamics (explicit algebraic functions) become part model. input parameters can different experiments, intrinsic parameters always . ordinary differential equation hand need know distinction known unknown parameters. reasons: k intrinsic, unknown parameters (subject sampling), u known input parameters encoded input field experiment. input parameters u exist, always concatenated (p <-c(k,u)) order passed model, model’s C code sees p. wrapper functions rgsl package concatenation solver called. sample logarithmic space, solver gets k appends right u experiment, linear space. , parMCMC log10-space, parMap transformation linear-space solver work :","code":"parMCMC <- [...]             # some sampling variable k <- parMap(parMCMC)         # a model compatible parameter vector u <- experiments[[i]]$input  # a valid model input vector p <- c(k,u) # solve ODE using p parMap <- function(par) {     return(10^(par)) }"},{"path":"https://icpm-kth.github.io/uqsa/articles/mpi.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Parallel chains with MPI","text":"Markov chain Monte Carlo scales exponentially problem size. models ~50 parameters already becomes hard intialize Markov chain good values: - starting parameters - step size effect slow moving chain, sample high auto-correlation. reduce auto-correlation, suggest parallel tempering technique, several Markov chains run parallel experiences different likelihood: \\(p(D|\\theta)^\\beta\\) \\(\\theta\\) Markov chain variable (maps model’s kinetic parameters) \\(D\\) available data. context \\(0 \\le \\beta \\le 1\\) plays role inverse temperature. value \\(\\beta = 1.0\\) equivalent original problem; lower \\(\\beta\\) gets, target distribution resemble prior distribution. different chains allowed exchange positions benefitial (according specific rules parallel tempering). exchange information makes chain \\(\\beta = 1\\) explore sampling space much faster Markov chain algorithm allow. Even though implementation Parallel Tempering possible without MPI, now several experiments simulate many parallel chains, AKAP79 20 experiments e.g. 32 chains. point, becomes benefitial simulations one machine (mine 16 cores). high performance computing cluster KTH (Parallel Dator Center, Dardel cluster) 128 cores per node. means can simulate 6 chains per node still process experiments time (using parLapply mclapply), also start 24 chains distributed accross 3 nodes. distribution requires message passing nodes, prupose use pbdMPI MPI code difficult understand, write, test, debug. , instructions may work everyone.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/mpi.html","id":"akap79","dir":"Articles","previous_headings":"","what":"AKAP79","title":"Parallel chains with MPI","text":"MPI several mechanisms launch worker processes, one ow spawn method (MPI_Comm_spawn). don’t use . Instead launch Rscript via mpirun (send recv functions MPI_COMM_WORLD, corresponds comm=0 pbdMPI). difference workers rank possibly random number seed. rank determine value \\(\\beta\\) thus kind sample worker obtains. Locally (machine) can test MPI script using mpirun command, mpi library installed: work, AKAP79.R starts line: , Rscript found used process rest. want call Rscript explicitly, : cluster -H option necessary, queue system like slurm determine machines use. argument 5000 (sample size) passed R program AKAP79.R, ’s mpirun option. -N ... means launch many MPI workers per node (node means machine host). one node (localhost), -H localhost:$SLOTS option determines maximum number jobs per node. 16 cores: example, use MPI chains parallel chains different temperatures. , mandatory. possible run $N chains temperature, split work way.","code":"# find number of cores on GNU/linux N = $(( `grep -c processor /proc/cpuinfo` )) # or just type the right number mpirun -H localhost:$N -N $N ./AKAP79.R 5000 #!/usr/bin/env Rscript ## ^^^^^^^^^^^^^^^^^^^  ## The above has to be the first line. ## Nothing may be written before that. [...]  R code follows below mpirun -H localhost:$N -N $N Rscript ./AKAP79.R 5000 mpirun -H localhost:$16 -N 16 Rscript ./AKAP79.R 5000"},{"path":"https://icpm-kth.github.io/uqsa/articles/mpi.html","id":"mpi-script-template","dir":"Articles","previous_headings":"","what":"MPI Script Template","title":"Parallel chains with MPI","text":"example sample model using Metropolis algorithm, using pbdMPI parallel tempering technique.","code":"#!/usr/bin/env Rscript  library(rgsl) library(SBtabVFGEN) library(uqsa) library(parallel) library(pbdMPI)  start_time <- Sys.time() comm  <- 0 pbdMPI::init() r <- pbdMPI::comm.rank(comm=comm) cs <- pbdMPI::comm.size(comm=comm)  attr(comm,\"rank\") <- r attr(comm,\"size\") <- cs N <- 10000                 # default sample size h <- 1e-2                  # step size  beta <- (1.0 - (r/cs))^2   # PT: inverse temperature  ## ----label=\"SBtab content\"----------------------------------------------------  modelFiles <- dir(\"..\",pattern=\"[.]tsv$\",full.names=TRUE) sb <- SBtabVFGEN::sbtab_from_tsv(modelFiles)  modelName <- checkModel(comment(sb),sprintf(\"./%s_gvc.c\",comment(sb)))  ## ----ConservationLaws---------------------------------------------------------- if (file.exists(\"../ConservationLaws.RDS\")){     ConLaw <- readRDS(\"../ConservationLaws.RData\") } else {     ConLaw <- NULL } experiments <- sbtab.data(sb,ConLaw)  ## ----default------------------------------------------------------------------ n <- length(experiments[[1]]$input) if (n>0){     parMCMC <- log10(head(model$par(),-n)) } else {     parMCMC <- log10(model$par()) }  ## ----range-------------------------------------------------------------------- stdv <- head(sb$Parameter[[\"!Std\"]],length(parMCMC)) if (is.null(stdv) || any(is.na(stdv))){ # some alternative default value     stdv <- parMCMC*0.05 + max(parMCMC)*0.05 + 1e-2  } dprior <- dNormalPrior(mean=parMCMC,sd=stdv) rprior <- rNormalPrior(mean=parMCMC,sd=stdv)  ## ----simulate----------------------------------------------------------------- sim <- simulator.c(experiments,modelName,log10ParMap)  y <- sim(parMCMC) ## little test stopifnot(is.list(y) && length(y)==length(experiments)) stopifnot(all(c(\"state\",\"func\") %in% names(y[[1]])))  ## ----likelihood--------------------------------------------------------------- logLH <- function(y,h,stdv,name){     n <- sum(!is.na(stdv))     llf_const <- sum(log(stdv),na.rm=TRUE) + 0.5*log(2*pi)*n     llf_sq <- 0.5*sum(((y - h)/stdv)^2,na.rm=TRUE)     return(-llf_const-llf_sq) }  llf <- logLikelihoodFunc(experiments,simpleUserLLF=logLH)  ## ----update------------------------------------------------------------------- metropolis <- mcmcUpdate(simulate=sim,     experiments=experiments,     model=model,     logLikelihood=llf,     dprior=dprior)  ## ----init--------------------------------------------------------------------- ptMetropolis <- mcmc_mpi(metropolis,comm=comm,swapDelay=0,swapFunc=pbdMPI_bcast_reduce_temperatures) ## ----sample------------------------------------------------------------------- x <- mcmcInit(     beta,     parMCMC,     simulate=sim,     logLikelihood=llf,     dprior) s <- ptMetropolis(x,N,h) # the main amount of work is done here saveRDS(s,file=sprintf(\"sample-rank-%i.RDS\",r))  # ---- when all are done, we load the sampled points from the files but only for the right temperature: pbdMPI::barrier() f <- dir(pattern=sprintf('sample-rank-.*RDS$')) stopifnot(length(f) == cs)                                          # MPI comm size X <- uqsa::gatherSample(f,beta,size=N/2)  Copula <- fitCopula(X) dprior <- dCopulaPrior(Copula) rprior <- rCopulaPrior(Copula) parMCMC <- as.numeric(tail(X,1)) attr(Copula,\"beta\") <- beta attr(X,\"beta\") <- beta  saveRDS(Copula,file=sprintf(\"Copula-for-beta-%i-l10b-%i.RDS\",r,round(100*log10(beta)))) saveRDS(X,file=\"parameter-sample-for-beta-%i-l10b-%i.RDS\",r,round(100*log10(beta)))  time_ <- difftime(Sys.time(),start_time,units=\"min\") print(time_) finalize()"},{"path":"https://icpm-kth.github.io/uqsa/articles/path.html","id":"locations-of-applications","dir":"Articles","previous_headings":"","what":"Locations of Applications","title":"The PATH variable","text":"unix like systems (*BSD, GNU/Linux, macOS) way find programs: environment variable called PATH; colon (:) separated string. possible value: need actually read : package manager unix-like systems installs applications places listed PATH variable. way can found name, rather typing entire path. code-block creates file (test.sh), makes executable, tries execute . doesn’t work, even though directory file. , typing relative path ./test.sh, using ., found.","code":"echo \"$PATH\" #> /home/andreikr/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin echo \"$PATH\" | tr ':' '\\n' #> /home/andreikr/.local/bin #> /usr/local/sbin #> /usr/local/bin #> /usr/sbin #> /usr/bin #> /sbin #> /bin #> /usr/games #> /usr/local/games #> /snap/bin #> /snap/bin ( cat<<EOF #!/bin/sh echo \"Hello World\" EOF ) > test.sh chmod 744 test.sh [ -f test.sh ] && test.sh ./test.sh && rm test.sh #> sh: 8: test.sh: not found #> Hello World"},{"path":"https://icpm-kth.github.io/uqsa/articles/path.html","id":"built-in-commands","dir":"Articles","previous_headings":"Locations of Applications","what":"Built-in commands","title":"The PATH variable","text":"commands shell built-ins (e.g.: echo, printf, pwd), don’t need PATH variable integral part shell (different shells can slightly different built-ins). commands distinct, executable files need found (e.g.: env, awk, perl). can symbolic links files well. example awk: , awk built-, file. command can find , PATH. also symbolic link, can follow link using readlink -f find particular system using GNU awk (gawk). program one directories PATH variable, can called typing entire path , using relative path.","code":"type awk which awk | xargs ls -gG readlink -f `which awk` #> awk is /usr/bin/awk #> lrwxrwxrwx 1 21 Apr  8  2024 /usr/bin/awk -> /etc/alternatives/awk #> /usr/bin/gawk"},{"path":"https://icpm-kth.github.io/uqsa/articles/path.html","id":"add-locations-to-path","dir":"Articles","previous_headings":"","what":"Add locations to PATH","title":"The PATH variable","text":"interactive shell startup file: ~/.bashrc bash ~/.zshrc zsh (among others) also read ~/.profile, often something like (doesn’t, can add ): , ~/.local/bin exists, appended PATH, can definitely use location store shell scripts (just create ). lot fine detail related concepts login shell (non-) interactive shell shell reads files either cases (bit complicated).","code":"# set PATH so it includes user's private bin if it exists if [ -d \"$HOME/.local/bin\" ] ; then     PATH=\"$HOME/.local/bin:$PATH\" fi mkdir -p ~/.local/bin"},{"path":"https://icpm-kth.github.io/uqsa/articles/path.html","id":"iff-still-not-in-path","dir":"Articles","previous_headings":"Add locations to PATH","what":"IFF still not in PATH","title":"The PATH variable","text":"new entry can added within ~/*rc files, e.g.:","code":"## for bash [ \"$SHELL\" == \"/bin/bash\" ] && echo 'export PATH=\"$HOME/.local/bin:$PATH\"' >> ~/.bashrc ## for zsh [ \"$SHELL\" == \"/bin/zsh\" ] && echo 'export PATH=\"$HOME/.local/bin:$PATH\"' >> ~/.zshrc"},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"create-a-vector-field-for-ode-solvers","dir":"Articles","previous_headings":"","what":"Create a Vector Field for ODE solvers","title":"Build a Shared Library","text":"assume wrote model SBtab (use TSV files). testing can also download one example models. SBtabVFGEN package contains file called sbtab_to_vfgen (runs via Rscript, R needed). made convenience: script loads SBtabVFGEN package executes commands needed process SBtab model ODE. Afterwards, directory also contain .vf file well sbml .xml file zip file (essentially content vf file).","code":"./sbtab_to_vfgen *.tsv"},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"the-same-thing-in-r","dir":"Articles","previous_headings":"Create a Vector Field for ODE solvers","what":"The same thing in R","title":"Build a Shared Library","text":"code create vf file well tar.gz file zip file. Dependeing wrote SBtab file, three may contain mathematically valid content can processed . vf file can read used vfgen tool (don’t use ).","code":"# be in the right folder, where your tsv files are stopifnot(require(SBtabVFGEN)) f <- dir(pattern='[.]tsv$') # everything that ends in .tsv sb <- sbtab_from_tsv(f)     # a list of data.frames if (sbtab.valid(sb)){     cl <- sbtab_to_vfgen(sb)     print(cl) # these are conservation laws found by sbtab_to_vfgen }"},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"make-source-code-for-your-model","dir":"Articles","previous_headings":"Create a Vector Field for ODE solvers","what":"Make Source Code for your Model","title":"Build a Shared Library","text":"convert ordinary differential equations code solvers, need calculate appropriate expressions jacobian. calculations either download contents sh directory icpm-kth/RPN-derivative, clone entire repository (optionally make install) covered installation instructions. short version: Assuming .local/bin PATH, make symbolic link ode.sh script. want try script, temporary measure, make alias instead: one things maxima installed: Now _gvf.c source file shared library .(unless error occurred). shared library ODE solver actually loads simulate model. can read C source, check looks correct even change model SBtab expressive enough.","code":"git clone https://github.com/icpm-kth/RPN-derivative && cd RPN-derivative/sh pushd -n `pwd` mkdir -p \"$HOME/.local/bin\" && cd \"$HOME/.local/bin\" ln -s \"`dirs -0`/ode.sh\" ode popd  [ `echo \"$PATH\" | grep \"$HOME/[.]local/bin\"` ] && echo \"OK\" || echo \"put ~/.local/bin in your PATH\" git clone https://github.com/icpm-kth/RPN-derivative && cd RPN-derivative/sh alias ode=\"`pwd`/sh/ode.sh\" MODEL=\"`ls -1 *.vf | head -n 1`\" MODELC=\"`basename $MODEL .vf`_gvf.c\" MODELSO=\"`basename $MODEL .vf`.so\" echo \"we are trying to turn '$MODEL' into '$MODELSO'\" [ -f \"$MODEL\" ] && ode -C --maxima \"$MODEL\" > \"$MODELC\" [ -f \"$MODELC\" ] && gcc -shared -fPIC -O2 -o \"$MODELSO\" \"$MODELC\""},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"note-on-sh-code","dir":"Articles","previous_headings":"Create a Vector Field for ODE solvers > Make Source Code for your Model","what":"Note on sh code","title":"Build a Shared Library","text":"code section meant run terminal (emulator) POSIX compliant shell (bash, zsh, dash, ash) work. Please aware scripts use awk, sed perl -p (.e. perl sed mode), may differ different platforms (one true awk, GNU gawk, mawk, etc. – consensus behave exactly). differ options accept regular expressions understand. One example BSD sed uses [:<:] mean left word boundary gawk uses \\< thing. cases use perl -p.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Build a Shared Library","text":"can find code blocks storage format. simplified assumptions downloaded git repositories.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"sbtab-as-tsv","dir":"Articles","previous_headings":"Summary","what":"SBtab as TSV","title":"Build a Shared Library","text":"summary code previous section:","code":"alias sbtab_to_vfgen='~/SBtabVFGEN/sbtab_to_vfgen' alias ode='~/RPN-derivative/sh/ode.sh' sbtab_to_vfgen *.tsv ode -C myModel.vf > myModel_gvf.c ode -R myModel.vf > myModel.R [ -f myModel_gvf.c ] && gcc -shared -fPIC -O2 -o myModel.so myModel_gvf.c"},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"sbtab-as-xlsx","dir":"Articles","previous_headings":"Summary","what":"SBtab as XLSX","title":"Build a Shared Library","text":"procedure applies, alias sbtab_to_vfgen rather copying time. Also, time use yacas calculate derivatives, rather maxima. create C code R code time.","code":"alias sbtab_to_vfgen='~/SBtabVFGEN/sbtab_to_vfgen' alias ode='~/RPN-derivative/sh/ode.sh' sbtab_to_vfgen myModel.xlsx ode -C --yacas myModel.vf > myModel_gvf.c ode -R --yacas myModel.vf > myModel.R [ -f myModel_gvf.c ] && gcc -shared -fPIC -O2 -o myModel.so myModel_gvf.c"},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"sbtab-as-ods","dir":"Articles","previous_headings":"Summary","what":"SBtab as ODS","title":"Build a Shared Library","text":"repeat procedure XLSX, model name variable, C compiler whatever target cc links :","code":"modelName='myModel' alias sbtab_to_vfgen='~/SBtabVFGEN/sbtab_to_vfgen' alias ode='~/RPN-derivative/sh/ode.sh' sbtab_to_vfgen ${modelName}.ods ode -C --yacas ${modelName}.vf > ${modelName}_gvf.c ode -R --yacas ${modelName}.vf > ${modelName}.R [ -f ${modelName}_gvf.c ] && cc -shared -fPIC -O2 -o ${modelName}.so ${modelName}_gvf.c"},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"comments","dir":"Articles","previous_headings":"","what":"Comments","title":"Build a Shared Library","text":"Now C sources shared library, error messages SBtab content (files contain errors). simulator can use shared library directly. take account ${modelName}.machine specific work copy onto completely different kind machine (may work two similar enough). Please take time open inspect C sources try spot obvious mistakes.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"rpn-derivative","dir":"Articles","previous_headings":"","what":"RPN-derivative","title":"Build a Shared Library","text":"RPN-derivative package can also work without maxima yacas, needs compiled work. RPN-derivative’s root directory: get error messages pkg-config found, install (probably MAC: brew install pkg-config). get error messages missing directories, make (mkdir /path//missing/directory).","code":"make make test sudo make install"},{"path":"https://icpm-kth.github.io/uqsa/articles/simAKAP79.html","id":"load-the-model","dir":"Articles","previous_headings":"","what":"Load the Model","title":"Example Simulation","text":"model included package. load model, see user model article. Conservation laws (determined sbtab_to_vfgen saved RDS file): conservation laws, species calculated algebraically. initial values turned input parameters (using found law): hypothetical relationship (\\(c\\) constant): \\[ +B = c\\,, \\] can determine \\[ c = A_0 + B_0\\,. \\] thus can replac either two species: \\[ (t) = A_0 + B_0 - B(t) \\] \\(A_0+B_0\\) turned input called A_ConservedConst (\\(c\\) ) value determined stated initial condition.","code":"modelFiles <- uqsa_example(\"AKAP79\",full.names=TRUE) SBtab <- SBtabVFGEN::sbtab_from_tsv(modelFiles) #> [tsv] file[1] «AKAP79_Compound.tsv» belongs to Document «AKAP79» #>  I'll take this as the Model Name. #> AKAP79_Compound.tsv  AKAP79_Experiments.tsv  AKAP79_Expression.tsv  AKAP79_Input.tsv  AKAP79_Output.tsv  AKAP79_Parameter.tsv  AKAP79_Reaction.tsv  X0uM_cAMPCaN_AKAP79_0_nM_cAMP.tsv  X0uM_cAMPCaN_only_0_nM_cAMP.tsv  X0uM_cAMPno_CaN_0_nM_cAMP.tsv  X1000nM_cAMPCaN_AKAP79_1_uM_cAMP.tsv  X1000nM_cAMPCaN_only_1_uM_cAMP.tsv  X1000nM_cAMPno_CaN_1_uM_cAMP.tsv  X100nM_cAMPCaN_AKAP79_100_nM_cAMP.tsv  X100nM_cAMPCaN_only_100_nM_cAMP.tsv  X100nM_cAMPno_CaN_100_nM_cAMP.tsv  X2000nM_cAMPCaN_AKAP79_2_uM_cAMP.tsv  X2000nM_cAMPCaN_only_2_uM_cAMP.tsv  X2000nM_cAMPno_CaN_2_uM_cAMP.tsv  X200nM_cAMPCaN_AKAP79_200_nM_cAMP.tsv  X200nM_cAMPCaN_only_200_nM_cAMP.tsv  X200nM_cAMPno_CaN_200_nM_cAMP.tsv  X500nM_cAMPCaN_AKAP79_500_nM_cAMP.tsv  X500nM_cAMPCaN_only_500_nM_cAMP.tsv  X500nM_cAMPno_CaN_500_nM_cAMP.tsv modelName <- checkModel(\"AKAP79\",uqsa_example(\"AKAP79\",pat=\"_gvf[.]c$\")) #> building a shared library from c source, and using GSL odeiv2 as backend (pkg-config is used here). #> cc -shared -fPIC `pkg-config --cflags gsl` -o './AKAP79.so' '/home/andreikr/.local/R/library/uqsa/extdata/AKAP79/AKAP79_gvf.c' `pkg-config --libs gsl` comment(modelName) #> [1] \"./AKAP79.so\"  # model related functions, in R, e.g. AKAP79_default() parameters source(uqsa_example(\"AKAP79\",pat='^AKAP79[.]R$')) print(AKAP79_default()) #>            kf_Rii_C__RiiP_C kf_RiiP_CxcAMP__RiiP_C_cAMP  #>                    33.00000                     0.49600  #> kf_RiiP_cAMPxC__RiiP_C_cAMP kb_RiiP_cAMPxC__RiiP_C_cAMP  #>                     0.00545                     0.01560  #>     kb_RiiPXcAMP__RiiP_cAMP     kf_RiiPXcAMP__RiiP_cAMP  #>                     0.00160                     0.01500  #>           kf_RiiPxC__RiiP_C           kb_RiiPxC__RiiP_C  #>                     0.03800                     0.00260  #>       kf_cAMPxRii__Rii_cAMP       kb_cAMPxRii__Rii_cAMP  #>                     0.01500                     0.00160  #>   kf_Rii_CxcAMP__Rii_C_cAMP   kb_Rii_CxcAMP__Rii_C_cAMP  #>                     0.49600                     1.41300  #>             kf_RiixC__Rii_C   kf_Rii_cAMPxC__Rii_C_cAMP  #>                     2.10000                     0.29840  #>   kb_Rii_cAMPxC__Rii_C_cAMP  kf_Rii_C_cAMP__RiiP_C_cAMP  #>                     0.01800                    33.00000  #>             kb_RiixC__Rii_C                   AKAPoff_1  #>                     0.00030                     2.60000  #>                   AKAPoff_3                    AKAPon_1  #>                    20.00000                     0.45000  #>                    AKAPon_3                  kf_C_AKAR4  #>                     2.00000                     0.01800  #>                  kb_C_AKAR4                  kcat_AKARp  #>                     0.10600                    10.20000  #>                       kmOFF                        kmON  #>                   100.00000                     1.00000  #>                        KD_T                      b_AKAP  #>                     0.70000                     0.00000  #>        AKAR4_ConservedConst          CaN_ConservedConst  #>                     0.20000                     1.50000  #>        Rii_C_ConservedConst         cAMP_ConservedConst  #>                     0.63000                     0.00000  #>          Rii_ConservedConst  #>                     6.30000 clf <- uqsa_example(\"AKAP79\",pat='Laws[.]RDS$') cl <- readRDS(clf)"},{"path":"https://icpm-kth.github.io/uqsa/articles/simAKAP79.html","id":"load-experiments-data","dir":"Articles","previous_headings":"","what":"Load Experiments (data)","title":"Example Simulation","text":"also includes instructions simulator.","code":"experiments <- sbtab.data(SBtab,cl) # with conservation laws # for example, these are the input # and initial state of experiment 1: print(experiments[[1]]$input) #>               b_AKAP AKAR4_ConservedConst   CaN_ConservedConst  #>                 1.00                 0.20                 1.50  #> Rii_C_ConservedConst  cAMP_ConservedConst   Rii_ConservedConst  #>                 0.63                 0.00                 6.30 print(experiments[[1]]$initialState) #>          RiiP     RiiP_cAMP        RiiP_C   RiiP_C_cAMP             C  #>             0             0             0             0             0  #>      Rii_cAMP    Rii_C_cAMP      RiiP_CaN RiiP_cAMP_CaN       AKAR4_C  #>             0             0             0             0             0  #>        AKAR4p  #>             0 # pick prameters for simulation nInput <- length(experiments[[1]]$input) p <- head(AKAP79_default(),-nInput) print(p) #>            kf_Rii_C__RiiP_C kf_RiiP_CxcAMP__RiiP_C_cAMP  #>                    33.00000                     0.49600  #> kf_RiiP_cAMPxC__RiiP_C_cAMP kb_RiiP_cAMPxC__RiiP_C_cAMP  #>                     0.00545                     0.01560  #>     kb_RiiPXcAMP__RiiP_cAMP     kf_RiiPXcAMP__RiiP_cAMP  #>                     0.00160                     0.01500  #>           kf_RiiPxC__RiiP_C           kb_RiiPxC__RiiP_C  #>                     0.03800                     0.00260  #>       kf_cAMPxRii__Rii_cAMP       kb_cAMPxRii__Rii_cAMP  #>                     0.01500                     0.00160  #>   kf_Rii_CxcAMP__Rii_C_cAMP   kb_Rii_CxcAMP__Rii_C_cAMP  #>                     0.49600                     1.41300  #>             kf_RiixC__Rii_C   kf_Rii_cAMPxC__Rii_C_cAMP  #>                     2.10000                     0.29840  #>   kb_Rii_cAMPxC__Rii_C_cAMP  kf_Rii_C_cAMP__RiiP_C_cAMP  #>                     0.01800                    33.00000  #>             kb_RiixC__Rii_C                   AKAPoff_1  #>                     0.00030                     2.60000  #>                   AKAPoff_3                    AKAPon_1  #>                    20.00000                     0.45000  #>                    AKAPon_3                  kf_C_AKAR4  #>                     2.00000                     0.01800  #>                  kb_C_AKAR4                  kcat_AKARp  #>                     0.10600                    10.20000  #>                       kmOFF                        kmON  #>                   100.00000                     1.00000  #>                        KD_T  #>                     0.70000"},{"path":"https://icpm-kth.github.io/uqsa/articles/simAKAP79.html","id":"simulate","dir":"Articles","previous_headings":"","what":"Simulate","title":"Example Simulation","text":"make function s, always simulate scenarios described experiments list, user supplied parameters.","code":"s <- simulator.c(experiments,modelName,noise=TRUE) #> Loading required package: rgsl y <- s(p)"},{"path":"https://icpm-kth.github.io/uqsa/articles/simAKAP79.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"Example Simulation","text":"","code":"E <- 10 # which experiment to plot out <- experiments[[E]]$outputValues$AKAR4pOUT err <- experiments[[E]]$errorValues$AKAR4pOUT tm <- experiments[[E]]$outputTime  par(bty='n',xaxp=c(80,120,4)) plot(tm,      y[[E]]$func[1,,1],      type='l',      ylim=c(90,130), ylab=\"AKAR4p\",      xlab=\"t\",      main=sprintf(\"Experiment %i\",E),      lwd=1.5,      col=\"purple\" )  points(tm,out) arrows(x0=tm,x1=tm,y0=out,y1=out+err,angle=90,length=0.025) arrows(x0=tm,x1=tm,y0=out,y1=out-err,angle=90,length=0.025)"},{"path":"https://icpm-kth.github.io/uqsa/articles/simAKAP79.html","id":"gg-plot","dir":"Articles","previous_headings":"","what":"gg-Plot","title":"Example Simulation","text":"","code":"require(ggplot2) #> Loading required package: ggplot2  D<-data.frame(time=experiments[[E]]$outputTime,               AKAR4p=experiments[[E]]$outputValues$AKAR4pOUT,               AKAR4pERR=experiments[[E]]$errorValues$AKAR4pOUT,               sim=y[[E]]$func[1,,1]) ggplot(D) +   geom_linerange(mapping=aes(x=time,y=AKAR4p,ymin=AKAR4p-AKAR4pERR,ymax=AKAR4p+AKAR4pERR),na.rm=TRUE) +   geom_point(mapping=aes(x=time,y=AKAR4p),na.rm=TRUE) +   geom_line(mapping=aes(x=time,y=sim),color=\"purple\",lwd=1.2)"},{"path":"https://icpm-kth.github.io/uqsa/articles/tsv.html","id":"storing-models-in-the-tsv-format","dir":"Articles","previous_headings":"","what":"Storing models in the TSV format","title":"Tab Separated Values","text":"Advantages: tsv files text files. can use version control track changes (git) ods xlsx compressed xml real spreadsheet formats, sbml, require library language bindings import content language like R (similar) import libraries become unmaintained, theR package removed CRAN, format becomes unavailable. hidden columns hidden rows cells comments colors multiline cell content may asking : json, yaml, toml? valid questions! , tsv simlest lot. Disadvantages: TSV files best contain one table time, thus SBtab document collection tsv files (us, must) TSV files ususally displayed pretty way opening text editor (columns align) \\n systems \\r\\n others (\\n\\r?) kf * * B exported \"kf * * B\" (even though spaces, tabs)","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/tsv.html","id":"line-endings","dir":"Articles","previous_headings":"Storing models in the TSV format","what":"Line Endings","title":"Tab Separated Values","text":"remove \\r, inserted spreadsheet program: reverse: restore line endings operating systems ending *dows prefer.","code":"tr -d '\\r' tr '\\n' '\\r\\n'"},{"path":"https://icpm-kth.github.io/uqsa/articles/tsv.html","id":"conversion","dir":"Articles","previous_headings":"Storing models in the TSV format","what":"Conversion","title":"Tab Separated Values","text":"Excel LibreOffice just export spreadsheet collection .tsv files. ssconvert program gnumeric package can . SBtabVFGEN package contains convenience script (still using ssconvert), important line : also companion script combines several .tsv files one spreadsheet: tsv ods conversion amounts : .ods file ending can replaced different format.","code":"LC_ALL=\"C\" ssconvert -S \\  --export-type=Gnumeric_stf:stf_assistant \\  --export-options=\"quoting-mode=never separator='   ' locale=C\" \\    DemoModel.{ods,xlsx,gnumeric} \"%s.tsv\" $ ls -1 ~/SBtabVFGEN/*.sh ~/SBtabVFGEN/ods_to_tsv.sh ~/SBtabVFGEN/tsv_to_ods.sh ssconvert --merge-to=\"OUT-FILE.ods\" *.tsv"},{"path":"https://icpm-kth.github.io/uqsa/articles/tsv.html","id":"boolean-values","dir":"Articles","previous_headings":"Storing models in the TSV format","what":"Boolean Values","title":"Tab Separated Values","text":"Spreadsheets can contain values TRUE FALSE, Boolean values written exactly like C R. , even converted numerical values words shoudl work box. spreadsheet software converts 1 0 exporting TSV. works even better. , reason, C model still contains TRUE FALSE values written literally TRUE/FALSE macros defined (compiler complains), can define without rebuilding model. Insert following code block beginning model file:","code":"enum logical {FALSE, TRUE};"},{"path":"https://icpm-kth.github.io/uqsa/articles/uq.html","id":"introduction-to-uq","dir":"Articles","previous_headings":"","what":"Introduction to UQ","title":"Uncertainty Quantification","text":"Uncertainty Quantification global Sensitivity Analysis common tasks systems biology. Uncertainty quantification aims establish amount knowledge (indeed lack) possible values model parameters. knowledge expressed form probability distributions parameters, even though parameters random variables. case probability related randomness within observed data: measurement noise. noise direct implications possible parameters: parameters high probability density values can easily explain data, unlikely parameters require random noise uncharacteristically large values given measurements package aims characterize posterior probability distribution \\(p(\\theta|D)\\), \\(\\theta\\) vector directly maps model parameters used Markov chain variable, e.g.: \\(\\rho = \\exp(\\theta)\\), \\(\\rho\\) real model parameters. target distribution quantifies amount knowledge \\(\\theta\\), indirectly also internal parameters model. field systems biology, internal parameters \\(\\rho\\) typically quantities like reaction rate coefficients \\(k_{\\{f,b\\}}\\), dissociation constants (equilibrium constants) \\(K_{D}\\), Hill exponents \\(m\\), parameters relate gene expression, enzyme-substrate interaction, biochemical processes.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"load-the-tsv-files-convert-and-compile-the-model","dir":"Articles","previous_headings":"","what":"Load the TSV files Convert and Compile the Model","title":"Build your own Model","text":"produce output: created c source code, functions:","code":"library(uqsa) library(SBtabVFGEN)  # find the tsv files with \"?dir\", in the directory of your model f <- dir(Location,pattern='tsv$',full.names=TRUE) # you don't need this 'Location' variable, just be in the directory where the TSV files are. sb <- SBtabVFGEN::sbtab_from_tsv(f)                  # a list of data.frames cl <- SBtabVFGEN::sbtab_to_vfgen(sb)                 # conservation laws, if any ex <- SBtabVFGEN::sbtab.data(sb,cl)                  # includes the data  print(names(sb))  system2(\"ode\", args=c(\"-C\", \"--maxima\" ,\"AKAR4cl.tar.gz\"), stdout=\"AKAR4cl_gvf.c\") stopifnot(file.exists(\"AKAR4cl_gvf.c\")) modelName <- checkModel(\"AKAR4cl\",\"AKAR4cl_gvf.c\") # compiles the model if not yet compiled library(uqsa) library(SBtabVFGEN)  # find the tsv files with \"?dir\", in the directory of your model f <- dir(Location,pattern='tsv$',full.names=TRUE) # you don't need this 'Location' variable, just be in the directory where the TSV files are. sb <- SBtabVFGEN::sbtab_from_tsv(f)                  # a list of data.frames #> [tsv] file[1] «100nM.tsv» belongs to Document «AKAR4cl» #>  I'll take this as the Model Name. #> 100nM.tsv  25nM.tsv  400nM.tsv  Compound.tsv  Experiments.tsv  Output.tsv  Parameter.tsv  Reaction.tsv cl <- SBtabVFGEN::sbtab_to_vfgen(sb)                 # conservation laws, if any #> Document Name: AKAR4cl. #> SBtab has 8 tables. #> The names of SBtab[[1]]: #> !Time, >AKAR4pOUT, ~AKAR4pOUT #>                 !Name                             !KineticLaw #> reaction_1 reaction_1 kf_C_AKAR4*C*AKAR4 - kb_C_AKAR4*AKAR4_C #> reaction_2 reaction_2                      kcat_AKARp*AKAR4_C #>                  !ReactionFormula !IsReversible #> reaction_1  C + AKAR4 <=> AKAR4_C             1 #> reaction_2 AKAR4_C <=> AKAR4p + C             0 #> There is no «Constant» Table in this model. This is OK. #> There is no «Expression» Table in this model. This is OK. #> compound names: #> [1] \"AKAR4\"   \"AKAR4_C\" \"AKAR4p\"  \"C\" #> Units: #> [1] \"micromole/liter\" \"micromole/liter\" \"micromole/liter\" \"micromole/liter\" #> --- #> There is no «Input» Table in this model. #> class(IsConstant): logical. #> [1] Formula Unit    #> <0 rows> (or 0-length row.names) #> [1] Formula Unit    #> <0 rows> (or 0-length row.names) #> character(0) #> --- #> character #> Reaction 1:line (a->b): «C + AKAR4 » ←→ « AKAR4_C» #>  where a: [1] \"C \"      \" AKAR4 \" #>    and b: [1] \" AKAR4_C\" #> Products: #> 1 × AKAR4_C          (AKAR4_C is compound 2) #> Reactants: #> 1 × C            (C is compound 4) #> 1 × AKAR4            (AKAR4 is compound 1) #> Reaction 2:line (a->b): «AKAR4_C » ←→ « AKAR4p + C» #>  where a: [1] \"AKAR4_C \" #>    and b: [1] \" AKAR4p \" \" C\"       #> Products: #> 1 × AKAR4p           (AKAR4p is compound 3) #> 1 × C            (C is compound 4) #> Reactants: #> 1 × AKAR4_C          (AKAR4_C is compound 2) #> Number of compounds: 4 #> Number of Reactions: 2 #>      [,1] [,2] #> [1,]    0    1 #> [2,]    1    0 #> [3,]    0    1 #> [4,]    1   -1 #> Stoichiometric Matrix: #>      [,1] [,2] #> [1,]   -1    0 #> [2,]    1   -1 #> [3,]    0    1 #> [4,]   -1    1 #> --- #> Conservation Law dimensions: 4 × 2 #> To check that the conservation laws apply: norm(t(StoichiometryMatrix) * ConservationLaw == 0.00000) #>      [,1] [,2] #> [1,]    0    1 #> [2,]    1    0 #> [3,]    0    1 #> [4,]    1   -1 #> [1] 2 #> [1] 0 1 0 1 #> [1] 0.2 0.0 0.0 0.0 #> 1*AKAR4_C+1*C #> This will comment out compound 2 («AKAR4_C», initial value: 0), Conserved Constant = 0.000000 #> [1]  1  0  1 -1 #> [1] 0.2 0.0 0.0 0.0 #> 1*AKAR4+1*AKAR4p-1*C #> This will comment out compound 1 («AKAR4», initial value: 0.2), Conserved Constant = 0.200000 #> Loading required package: hdf5r #> StateVariable AKAR4 will be commented out as it was already defined as a Mass Conservation Law Expression.StateVariable AKAR4_C will be commented out as it was already defined as a Mass Conservation Law Expression. #> The vf content was written to: AKAR4cl.vf #> MOD: StateVariable AKAR4 will be commented out as it was already defined as a Mass Conservation Law Expression. #> MOD: StateVariable AKAR4_C will be commented out as it was already defined as a Mass Conservation Law Expression. #> The mod content was written to: AKAR4cl.mod ex <- SBtabVFGEN::sbtab.data(sb,cl)                  # includes the data   system2(\"ode\", args=c(\"-C\", \"--maxima\" ,\"AKAR4cl.tar.gz\"), stdout=\"AKAR4cl_gvf.c\") stopifnot(file.exists(\"AKAR4cl_gvf.c\")) modelName <- checkModel(\"AKAR4cl\",\"AKAR4cl_gvf.c\") # compiles the model if not yet compiled #> building a shared library from c source, and using GSL odeiv2 as backend (pkg-config is used here). #> cc -shared -fPIC `pkg-config --cflags gsl` -o './AKAR4cl.so' 'AKAR4cl_gvf.c' `pkg-config --libs gsl` grep AKAR4cl_ ./AKAR4cl_gvf.c #> int AKAR4cl_vf(double t, const double y_[], double f_[], void *par) #> int AKAR4cl_netflux(double t, double y_[], double *flux, void *par){ #> int AKAR4cl_fwdflux(double t, double y_[], double *flux, void *par){ #> int AKAR4cl_bwdflux(double t, double y_[], double *flux, void *par){ #> int AKAR4cl_jac(double t, const double y_[], double *jac_, double *dfdt_, void *par) #> int AKAR4cl_jacp(double t, const double y_[], double *jacp_, double *dfdt_, void *par) #> int AKAR4cl_func(double t, const double y_[], double *func_, void *par) #> int AKAR4cl_funcJac(double t, const double y_[], double *funcJac_, void *par) #> int AKAR4cl_funcJacp(double t, const double y_[], double *funcJacp_, void *par) #> int AKAR4cl_default(double t, void *par) #> int AKAR4cl_init(double t, double *y_, void *par)"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"simulate","dir":"Articles","previous_headings":"","what":"Simulate","title":"Build your own Model","text":"simulation result sr list several components, least 2: - state state variable trajectories - func outout functions output functions usually correspond data (way), may need sort normalization. case relationship direct. state func three indexes: corresponds experiment l, state variable , time-point j, parameter column k (, relevant par matrix multiple columns). previously created modelName variable comment attribute (can also set , magic ), attribute inidicates location shared library used simulations. don’t re-make evry time - long model doesn’t change (checkModel need called):","code":"## we create a closure called \"sim\" a function that internally remembers the \"experiments\" (ex) sim <- simulator.c(ex,modelName)                   # ex holds the instructions for the solver #> Loading required package: rgsl par <- as.matrix(sb$Parameter[[\"!DefaultValue\"]])  # one column - but can be several sets (as columns)  ## sim can be called with any parameter vector - or several and will always simulate the same set of experiments sr <- sim(par)                                     # simulation results (one per experiment) stopifnot(length(sr) == length(ex))  i <- seq(70) t <- ex[[1]]$outputTimes[i] y <- ex[[1]]$outputValues[[1]][i] dy <- ex[[1]]$errorValues[[1]][i]  z <- sr[[1]]$func[1,i,1]                           # third dimension is the par column (just one here)  plot(t,z,bty='n',type='l', ylim=c(90,200)) points(t,y) arrows(t,y,t,y+dy,angle=90, length=0.01) arrows(t,y,t,y-dy,angle=90, length=0.01) legend(\"bottomright\",legend=c(\"simulation\",\"data\"), lty=c(1,1), pch=c(NA,1)) sr[[l]]$state[i,j,k]        # is a number comment(modelName) <- \"./AKAR4cl.so\" # this is sufficient if the .so file already exists"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"simulations-of-several-parameter-sets","dir":"Articles","previous_headings":"","what":"Simulations of Several Parameter Sets","title":"Build your own Model","text":"let’s plot trajectories one picture:  new result (just like old one) array three indexes: output function j time index k selects trajectories belong P[,k] cleanup:","code":"t <- as.numeric(ex[[1]]$outputTimes) np <- NROW(par) REPS <- 50 P <- matrix(runif(np*REPS,min=0,max=as.numeric(par)*2),np,REPS) dim(P) #> [1]  3 50   stm <- Sys.time() sr <- sim(P) etm <- Sys.time() difftime(etm,stm) #> Time difference of 0.2752998 secs T <- rep(c(t,NA),REPS)                                  # the NA value will break the line Z <- as.numeric(sr[[1]]$func[1,c(seq_along(t),NA),])    # at the end, so it doesn't loop plot(T,Z,type='l') sr[[l]]$func[i,j,k] # a number gf <- sprintf(\"AKAR4cl%s\",c(\".vf\",\".tar.gz\",\".zip\",\".so\")) print(gf) #> [1] \"AKAR4cl.vf\"     \"AKAR4cl.tar.gz\" \"AKAR4cl.zip\"    \"AKAR4cl.so\" file.remove(gf) #> [1] TRUE TRUE TRUE TRUE"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"other-formats","dir":"Articles","previous_headings":"","what":"Other Formats","title":"Build your own Model","text":"SBtab content can normal spreadsheet. google spreadsheet (can good collaborative work), write failry satisfied components export .xlsx, .ods file. gnumeric application can automatically convert .xlsx .ods set .tsv files want benefits version control (works text files). , .ods .xlsx work: SBtabVFGEN::sbtab_from_ods ODS files SBtabVFGEN::sbtab_from_excel XLSX files scripts find tables name: TSV files: TableName attribute name table ODS files: Sheet’s name name table, TableName attribute parsed Excel files: Sheet’s name (ODS)","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"tab-separated-values","dir":"Articles","previous_headings":"Other Formats","what":"Tab Separated Values","title":"Build your own Model","text":"information solve common tasks regarding tsv files, see tsv topic. obtain list tsv files current directory, import contents, like :","code":"modelFiles <- dir(pattern='[.]tsv$') SBtab <- sbtab_from_tsv(modelFiles)"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"open-document-spreadsheet","dir":"Articles","previous_headings":"Other Formats","what":"Open Document Spreadsheet","title":"Build your own Model","text":"files can created Libre Office, Apple’s numbers program, gnumeric, web-hosted spreadsheet application (like google spreadsheets).","code":"modelFiles <- \"DemoModel.ods\" SBtab <- sbtab_from_ods(modelFiles)"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"excel","dir":"Articles","previous_headings":"Other Formats","what":"Excel","title":"Build your own Model","text":"can created MS Excel, loaded like :","code":"modelFiles <- \"DemoModel.xlsx\" SBtab <- sbtab_from_excel(modelFiles)"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"parameters","dir":"Articles","previous_headings":"Other Formats > Excel","what":"Parameters","title":"Build your own Model","text":"R code generated ode.sh includes list functions, generic function names: model$vf() vector field model$jac() Jacobian model$init() initial values regardless scale SBtab file function returns long parameter vector (Parameter Input) Observe model$par() returns ODE model parameters, can biological parameters, components : biological parameters (SBtab$Parameter) origignal input parameters (SBtab$Input) derived input parameters, conservationlaws (conserved constants) inputs allowed different experiment (definition), biological parameters experiments simulated one go. Therefore, supply biological parameters (first n) simultor retrieves others experiments variable, concatenation: Usually, number leading parameters (sb$Parameter[[“!DefaultValue”]]) change. simulator needs inputs already ex.","code":""},{"path":"https://icpm-kth.github.io/uqsa/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexandra Jauhiainen. Author. Olivia Eriksson. Author, maintainer. Federica Milinanni. Author. Andrei Kramer. Author, contributor.","code":""},{"path":"https://icpm-kth.github.io/uqsa/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kramer , Milinanni F, Nyquist P, Jauhiainen , Eriksson O (2023). “UQSA – R-Package Uncertainty Quantification Sensitivity Analysis Biochemical Reaction Network Models.” doi:10.48550/arXiv.2308.05527, 2308.05527. Jauhiainen Alexandra, Eriksson Olivia, Milinanni Federica, Kramer Andrei, (2024). uqsa: Uncertainty Quanitification Global Sensitivity Analysis via ABC sampling. R package version 0.1.6, https://icpm-kth.github.io/uqsa/","code":"@Misc{,   title = {UQSA -- An R-Package for Uncertainty Quantification and Sensitivity Analysis for Biochemical Reaction Network Models},   author = {Andrei Kramer and Federica Milinanni and Pierre Nyquist and Alexandra Jauhiainen and Olivia Eriksson},   year = {2023},   eprint = {2308.05527},   archiveprefix = {arXiv},   primaryclass = {q-bio.QM},   doi = {https://doi.org/10.48550/arXiv.2308.05527}, } @Manual{,   title = {{uqsa}: Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling},   author = {Alexandra Jauhiainen and Olivia Eriksson and Federica Milinanni and Andrei Kramer},   year = {2024},   note = {R package version 0.1.6},   url = {https://icpm-kth.github.io/uqsa/}, }"},{"path":"https://icpm-kth.github.io/uqsa/index.html","id":"uncertainty-quantification-uq-and-sensitivity-analysis-sa","dir":"","previous_headings":"","what":"Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling","title":"Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling","text":"R package performs parameter estimation, uncertainty quantification, global sensitivity analysis using Bayesian methods ABC-MCMC sampling. Source code: https://github.com/icpm-kth/uqsa/ Articles page user guide package. always, function reference also accessible within R (?uqsa::ABCMCMC), installation. See Get Started detailed installation instructions.","code":"install.packages(\"remotes\") remotes::install_github(\"icpm-kth/uqsa\")"},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"Given set simulation experiments (list), model, parameter boundaries, function draw sample parameters posterior probability density given problem.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"","code":"ABCMCMC(   objectiveFunction,   startPar,   nSims,   Sigma0,   delta,   dprior,   batchSize = 100 )"},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"objectiveFunction function , given (vectorial) parameter input, simulates model, outputs distance experimental data data simulated model parameter provided input startPar starting value parameter vector nSims requested sample size Sigma0 multivariate normal covariance Markov chain transition kernel delta ABC acceptance threshold dprior function returns prior probability density values","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"list containing sample matrix vector scores (values delta sample)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"Initially function performs similar job optimizer, transitions MCMC sampling.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/Rmpi_swap_temperatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Communicate with other ranks and swap beta — Rmpi_swap_temperatures","title":"Communicate with other ranks and swap beta — Rmpi_swap_temperatures","text":"Given current log-likelihood, temperature step-size, decides whether send receive variables neighboring process swap temperatures .","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/Rmpi_swap_temperatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Communicate with other ranks and swap beta — Rmpi_swap_temperatures","text":"","code":"Rmpi_swap_temperatures(i, B, LL, H, r, comm, cs)"},{"path":"https://icpm-kth.github.io/uqsa/reference/Rmpi_swap_temperatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Communicate with other ranks and swap beta — Rmpi_swap_temperatures","text":"MCMC iteration B inverse temperature (parallel tempering) LL log-likelihood value current point H algorithm's step size (often called epsilon literature) r MPI rank comm MPI communicator cs MPI comm size","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/change_temperature.html","id":null,"dir":"Reference","previous_headings":"","what":"Should 2 Markov chains exchange their temperatures — change_temperature","title":"Should 2 Markov chains exchange their temperatures — change_temperature","text":"function makes Boolean choice chnages temperature, based log(liklihood) values two Markov chains parallel tempering setting.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/change_temperature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Should 2 Markov chains exchange their temperatures — change_temperature","text":"","code":"change_temperature(b1, ll1, b2, ll2)"},{"path":"https://icpm-kth.github.io/uqsa/reference/change_temperature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Should 2 Markov chains exchange their temperatures — change_temperature","text":"b1 inverse temperature chain 1 ll1 log-liklihood chain 1 b2 inverse temperature chain 2 ll2 log-lilihood chain 2","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/change_temperature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Should 2 Markov chains exchange their temperatures — change_temperature","text":"TRUE chains swap temperatures","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/change_temperature.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Should 2 Markov chains exchange their temperatures — change_temperature","text":"function useful mpi.send() mpi.recv() used.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkFitWithPreviousExperiments.html","id":null,"dir":"Reference","previous_headings":"","what":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","title":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","text":"prior probability density model using copulas vines perfect, values sampled imperfect prior estimate can checked old data.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkFitWithPreviousExperiments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","text":"","code":"checkFitWithPreviousExperiments(draws, objectiveFunction, delta)"},{"path":"https://icpm-kth.github.io/uqsa/reference/checkFitWithPreviousExperiments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","text":"draws matrix sampled values (filtered). objectiveFunction function , given (vectorial) parameter input, simulates model, outputs distance experimental data data simulated model parameter provided input delta acceptance threshold.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkFitWithPreviousExperiments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","text":"filtered subset acceptable parameter draws","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":null,"dir":"Reference","previous_headings":"","what":"checkModel tries to establish the simulation file for a given model — checkModel","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"function returns model name, additional comments file","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"","code":"checkModel(modelName, modelFile = NULL)"},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"modelName string modelFile string, model file different \"modelName.R\". file name ends .c, c source compiled shared library.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"modelName additional comment file use simulations","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"alternative function, sufficient write   function attempt find model file, current directory. , checkModel compile GSL compatible C source file shared object modelFile ends .c stop work. compiler called using system call, may incorrect system -- funciton fails, make shared library model using correct compiler options system. case, function stops execution model file exist, simulations possible.","code":"modelName <- \"test_ode_model\"             # or some other model name comment(modelName) <- \"test_ode_model.so\""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ODE parameter to Gillespie parameter — convert.parameter","title":"Convert ODE parameter to Gillespie parameter — convert.parameter","text":"ODE parameters usually different unit measurement parameters need stochastic simulators.  ODEs fluxes, multiples M/s (M mol/liter), unit first derivative state variables.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ODE parameter to Gillespie parameter — convert.parameter","text":"","code":"convert.parameter(k, n = 0, LV = 602214076)"},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ODE parameter to Gillespie parameter — convert.parameter","text":"k ODE reaction rate coefficient (mandatory) n multiplicity reactant, (order > 0); omit zero-order LV L*V -- product Avogadro's number volume defaults 6.02214076e+8","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ODE parameter to Gillespie parameter — convert.parameter","text":"rescaled parameter stochastic simulation comment re-scale ","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert ODE parameter to Gillespie parameter — convert.parameter","text":"reaction rate coefficients mass action kinetics, kf kb units compatible flux units, depending order reaction (order related reaction's stoichiometry).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert ODE parameter to Gillespie parameter — convert.parameter","text":"","code":"# reaction: \"2 A + B -> C\" k <- 1.0 attr(k,'unit') <- \"µM/s\" n <- c(2,1) reactants <- c('A','B') uqsa:::convert.parameter(k,n) #> [1] 2.75739e-24 #> attr(,\"unit\") #> [1] \"µM/s\" #> attr(,\"conversion\") #> [1] 2.75739e-24"},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"copulaPrior creates a prior probability density function — dCopulaPrior","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"function accepts return list fitCopula() makeIndepCopula() creates density function .","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"","code":"dCopulaPrior(Copula)"},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"Copula list, returned fitCopula() makeIndepCopula","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"function maps parameters (vector) probability density values (scalar)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"","code":"x<-rnorm(300,mean=1,sd=2) X<-matrix(x,100,3) C<-fitCopula(X) d<-dCopulaPrior(C) print(d(c(1,2,3))) #> [1] 0.004385218 print(prod(sapply(c(1,2,3),FUN=dnorm,mean=1,sd=2))) #> [1] 0.004248212"},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"returned density function takes vectors size mean sd. returns product components' one-dimensional normal distribution, mean \"mean\" standard deviation \"sd\".","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"","code":"dNormalPrior(mean, sd)"},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"mean mean random variables (vector) sd standard deviation random variables (size vector mean)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"probability density function vectors length mean sd.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"","code":"dnp<-dNormalPrior(mean=c(0,1,2),sd=c(1,2,3)) dnp(c(0.5,1.5,2.5)) #> [1] 0.008926651"},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"dUniformPrior creates a uniform density function — dUniformPrior","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"returned denisty function takes vectors size ll ul. returns product component's one-dimensional uniform distribtions.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"","code":"dUniformPrior(ll, ul)"},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"ll lower limit random variables (vector) ul upper limit random variables (size vector ll)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"probability density function vectors withthe length ll ul.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"","code":"dup<-dUniformPrior(ll=c(0,1,2),ul=c(1,2,3)) dup(c(0.5,1.5,2.5)) #> [1] 1"},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultAcceptance.html","id":null,"dir":"Reference","previous_headings":"","what":"default ABC acceptance probability function for one experiment — defaultAcceptance","title":"default ABC acceptance probability function for one experiment — defaultAcceptance","text":"experiment corresponds one simulation fully quanitified , calculating overall distance data experiment can done one one. function describes default way simulation compared data.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultAcceptance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"default ABC acceptance probability function for one experiment — defaultAcceptance","text":"","code":"defaultAcceptance(funcSim, dataVAL, dataERR = max(dataVAL))"},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultAcceptance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"default ABC acceptance probability function for one experiment — defaultAcceptance","text":"funcSim matrix, contains model solution (output values), columns output vectors dataVAL data.frame experimental data dataERR data.frame measurement errors, available, defaults maximum data value.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultAcceptance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"default ABC acceptance probability function for one experiment — defaultAcceptance","text":"data complex, two simulations needed calculate one distance value objective-Function needs entirely user-supplied. case experiments \"control\" -- needed measurement arbitrary units makes sense comparatively secondary (control) scenario. function used none provided user. funcSim values need supplied matrix size N×T N length model's output vectors T amount measurement times (rgsl package returns simulation results).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultDistance.html","id":null,"dir":"Reference","previous_headings":"","what":"default distance function for one experiment — defaultDistance","title":"default distance function for one experiment — defaultDistance","text":"experiment corresponds one simulation fully quanitified , calculating overall distance data experiment can done one one. function describes default way simulation compared data.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultDistance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"default distance function for one experiment — defaultDistance","text":"","code":"defaultDistance(funcSim, dataVAL, dataERR = max(dataVAL))"},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultDistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"default distance function for one experiment — defaultDistance","text":"funcSim matrix, contains model solution (output values), columns output vectors dataVAL data.frame experimental data dataERR data.frame measurement errors, available, defaults maximum data value.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultDistance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"default distance function for one experiment — defaultDistance","text":"data complex, two simulations needed calculate one distance value objective-Function needs entirely user-supplied. case experiments \"control\" -- needed measurement arbitrary units makes sense comparatively secondary (control) scenario. function used none provided user. funcSim values need supplied matrix size N×T N length model's output vectors T amount measurement times (rgsl package returns simulation results).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformation.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher Information from Sensitivity — fisherInformation","title":"Fisher Information from Sensitivity — fisherInformation","text":"Given list simulation sensitivities, function returns fisher information (sum experiments). actual work done returned function implicitly depends model, experiments, parameter mapping","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher Information from Sensitivity — fisherInformation","text":"","code":"fisherInformation(model, experiments, parMap = identity, parMapJac = 1)"},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher Information from Sensitivity — fisherInformation","text":"model list R functions ODE model experiments list experiments, inputs parMap mapping MCMC variables ODE parameters parMapJac jacobian map","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher Information from Sensitivity — fisherInformation","text":"fisher information calculating funciton","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fisher Information from Sensitivity — fisherInformation","text":"return value: function(par, simulations, sensitivity) -> fisherInformation (matrix) par refers model parameters (possibly transformed), simulations performed parameters.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformationFromGSA.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Global Fisher Information — fisherInformationFromGSA","title":"Calculate Global Fisher Information — fisherInformationFromGSA","text":"Given sample, performs global sensitivity analysis, squares sensitivity.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformationFromGSA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Global Fisher Information — fisherInformationFromGSA","text":"","code":"fisherInformationFromGSA(Sample, yf = NULL, E)"},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformationFromGSA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Global Fisher Information — fisherInformationFromGSA","text":"Sample MCMC sample, ABC sample yf simulations sample E experiments list","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformationFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher Information from Sensitivity — fisherInformationFunc","title":"Fisher Information from Sensitivity — fisherInformationFunc","text":"Given list simulation sensitivities, function returns fisher information (sum experiments). actual work done returned function implicitly depends model, experiments, parameter mapping","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformationFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher Information from Sensitivity — fisherInformationFunc","text":"","code":"fisherInformationFunc(   model,   experiments,   parMap = identity,   parMapJac = function(x) {      diag(1, length(x))  } )"},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformationFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher Information from Sensitivity — fisherInformationFunc","text":"model list R functions ODE model experiments list experiments, inputs parMap mapping MCMC variables ODE parameters parMapJac jacobian map","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformationFunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher Information from Sensitivity — fisherInformationFunc","text":"fisher information calculating funciton","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformationFunc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fisher Information from Sensitivity — fisherInformationFunc","text":"return value: function(par, simulations, sensitivity) -> fisherInformation (matrix) par refers model parameters (possibly transformed), simulations performed parameters.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fitCopula.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a Probability Density Estimate (from a sample) — fitCopula","title":"Makes a Probability Density Estimate (from a sample) — fitCopula","text":"Given sample (probability distribution) function makes Copula fit source distribution using VineCopula package.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fitCopula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a Probability Density Estimate (from a sample) — fitCopula","text":"","code":"fitCopula(X)"},{"path":"https://icpm-kth.github.io/uqsa/reference/fitCopula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a Probability Density Estimate (from a sample) — fitCopula","text":"X sample characterizes traget distribution (rows)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fitCopula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a Probability Density Estimate (from a sample) — fitCopula","text":"list: vineCop, U, Z, Y U marginal probability samples, Z cummulative density values U, Y probability density values U.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/gatherSample.html","id":null,"dir":"Reference","previous_headings":"","what":"gatherSample collects all sample points, from all files, with the\ngiven temperature — gatherSample","title":"gatherSample collects all sample points, from all files, with the\ngiven temperature — gatherSample","text":"function assumes supplied RDS file contains matrix model MCMC parameters, attribute called \"beta\" lists temperature row.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/gatherSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gatherSample collects all sample points, from all files, with the\ngiven temperature — gatherSample","text":"","code":"gatherSample(files, beta = 1, size = NA)"},{"path":"https://icpm-kth.github.io/uqsa/reference/gatherSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gatherSample collects all sample points, from all files, with the\ngiven temperature — gatherSample","text":"files list file names beta inverse temperture extract sample size size smaller actual sample size, left unchanged, sampled points returned","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/gatherSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gatherSample collects all sample points, from all files, with the\ngiven temperature — gatherSample","text":"matrix sampled points, temperature","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/gatherSample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"gatherSample collects all sample points, from all files, with the\ngiven temperature — gatherSample","text":"function selects collects rows, files (given) temperature.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getDose.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the values of the input for a series of dose response experiments — getDose","title":"Get the values of the input for a series of dose response experiments — getDose","text":"function finds vector inputs  varies among series experiments part dose response experiment","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getDose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the values of the input for a series of dose response experiments — getDose","text":"","code":"getDose(experiments)"},{"path":"https://icpm-kth.github.io/uqsa/reference/getDose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the values of the input for a series of dose response experiments — getDose","text":"experiments list experimental data dose response experiment","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getDose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the values of the input for a series of dose response experiments — getDose","text":"vector inputs (.e. dose) varies among experiments provided function. name input saved \"comment(dose)\".","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getMCMCPar.html","id":null,"dir":"Reference","previous_headings":"","what":"Selects MCMC scheme specific setup parameters — getMCMCPar","title":"Selects MCMC scheme specific setup parameters — getMCMCPar","text":"MCMC scheme uses transition kernel. function returns parameters transition kernel. Better parameters make Markov chain perform better (.e. lower auto-correlation).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getMCMCPar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selects MCMC scheme specific setup parameters — getMCMCPar","text":"","code":"getMCMCPar(prePar, preDelta, p = 0.05, sfactor = 0.1, delta = 0.01, num = 1)"},{"path":"https://icpm-kth.github.io/uqsa/reference/getMCMCPar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selects MCMC scheme specific setup parameters — getMCMCPar","text":"prePar sample parameters pre-Calibration preDelta distance values (scores) parameters p fraction (top scoring) sampled points base Sigma sfactor scales Sigma delta ABC threshold num number different starting parameter vectors.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getMCMCPar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selects MCMC scheme specific setup parameters — getMCMCPar","text":"Sigma startPar (matrix num rows) list","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time series simulations with experimental data — ggplotTimeSeries","title":"Plot time series simulations with experimental data — ggplotTimeSeries","text":"function plots simulations time series experiments plots experimental data. input provided experiments must differ one vector component.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time series simulations with experimental data — ggplotTimeSeries","text":"","code":"ggplotTimeSeries(   simulations,   experiments,   nrow = NULL,   ncol = NULL,   plot.state = FALSE )"},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time series simulations with experimental data — ggplotTimeSeries","text":"simulations list simualtions output simulator experiments list experiments show.plot boolean variable. Set show.plot=TRUE display plots running funcion, FALSE otherwise","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot time series simulations with experimental data — ggplotTimeSeries","text":"list plots simulations experimental data","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeriesStates.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time series simulation with state variables — ggplotTimeSeriesStates","title":"Plot time series simulation with state variables — ggplotTimeSeriesStates","text":"function plots simulations time series experiments plots experimental data. input provided experiments must differ one vector component.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeriesStates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time series simulation with state variables — ggplotTimeSeriesStates","text":"","code":"ggplotTimeSeriesStates(   simulations,   experiments,   var.names = NULL,   type = \"boxes\",   plot.states = TRUE,   ttf = identity,   xl = \"t\",   yl.func = NULL,   yl.state = NULL,   MLE = 1 )"},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeriesStates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time series simulation with state variables — ggplotTimeSeriesStates","text":"simulations list simualtions output simulator experiments list experiments var.names override rownames simulation results type 'boxes' 'lines' plot.states TRUE (FALSE) - whether plot state variables functions ttf time transformation function - plot ttf(t), t vector experiment's output times, ttf can adjust time vector uneven requires modification plotting, e.g. seq_along. xl x-axis label (time usually) yl.func y-axis-limits function plots, can list ggplot2::ylim() objects, NULL elements automatic mode (neutral element), NA elements trigger tight bounds based quantile-0.1-0.9. yl.state y-axis-limits state variable plots, similar rules yl.func","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeriesStates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot time series simulation with state variables — ggplotTimeSeriesStates","text":"list plots simulations experimental data","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/globalSensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Sensitivity Analysis — globalSensitivity","title":"Global Sensitivity Analysis — globalSensitivity","text":"function performs binning based estimation global sensitivity model's output respect model's parameters. output can prediction model's behaviour scenario interest (parameters, input, intial values, boundary conditions, scheduled events etc.). output models potentially measurable value (\"observable\"). sample-rows output rows must correspond (must model simulation).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/globalSensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Sensitivity Analysis — globalSensitivity","text":"","code":"globalSensitivity(parSample, outputSample, nBins = \"Sturges\")"},{"path":"https://icpm-kth.github.io/uqsa/reference/globalSensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Sensitivity Analysis — globalSensitivity","text":"parSample matrix parameter vectors (rows) outputSample matrix, rows outputs (row-index sample index) nBins number bins, unset defaults default hist function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/globalSensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Sensitivity Analysis — globalSensitivity","text":"sensitivity Si,j outputi respect parameterj","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/gradLogLikelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Default log-likelihood function, gradient — gradLogLikelihood","title":"Default log-likelihood function, gradient — gradLogLikelihood","text":"returns function g(x,simulations), maps simulation results MCMC variables x gradient log(likelihood) values withj respect x. experiments used implicitly; simulations list returned rgsl::r_gsl_odeiv2_outer().","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/gradLogLikelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default log-likelihood function, gradient — gradLogLikelihood","text":"","code":"gradLogLikelihood(model, experiments, parMap = identity, parMapJac = 1)"},{"path":"https://icpm-kth.github.io/uqsa/reference/gradLogLikelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default log-likelihood function, gradient — gradLogLikelihood","text":"experiment compared tp simulation results","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/gradLogLikelihoodFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Default log-likelihood function, gradient — gradLogLikelihoodFunc","title":"Default log-likelihood function, gradient — gradLogLikelihoodFunc","text":"returns function g(x,simulations), maps simulation results MCMC variables x gradient log(likelihood) values withj respect x. experiments used implicitly; simulations list returned rgsl::r_gsl_odeiv2_outer().","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/gradLogLikelihoodFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default log-likelihood function, gradient — gradLogLikelihoodFunc","text":"","code":"gradLogLikelihoodFunc(   model,   experiments,   parMap = identity,   parMapJac = function(x) {      diag(1, length(x))  } )"},{"path":"https://icpm-kth.github.io/uqsa/reference/gradLogLikelihoodFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default log-likelihood function, gradient — gradLogLikelihoodFunc","text":"experiment compared tp simulation results","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/gradLog_NormalPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradient of the logarithm of a normal prior — gradLog_NormalPrior","title":"Gradient of the logarithm of a normal prior — gradLog_NormalPrior","text":"makes function returns grad(log(dprior(x))) returned function implictly remembers parameters normal distribution.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/gradLog_NormalPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradient of the logarithm of a normal prior — gradLog_NormalPrior","text":"","code":"gradLog_NormalPrior(mean = 0, sd = 1)"},{"path":"https://icpm-kth.github.io/uqsa/reference/gradLog_NormalPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gradient of the logarithm of a normal prior — gradLog_NormalPrior","text":"mean vector mu values sd vector standard deviation values","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/gradLog_NormalPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gradient of the logarithm of a normal prior — gradLog_NormalPrior","text":"g(x) closure remembers mean sd creation","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/grapes-has-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"checks whether a variable has the named attributes — %has%","title":"checks whether a variable has the named attributes — %has%","text":"checks whether variable named attributes","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/grapes-has-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checks whether a variable has the named attributes — %has%","text":"","code":"var %has% attrNames"},{"path":"https://icpm-kth.github.io/uqsa/reference/grapes-has-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checks whether a variable has the named attributes — %has%","text":"var variable check attributes attrNames named attributes","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/grapes-has-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checks whether a variable has the named attributes — %has%","text":"TRUE attributes present","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/grapes-otherwise-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"This function can be used to specify default values — %otherwise%","title":"This function can be used to specify default values — %otherwise%","text":"attributes missing, base::attr() function returns NULL. cases function can used find alternative value one expression: attr(x,\"dim\") %otherwise% length(x)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/grapes-otherwise-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function can be used to specify default values — %otherwise%","text":"","code":"a %otherwise% b"},{"path":"https://icpm-kth.github.io/uqsa/reference/grapes-otherwise-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function can be used to specify default values — %otherwise%","text":"value check NULL b value substitute","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/grapes-otherwise-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function can be used to specify default values — %otherwise%","text":", b NULL","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/importReactionsSSA.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","title":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","text":"translates Reaction network specific form required GillespieSSA2","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/importReactionsSSA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","text":"","code":"importReactionsSSA(model)"},{"path":"https://icpm-kth.github.io/uqsa/reference/importReactionsSSA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","text":"model model, represented list data.frames SBtab content","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/importReactionsSSA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","text":"list GillespieSSA2::reaction items","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"SBtab Document set tables represent reactions, compounds, parameters, measured data correspond simulations model certain input conditions initial values.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"","code":"import_experiments(modelName = NULL, SBtabDir)"},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"modelName (string) functions model prefix SBtabDir (string) local directory contains tsv files (SBtab content)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"list simulation experiments (data corresponding simulation)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"function assumes information stored series tsv files. content imported using SBtabVFGEN package. data contents reorganized list simulation experiments (initial values, measurement time points, etc.)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"function uses SBtabVFGEN read series tsv files, containing one systems biology table together create model (Reactions, Parameters, etc.). model converted vfgen compatible file. file processed vfgen system call create source code R (deSolve) C (GSL solvers).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"","code":"import_from_SBtab(SBtabDir)"},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"SBtabDir directory contains `.tsv` files (SBtab content)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"model list data.frames, one per tsv file,     Document title attached comment attribute:     comment(model) = Document Title","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"requires vfgen installed (https://github.com/WarrenWeckesser/vfgen) - R package. SBtab particular convention structure tables (sbtab.net)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"","code":"model <- import_from_SBtab(\"./model\") #> Warning: cannot open file './model/': No such file or directory #> Error in file(con, \"r\"): cannot open the connection  comment(model) #> Error in comment(model): object 'model' not found  source(\"model.R\") #> Warning: cannot open file 'model.R': No such file or directory #> Error in file(filename, \"r\", encoding = encoding): cannot open the connection"},{"path":"https://icpm-kth.github.io/uqsa/reference/loadSample_mpi.html","id":null,"dir":"Reference","previous_headings":"","what":"This function merges mpi-samples into one — loadSample_mpi","title":"This function merges mpi-samples into one — loadSample_mpi","text":"using MPI, save sample immediately file, rank saves file. function collects smaller samples one. samples saved saveRDS().","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/loadSample_mpi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function merges mpi-samples into one — loadSample_mpi","text":"","code":"loadSample_mpi(files)"},{"path":"https://icpm-kth.github.io/uqsa/reference/loadSample_mpi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function merges mpi-samples into one — loadSample_mpi","text":"files files individual samples stored","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/loadSample_mpi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function merges mpi-samples into one — loadSample_mpi","text":"one matrix samples concatenated.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/loadSubSample_mpi.html","id":null,"dir":"Reference","previous_headings":"","what":"This function merges mpi-samples into one — loadSubSample_mpi","title":"This function merges mpi-samples into one — loadSubSample_mpi","text":"using MPI, save sample immediately file, rank saves file. function collects smaller samples one. samples saved saveRDS().","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/loadSubSample_mpi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function merges mpi-samples into one — loadSubSample_mpi","text":"","code":"loadSubSample_mpi(   files,   size = NA,   selection = NA,   mc.cores = parallel::detectCores() )"},{"path":"https://icpm-kth.github.io/uqsa/reference/loadSubSample_mpi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function merges mpi-samples into one — loadSubSample_mpi","text":"files files individual samples stored size sub sample size, set, whole sample returned selection integer index vector logical vector indicating temperatures return: betaselection returned, decreasing order beta. mc.cores defaults total number cores, can reduced option.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/loadSubSample_mpi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function merges mpi-samples into one — loadSubSample_mpi","text":"list matrices, temperature, concatenated.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/log10ParMap.html","id":null,"dir":"Reference","previous_headings":"","what":"LOG10 parameter mapping used by the MCMC module — log10ParMap","title":"LOG10 parameter mapping used by the MCMC module — log10ParMap","text":"map used simulator transform sampling variables ODE-model porameters.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/log10ParMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LOG10 parameter mapping used by the MCMC module — log10ParMap","text":"","code":"log10ParMap(parMCMC)"},{"path":"https://icpm-kth.github.io/uqsa/reference/log10ParMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LOG10 parameter mapping used by the MCMC module — log10ParMap","text":"parMCMC sampling variables (numeric vector)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/log10ParMapJac.html","id":null,"dir":"Reference","previous_headings":"","what":"LOG10 parameter mapping, jacobian — log10ParMapJac","title":"LOG10 parameter mapping, jacobian — log10ParMapJac","text":"map used simulator transform sampling variables ODE-model porameters. often calculate sensitivites, alos need jacobian map, due chain rule differentiation.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/log10ParMapJac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LOG10 parameter mapping, jacobian — log10ParMapJac","text":"","code":"log10ParMapJac(parMCMC)"},{"path":"https://icpm-kth.github.io/uqsa/reference/log10ParMapJac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LOG10 parameter mapping, jacobian — log10ParMapJac","text":"parMCMC sampling variables (numeric vector)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/logLikelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Default log-likelihood function — logLikelihood","title":"Default log-likelihood function — logLikelihood","text":"returns function f(simulations), maps simulation results log(likelihood) values. experiments used implicitly; simulations list returned rgsl::r_gsl_odeiv2_outer().","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/logLikelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default log-likelihood function — logLikelihood","text":"","code":"logLikelihood(experiments)"},{"path":"https://icpm-kth.github.io/uqsa/reference/logLikelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default log-likelihood function — logLikelihood","text":"experiment compared tp simulation results","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/logLikelihoodFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Default log-likelihood function — logLikelihoodFunc","title":"Default log-likelihood function — logLikelihoodFunc","text":"returns function f(simulations), maps simulation results log(likelihood) values. experiments used implicitly; simulations list returned rgsl::r_gsl_odeiv2_outer().","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/logLikelihoodFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default log-likelihood function — logLikelihoodFunc","text":"","code":"logLikelihoodFunc(experiments, perExpLLF = NULL, simpleUserLLF = NULL)"},{"path":"https://icpm-kth.github.io/uqsa/reference/logLikelihoodFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default log-likelihood function — logLikelihoodFunc","text":"perExpLLF (optional) user supplied function interface perExpLLF(p,s,e), p parameters, s simulations e experiments (data). Supply function experiments need normalized experiments (complex cases). simpleUserLLF (optional) user supplied function used instead default sum ((y-h)/stdv)^2 terms. interface : simpleUserLLF(y,h,stdv), N-M-matrix N dimensionality model output M number data time-points.  , y t(experiments[[]]$outputValues) may contain NA values. experiment compared tp simulation results","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/logLikelihoodFunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default log-likelihood function — logLikelihoodFunc","text":"llf(p), closure (function) mcmc-variable: parMCMC; returns scalar logLikelihood value","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeAcceptanceProbability.html","id":null,"dir":"Reference","previous_headings":"","what":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","title":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","text":"returned closure needs sampling variables (parABC) inputand calculates probability accepting Markov chainmoves.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeAcceptanceProbability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","text":"","code":"makeAcceptanceProbability(   experiments,   modelName,   getAcceptanceProbability,   parMap = identity )"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeAcceptanceProbability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","text":"experiments list experiments modelName annotated string, model name model file comment getAcceptanceProbability R function mape results simulation experimental data acceptance probability parMap optional mapping sampling parameters (parABC) model parameters (e.g. rescaling,re-ordering).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeAcceptanceProbability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","text":"function calculates probabilities given parABC input; implicitly uses argiments function.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"function takes series SBtab tables, returned SBtabVFGEN::sbtab_from_tsv() creates GillespieSSA2 reactions . Reactions arfe made pairwise, forward backward reaction pairs. backward reaction exist, list item NULL. valid set reactions can obtained !.null(reactions)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"","code":"makeGillespieModel(SBtab, LV = NULL, strip.null = TRUE)"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"SBtab series tables returned sbtab_from_tsv() LV product Avogadro's constant L system's volume V litres; unspecified information retrieved SBtab files, missing assume 1µm³ volume (approximate sizes bacteria synapses)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"list reactions","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"","code":"# model.tsv <- dir(pattern=\"[.]tsv$\")  # model.sbtab <- SBtabVFGEN::sbtab_from_tsv(model.tsv)  # reactions <- makeGillespieModel(model.sbtab)  # l <- is.null(reactions)  # model.ssa2 <- reactions[!l]"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeIndepCopula.html","id":null,"dir":"Reference","previous_headings":"","what":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","title":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","text":"Covers (simpler) special case prior(x) iid uniform. return value structure value fitCopula().","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeIndepCopula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","text":"","code":"makeIndepCopula(ll, ul)"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeIndepCopula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","text":"ll ll[] lower limit random variable x[] ul upper limit, analogous ll.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeIndepCopula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","text":"list : copula, U, Z, Y entries.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjective.html","id":null,"dir":"Reference","previous_headings":"","what":"creates Objective functions from ingredients — makeObjective","title":"creates Objective functions from ingredients — makeObjective","text":"returned objective function one argument: ABC variables shall mapped ODE-model parameters.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates Objective functions from ingredients — makeObjective","text":"","code":"makeObjective(   experiments,   modelName = NULL,   distance,   parMap = identity,   simulate = NULL )"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates Objective functions from ingredients — makeObjective","text":"experiments list simulation experiments modelName model storage file comment distance function calculates ABC scores parMap function transforms ABC variables acceptable model parameters simulate closure simulates model","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjective.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"creates Objective functions from ingredients — makeObjective","text":"objective function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjectiveSSA.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that creates the objective function — makeObjectiveSSA","title":"Function that creates the objective function — makeObjectiveSSA","text":"Given parameter set, function computes distance experimental data simulated data (coresponding parameter input).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjectiveSSA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that creates the objective function — makeObjectiveSSA","text":"","code":"makeObjectiveSSA(   experiments,   model,   parNames,   distance,   parMap = identity,   Phi,   reactions,   nStochSim = 1,   parameters_from_expressions = NULL )"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjectiveSSA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that creates the objective function — makeObjectiveSSA","text":"experiments list experiments parNames names (biological) parameters model distance user supplied function calculates distance simulation data interface distance(simulation, data, errVal), errVal estimate measuremnet noise (e.g. standard deviation), needed function. parMap function translates ABC variables (parABC) something model accept. Phi Volume reactions list encodes reactions GillespieSSA2 nStochSim number stochastic simulations average ","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjectiveSSA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that creates the objective function — makeObjectiveSSA","text":"closure objective function implicitly depends arguments function explicitly ABC parameters parABC.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":null,"dir":"Reference","previous_headings":"","what":"find the coefficients in a formula — match.coefficients","title":"find the coefficients in a formula — match.coefficients","text":"reaction formula reactants products, separated <=>, reactants left products right (convention). plus separated list reacting compounds modifiers, optional coefficients, e.g.: + 2 B <=> AB2","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find the coefficients in a formula — match.coefficients","text":"","code":"match.coefficients(chrv)"},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find the coefficients in a formula — match.coefficients","text":"chrv character vector returned parse.formula","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find the coefficients in a formula — match.coefficients","text":"coefficients, vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"find the coefficients in a formula — match.coefficients","text":"formula split left right side, function determines coefficients. example, function returns c(1,2) left side 1 right side.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find the coefficients in a formula — match.coefficients","text":"","code":"lapply(uqsa:::parse.formula(\"A + 2*B <=> AB2\"),uqsa:::match.coefficients) #> Warning: NAs introduced by coercion #> $reactants #> [1]  1 NA #>  #> $products #> [1] 1 #>"},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the variable names in a formula — match.names","title":"Find the variable names in a formula — match.names","text":"reaction formula reactants products, separated <=>, reactants left products right (convention). plus separated list reacting compounds modifiers, optional coefficients, e.g.: + 2 B <=> AB2","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the variable names in a formula — match.names","text":"","code":"match.names(chrv)"},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the variable names in a formula — match.names","text":"chrv character vector returned parse.formula","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the variable names in a formula — match.names","text":"coefficients, vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the variable names in a formula — match.names","text":"formula split left right side, function determines names. example, function returns c(\"\",\"B\") left side \"AB2\" right side.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the variable names in a formula — match.names","text":"","code":"lapply(uqsa:::parse.formula(\"A + 2*B <=> AB2\"),uqsa:::match.names) #> $reactants #> [1] \"A\"   \"2*B\" #>  #> $products #> [1] \"AB2\" #>  lapply(uqsa:::parse.formula(\"A + 2*B <=> AB2\"),uqsa:::match.names) #> $reactants #> [1] \"A\"   \"2*B\" #>  #> $products #> [1] \"AB2\" #>"},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo — mcmc","title":"Markov Chain Monte Carlo — mcmc","text":"function creates MCMC function given set experiments. Markov chains communication one created using mechanism.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo — mcmc","text":"","code":"mcmc(update)"},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo — mcmc","text":"update update function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo — mcmc","text":"M(initiPar,N), function initial starting values number Markov chain steps","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo — mcmc","text":"algorithm entirely determined update function.  intermediate values updates requires aside simulation results attributes MCMC variable: parMCMC. update function: update(parGiven) -> parUpdate depends given parameters, dependencies either implicit (closure) attributes parGiven.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcInit.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the Markov chain — mcmcInit","title":"Initialize the Markov chain — mcmcInit","text":"function must append required attributes MCMC varible, Markov chain update correctly.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcInit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the Markov chain — mcmcInit","text":"","code":"mcmcInit(   beta,   parMCMC,   simulate,   logLikelihood,   dprior,   gradLogLikelihood = NULL,   gprior = NULL,   fisherInformation = NULL )"},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcInit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the Markov chain — mcmcInit","text":"beta inverse temperature Markov chain (parallel tempering) parMCMC plain starting value Markov chain logLikelihood function maps simulations logLikelihood values gradLogLikelihood gradient function logLikelihood (optional) -- algorithm requires fisherInformation function calculates Fisher Information matrix","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcInit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the Markov chain — mcmcInit","text":"starting parameter vector, attributes.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcUpdate.html","id":null,"dir":"Reference","previous_headings":"","what":"This function proposes an MCMC candidate variable, and either accepts or rejects the candidate — mcmcUpdate","title":"This function proposes an MCMC candidate variable, and either accepts or rejects the candidate — mcmcUpdate","text":"function receives current MCMC variable, calculates possible successor returns case acceptance. returns (old) current state upon rejection candidate.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcUpdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function proposes an MCMC candidate variable, and either accepts or rejects the candidate — mcmcUpdate","text":"","code":"mcmcUpdate(   simulate,   experiments,   model,   logLikelihood,   dprior,   gradLogLikelihood = NULL,   gprior = NULL,   fisherInformation = NULL,   fisherInformationPrior = NULL )"},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcUpdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function proposes an MCMC candidate variable, and either accepts or rejects the candidate — mcmcUpdate","text":"simulate function simulates model given parMCMC experiments list experiments (simulation instructions) model list model functions logLikelihood function calculates log-likelihood values given parMCMC dprior prior density function gradLogLikelihood function calculates gradient log-likelihood given parMCMC gprior gradient prior density fisherInformation function calculates approximates Fisher information matrices fisherInformationPrior constant matrix, prior distributions fisher information","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcUpdate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function proposes an MCMC candidate variable, and either accepts or rejects the candidate — mcmcUpdate","text":"function returns possibly updated states Markov chain","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcUpdate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This function proposes an MCMC candidate variable, and either accepts or rejects the candidate — mcmcUpdate","text":"Markov chain current state (MCMC variable, often x literature), context sampling MCMC variables used parameters scientific model sort (often state variables, also x, y). call variables parMCMC (parABC), parCurrent|Given|Proposal, similar.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmc_mpi.html","id":null,"dir":"Reference","previous_headings":"","what":"The MPI version of the mcmc function — mcmc_mpi","title":"The MPI version of the mcmc function — mcmc_mpi","text":"version MCMC function returns Markov chain closure assumes bein run MPI context: R launched using runmpi Rmpi package installed. chains shall communicate using provided comm.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmc_mpi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The MPI version of the mcmc function — mcmc_mpi","text":"","code":"mcmc_mpi(   update,   comm,   swapDelay = 0,   swapFunc = pbdMPI_bcast_reduce_temperatures )"},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmc_mpi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The MPI version of the mcmc function — mcmc_mpi","text":"update update function comm mpi comm function use send/receive operations swapDelay swaps attempted every 2*swapDelay+1 iterations","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmc_mpi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The MPI version of the mcmc function — mcmc_mpi","text":"mcmc closure m(parMCMC,N,eps) implicitly uses supplied update function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/observable.mean.in.bin.html","id":null,"dir":"Reference","previous_headings":"","what":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","title":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","text":"model parameters binned histogram function. bin one parameters almost fixed (varies much less parameters full range). function returns mean observable bin, vector.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/observable.mean.in.bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","text":"","code":"observable.mean.in.bin(id, outputSample)"},{"path":"https://icpm-kth.github.io/uqsa/reference/observable.mean.in.bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","text":"id integer vector identifies bin parameter vector falls create row outputSample (output stems model simulation parameters). id length outputSample rows. outputSample matrix output values, one output vector per row (different rows results different parameter values)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/observable.mean.in.bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","text":"Mi,j mean observablej bini","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parUpdate.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates Parameter Values — parUpdate","title":"Updates Parameter Values — parUpdate","text":"valid ABC update conditions (successful simulation) parameters updated new values.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parUpdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates Parameter Values — parUpdate","text":"","code":"parUpdate(objectiveFunction, curPar, canPar, curDelta, curPrior, delta, dprior)"},{"path":"https://icpm-kth.github.io/uqsa/reference/parUpdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates Parameter Values — parUpdate","text":"objectiveFunction function , given (vectorial) parameter input, simulates model, outputs distance experimental data data simulated model parameter provided input curPar current parameter values (ABC samples ) canPar candidate parameter values (MCMC) curDelta current distance data simulation, MCMC chain yet reached point threshold (delta), can accepted new current state chain. curPrior current Prior values given curPar delta distance threshold ABC dprior prior probability density function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parUpdate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates Parameter Values — parUpdate","text":"updated values curPar, curDelta, curPrior","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":null,"dir":"Reference","previous_headings":"","what":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"function assumes kinetic Law mass action kinetics. function helps converting units ODE units work stochastic simulations. Converting units general formula (Michaelis Menten, Hill kinetics, etc.) difficult dubious stochastic simulations.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"","code":"parameter.from.kinetic.law(kineticLaw, tab)"},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"kineticLaw string mathematical formula tab SBtab document, returned SBtabVFGEN::sbtab_from_tsv()","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"parameter value, unit attribute","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"reasons, functions assumes: kf**B*[...] first word kf representing reaction rate coefficient. Given SBtab document, function finds value () unit coefficient. coefficient can defined fixed constant, parameter, algebraic expression document. important attribute unit.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits a formula into a left and right side — parse.formula","title":"Splits a formula into a left and right side — parse.formula","text":"function splits reaction formulka apart parts, removing whitespace side: \"+ 2 B <=> AB2\" split list two entries","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits a formula into a left and right side — parse.formula","text":"","code":"parse.formula(reactionFormula)"},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits a formula into a left and right side — parse.formula","text":"string reactionFormula","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits a formula into a left and right side — parse.formula","text":"named list forward component backward component, entry contains character vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.formula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Splits a formula into a left and right side — parse.formula","text":"","code":"list$reactants == c(\"A\",\"2*B\") list$products == c(\"AB2\")"},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Find forward and backward component in a reaction kinetic — parse.kinetic","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"reaction kinetic can almost function, general possible tell apart part kinetic law .","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"","code":"parse.kinetic(reactionKinetic)"},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"reactionKinetic string kinetic law reaction","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"character vector components named 'forward' 'backward'","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"mass action kinetics, positive reaction rate coefficients, expressions mostly look like :   functions splits -, none present, reaction assumed irreversible. general setting (- split wrong), splitting done hand complex rules.","code":"kf*prod(reactants.concentration) - kb*prod(product.concentrations)"},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"","code":"uqsa:::parse.kinetic(\"kf*A*B-kb*C\") #>  forward backward  #> \"kf*A*B\"   \"kb*C\"   uqsa:::parse.kinetic(\"kf*A*B\") #>  forward backward  #> \"kf*A*B\"      \"0\"   uqsa:::parse.kinetic(\"kf*A/(Km+A)\") #>       forward      backward  #> \"kf*A/(Km+A)\"           \"0\""},{"path":"https://icpm-kth.github.io/uqsa/reference/pbdMPI_bcast_reduce_temperatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Broadcast to other ranks and swap temperatures with any of them — pbdMPI_bcast_reduce_temperatures","title":"Broadcast to other ranks and swap temperatures with any of them — pbdMPI_bcast_reduce_temperatures","text":"Using function, two ranks swap.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/pbdMPI_bcast_reduce_temperatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Broadcast to other ranks and swap temperatures with any of them — pbdMPI_bcast_reduce_temperatures","text":"","code":"pbdMPI_bcast_reduce_temperatures(i, B, LL, H, r, comm, cs)"},{"path":"https://icpm-kth.github.io/uqsa/reference/pbdMPI_bcast_reduce_temperatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Broadcast to other ranks and swap temperatures with any of them — pbdMPI_bcast_reduce_temperatures","text":"MCMC iteration B inverse temperature (parallel tempering) LL log-likelihood value current point H algorithm's step size (often called epsilon literature) r MPI rank comm MPI communicator cs MPI comm size","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/pbdMPI_bcast_reduce_temperatures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Broadcast to other ranks and swap temperatures with any of them — pbdMPI_bcast_reduce_temperatures","text":"Given current log-likelihood, temperature step-size, funcion broadcast log-likelihood value ranks can decide swap temperatures root process. Root cycled around ranks (round-robin). rank allowed make offer swap. root process decides rank swap .","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/pbdMPI_swap_temperatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Communicate with other ranks and swap beta — pbdMPI_swap_temperatures","title":"Communicate with other ranks and swap beta — pbdMPI_swap_temperatures","text":"Given current log-likelihood, temperature step-size, decides whether send receive variables neighboring process swap temperatures .","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/pbdMPI_swap_temperatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Communicate with other ranks and swap beta — pbdMPI_swap_temperatures","text":"","code":"pbdMPI_swap_temperatures(i, B, LL, H, r, comm, cs)"},{"path":"https://icpm-kth.github.io/uqsa/reference/pbdMPI_swap_temperatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Communicate with other ranks and swap beta — pbdMPI_swap_temperatures","text":"MCMC iteration B inverse temperature (parallel tempering) LL log-likelihood value current point H algorithm's step size (often called epsilon literature) r MPI rank comm MPI communicator cs MPI comm size","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/pbdMPI_swap_temperatures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Communicate with other ranks and swap beta — pbdMPI_swap_temperatures","text":"one two communicating ranks allowed make decision swap, random variable used make decision. rank make swap decision needs determined somehow. Currently alternate reposibility based current iteration .","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotDoseResponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot dose response simulations with experimental data — plotDoseResponse","title":"Plot dose response simulations with experimental data — plotDoseResponse","text":"function plots simulations one dose response experiment plots experimental data.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotDoseResponse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot dose response simulations with experimental data — plotDoseResponse","text":"","code":"plotDoseResponse(simulations, experiments, dose, show.plot = TRUE)"},{"path":"https://icpm-kth.github.io/uqsa/reference/plotDoseResponse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot dose response simulations with experimental data — plotDoseResponse","text":"simulations list simualtions output simulator experiments list experimental data dose response experiment dose vector dose values plot x axis show.plot boolean variable. Set show.plot=TRUE display plots running funcion, FALSE otherwise","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotDoseResponse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot dose response simulations with experimental data — plotDoseResponse","text":"plot simulations experimental data","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotSimualtionsFromSBtab.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","title":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","text":"function imports model experimental data saved SBtab files, simualtes model initial conditions input corresponding experiments, plots simulations together corresponding experimental data. currently works one dimensional output.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotSimualtionsFromSBtab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","text":"","code":"plotSimualtionsFromSBtab(   SBtabDir,   paramVal,   plotDir = NULL,   width = 15,   heigth = 10 )"},{"path":"https://icpm-kth.github.io/uqsa/reference/plotSimualtionsFromSBtab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","text":"SBtabDir directory contains .tsv files (SBtab content) paramVal parameter vector model simulated plotDir directory plots saved .pdf .RData variables width width plot window heigth heigth plot window","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotSimualtionsFromSBtab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","text":"vector R plot objects","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotTimeSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time series simulations with experimental data — plotTimeSeries","title":"Plot time series simulations with experimental data — plotTimeSeries","text":"function plots simulations time series experiments plots experimental data. input provided experiments must differ one vector component.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotTimeSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time series simulations with experimental data — plotTimeSeries","text":"","code":"plotTimeSeries(simulations, experiments, show.plot = TRUE)"},{"path":"https://icpm-kth.github.io/uqsa/reference/plotTimeSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time series simulations with experimental data — plotTimeSeries","text":"simulations list simualtions output simulator experiments list experiments show.plot boolean variable. Set show.plot=TRUE display plots running funcion, FALSE otherwise","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotTimeSeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot time series simulations with experimental data — plotTimeSeries","text":"list plots simulations experimental data","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/preCalibration.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine a starting value for ABC's delta — preCalibration","title":"Determine a starting value for ABC's delta — preCalibration","text":"ABC settings model solution compared data acceptance threshold: delta. -pre calibration function attempts adjust delta value.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/preCalibration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine a starting value for ABC's delta — preCalibration","text":"","code":"preCalibration(objectiveFunction, npc = 1000, rprior, rep = 1)"},{"path":"https://icpm-kth.github.io/uqsa/reference/preCalibration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine a starting value for ABC's delta — preCalibration","text":"objectiveFunction function , given (vectorial) parameter input, simulates model, outputs distance experimental data data simulated model parameter provided input npc sample size pre-calibration rprior function generates random ABC variables, distributed according prior rep number repetitions preCalibration process","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/preCalibration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine a starting value for ABC's delta — preCalibration","text":"list entries preDelta prePar, final values calibration run","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":null,"dir":"Reference","previous_headings":"","what":"propensity creates a propensity formula — propensity","title":"propensity creates a propensity formula — propensity","text":"given custom math expressions needed calculate propensity, propensity coefficient kinetic law reaction, function makes string can used GillespieSSA2.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"propensity creates a propensity formula — propensity","text":"","code":"propensity(conv.coeff, kinetic.law, rExpressions)"},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"propensity creates a propensity formula — propensity","text":"conv.coeff propensity conversion coefficient: conv.coeff*kinetic.law = propensity function kinetic.law kinetic law reaction (used ODEs) rExpressions named math expressions appear kinetic.law reaction","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"propensity creates a propensity formula — propensity","text":"string representation propensity function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"propensity creates a propensity formula — propensity","text":"propensity coefficient translates ","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rCopulaPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","title":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","text":"returned function generates n random vectors, rows matrix.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rCopulaPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","text":"","code":"rCopulaPrior(Copula)"},{"path":"https://icpm-kth.github.io/uqsa/reference/rCopulaPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","text":"Copula return value fitCopula()","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rCopulaPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","text":"matrix random values","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"rNormalPrior returns a random vector generator — rNormalPrior","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"return value function generates random vectors size mean sd multivariate normal distribution independent components mean \"mean\" standard deviation \"sd\". random vectors returned n rows matrix, n argument returned function.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"","code":"rNormalPrior(mean, sd)"},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"mean mean random variables (vector) sd standard deviation random variables (size vector mean)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"independentent multivariate normal random vector generating function: rprior(n), n requested number vectors (rows)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"","code":"rnp<-rNormalPrior(mean=c(0,1,2),sd=c(1,2,3)) rnp(12) #>              [,1]       [,2]       [,3] #>  [1,]  1.27011263  4.2196139 -1.3982231 #>  [2,]  0.03569833  0.3562522  3.2984120 #>  [3,]  0.30056596 -3.0362609  0.9940135 #>  [4,] -0.06809075  1.1211444  2.8580883 #>  [5,]  0.03658404  2.7517555  2.4002424 #>  [6,]  0.73472914  3.1590940  4.8340211 #>  [7,]  0.14074086  1.0017077 -1.9181543 #>  [8,] -1.49778289 -0.3589183 -0.3197492 #>  [9,] -1.33055084  4.5408203  2.2225324 #> [10,]  1.98575252  0.8637446  3.5296325 #> [11,] -0.47783918 -1.6135621  5.5584975 #> [12,]  0.33797900  3.0441625  2.0277103"},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"rUniformPrior returns a random vector generator — rUniformPrior","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"return value function generates random vectors size ll ul uniform distribution within limits defined ul ll. random vectors returned n rows matrix, n argument returned function.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"","code":"rUniformPrior(ll, ul)"},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"ll lower limit random variables (vector) ul upper limit random variables (size vector ll)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"uniform random vector generating function: runiform(n), n requested number vectors (rows)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"","code":"rup<-rUniformPrior(ll=c(0,1,2),ul=c(1,2,3)) rup(12) #>            [,1]     [,2]     [,3] #>  [1,] 0.9738363 1.049448 2.544795 #>  [2,] 0.9486163 1.274803 2.105027 #>  [3,] 0.4791540 1.657338 2.912692 #>  [4,] 0.1686696 1.846906 2.554982 #>  [5,] 0.2849999 1.560761 2.726603 #>  [6,] 0.2601208 1.392562 2.388528 #>  [7,] 0.1248276 1.264749 2.622141 #>  [8,] 0.3829262 1.532561 2.340387 #>  [9,] 0.2949988 1.225551 2.588251 #> [10,] 0.3564590 1.506615 2.757557 #> [11,] 0.1368868 1.327067 2.645493 #> [12,] 0.7664221 1.095805 2.797792"},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an Experiment using the named ODE Model — runModel","title":"Simulate an Experiment using the named ODE Model — runModel","text":"Simulation experiments consist least initial values state variables, parameter vector, list times solution needs known.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an Experiment using the named ODE Model — runModel","text":"","code":"runModel(experiments, modelName, parABC, parMap = identity)"},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an Experiment using the named ODE Model — runModel","text":"experiments list experiments simulate modelName used find model files functions within file (prefix) parABC matrix column vectors; column contains vector normal parameters (e.g. kinetic params like kf kr) input_parameters (concatenated order). N columns, N simulations performed.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate an Experiment using the named ODE Model — runModel","text":"output function values","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate an Experiment using the named ODE Model — runModel","text":"function use GSL solvers, deSolve [default].  addition, model usually observables: values depend state variables can measured real experiment. modeled output functions. distinguish normal parameters input parameters. Input parameters known subject estimation procedure. Furthermore, meant represent experimental conditions, either direct control experimenter carefully measured. inputs probably different simulation experiment least one value. environment variable set \"C\", function attempt compile file modelName_gvf.c shared library modelName., already exist.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sampleWithNoise.html","id":null,"dir":"Reference","previous_headings":"","what":"(for testing) A non-Copula sampling function as fallback — sampleWithNoise","title":"(for testing) A non-Copula sampling function as fallback — sampleWithNoise","text":"sample suited infer Copula (fitCopula fails), fuction uses much simpler rules re-draw new sample older sample added noise.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sampleWithNoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(for testing) A non-Copula sampling function as fallback — sampleWithNoise","text":"","code":"sampleWithNoise(X, sdf = 0.01, ...)"},{"path":"https://icpm-kth.github.io/uqsa/reference/sampleWithNoise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(for testing) A non-Copula sampling function as fallback — sampleWithNoise","text":"X N×M matrix (N sample size), M number variables (MCMC ABC vars) sdf factor increase decrease standard deviation added noise ... passed base::sample.int() size size returned sample (passed sample.int())","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sampleWithNoise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(for testing) A non-Copula sampling function as fallback — sampleWithNoise","text":"matrix size rows nrow(X) columns.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sampleWithNoise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(for testing) A non-Copula sampling function as fallback — sampleWithNoise","text":"can used testing, cases acceptance low deal low quality sample function work like base::sample, adds small noise. Missing values always removed.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.graph.html","id":null,"dir":"Reference","previous_headings":"","what":"plot the sensitivity matrix — sensitivity.graph","title":"plot the sensitivity matrix — sensitivity.graph","text":"Produce cumulative shaded area plot sensitivity matrix.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot the sensitivity matrix — sensitivity.graph","text":"","code":"sensitivity.graph(   u,   S,   color = hcl.colors(dim(S)[2]),   line.color = hcl.colors(dim(S)[2] + 1),   do.sort = TRUE,   decreasing = FALSE,   title = \"Sensitivity\" )"},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot the sensitivity matrix — sensitivity.graph","text":"u values x-axis plot, named, names put tick-marks S sensitivity matrix returned globalSensitivity(), Si,j respect model output parameter j color list colors use shaded areas, e.g.: rainbow(24) line.color color lines drawn shaded areas .sort parameter sensitivities sorted according mean outputs, parameter sensitivity plotted first, bottom decreasing direction sort, first item sorted list (parameter) plotted first, thus bottom plot title string, written , title","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot the sensitivity matrix — sensitivity.graph","text":"nothing","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Sensitivity Analysis — sensitivity","title":"Global Sensitivity Analysis — sensitivity","text":"function performs binning based estimation global sensitivity model's output respect model's parameters. output can prediction model's behaviour scenario interest (parameters, input, intial values, boundary conditions, scheduled events etc.). output models potentially measurable value (\"observable\"). sample-rows output rows must correspond (must model simulation).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Sensitivity Analysis — sensitivity","text":"","code":"sensitivity(parSample, outputSample, nBins = \"Sturges\")"},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Sensitivity Analysis — sensitivity","text":"parSample matrix parameter vectors (rows) outputSample matrix, rows outputs (row-index sample index) nBins number bins, unset defaults default hist function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Sensitivity Analysis — sensitivity","text":"sensitivity Si,j outputi respect parameterj","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivityEquilibriumApproximation.html","id":null,"dir":"Reference","previous_headings":"","what":"Equilibrium state approximation of the solution sensitivity for ODE systems — sensitivityEquilibriumApproximation","title":"Equilibrium state approximation of the solution sensitivity for ODE systems — sensitivityEquilibriumApproximation","text":"context, sensitivity S(t;x,p) dx(t;p)/dp, x(t;p) parameterized solution initial value problem ordinary differential equations t independent varibale: x'=f(t,x;p), «'» indicates derivative respect t. cases proxy variable p, e.g. r=log(p), chain rule applies. Similarly, also output sensitivity function g(x(t;p)).  equilibrium approximation exact state-variable values close equilibrium point q(p) (fixed-point): f(t,q(p);p)=0.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivityEquilibriumApproximation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equilibrium state approximation of the solution sensitivity for ODE systems — sensitivityEquilibriumApproximation","text":"","code":"sensitivityEquilibriumApproximation(   experiments,   model,   parMap = identity,   parMapJac = 1 )"},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivityEquilibriumApproximation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equilibrium state approximation of the solution sensitivity for ODE systems — sensitivityEquilibriumApproximation","text":"experiments list simulation experiments model list functions model experiments applicable parMap map transform parMCMC p, parameters model accepts simulations equivalent list simulation results, one parameter vector parMCMC parameters used Markov chain Monte Carlo MC variable","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivityEquilibriumApproximation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equilibrium state approximation of the solution sensitivity for ODE systems — sensitivityEquilibriumApproximation","text":"function S(parMCMC) -> simulations_with_sensitivity, attaches state sensitivity matrix array length(x) × length(p) × length(t) simulations (solutions ODE).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivityEquilibriumApproximation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Equilibrium state approximation of the solution sensitivity for ODE systems — sensitivityEquilibriumApproximation","text":"state sensitivity matrix:   param raw model parameters. matrix calculated intermediate transformed :   parMCMC Markov chain variable usually shorter param typically sample model's parameters. model parameters may known, may input parameters intrinsic model related experimental setup (parMCMC param different). transformation requires output function jacobian (funcJac) parameter jacobian (funcJacp) model variable. transform parameters , chain rule requests parMapJacl,k = d paraml / d parMCMCk Typically, sensitivity needs known different time-points t_k. 3-dimensional array Si,j,k, index k corrsponds time t_k; closer x(t_k) equilibrium, better approximation; near initial state, sensitivity also correct (intermediate time-span approximate). function requires pracma::expm work. f","code":"d state(time[k],state, param)[i] S[i,j,k] = --------------------------------  ,            d param[j] d func(time[k], state, c(parMap(parMCMC),input))[i] Sh[i,j,k] = --------------------------------------------------             d parMCMC[j]"},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivityEquilibriumApproximation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equilibrium state approximation of the solution sensitivity for ODE systems — sensitivityEquilibriumApproximation","text":"","code":"if (FALSE) { y <- simulate(parMCMC) S <- sensitivityEquilibriumApproximation(experiments, model, parMap, parMapJac) y <- S(parMap,y) }"},{"path":"https://icpm-kth.github.io/uqsa/reference/simc.html","id":null,"dir":"Reference","previous_headings":"","what":"This creates a closure that simulates the model, similar to simulator.c — simc","title":"This creates a closure that simulates the model, similar to simulator.c — simc","text":"shorter alternative simulator.c (C backend).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This creates a closure that simulates the model, similar to simulator.c — simc","text":"","code":"simc(experiments, modelName, parMap = identity)"},{"path":"https://icpm-kth.github.io/uqsa/reference/simc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This creates a closure that simulates the model, similar to simulator.c — simc","text":"experiments list experiments simulate: inital values, inputs, time vectors, initial times modelName string (optional comment indicating .file) points model simulate parMap model called parMap(parABC); parameter transformation can happen . parABC parameters model, subject change parMap.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This creates a closure that simulates the model, similar to simulator.c — simc","text":"closure returns model's output given parameter vector, approximate sensitivity matrices, state variable, function, time-point, parameter vector.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This creates a closure that simulates the model, similar to simulator.c — simc","text":"returns closure around: - experiments, - model, - parameter mapping returned function depends parABC (sampling parameters). simulation done suing rgsl backend. version function use parallel package add noise simulations.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This creates a closure that simulates the model, similar to simulator.c — simc","text":"","code":"#  model.sbtab <- SBtabVFGEN::sbtab_from_tsv(dir(pattern=\"[.]tsv$\"))  #  experiments <- SBtabVFGEN::sbtab.data(model.sbtab)  #  parABC <- SBtabVFGEN::sbtab.quantity(model.sbtab$Parameter)   #  modelName <- checkModel(\"<insert_model_name>_gvf.c\")  #  simulate <- simulator.c(experiments, modelName,  parABC)  #  yf <- sim(parABC)"},{"path":"https://icpm-kth.github.io/uqsa/reference/simcf.html","id":null,"dir":"Reference","previous_headings":"","what":"This creates a closure that simulates the model, similar to simulator.c — simcf","title":"This creates a closure that simulates the model, similar to simulator.c — simcf","text":"shorter alternative simulator.c (C backend).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This creates a closure that simulates the model, similar to simulator.c — simcf","text":"","code":"simcf(experiments, modelName, parMap = identity)"},{"path":"https://icpm-kth.github.io/uqsa/reference/simcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This creates a closure that simulates the model, similar to simulator.c — simcf","text":"experiments list experiments simulate: inital values, inputs, time vectors, initial times modelName string (optional comment indicating .file) points model simulate parMap model called parMap(parABC); parameter transformation can happen . parABC parameters model, subject change parMap.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This creates a closure that simulates the model, similar to simulator.c — simcf","text":"closure returns model's output given parameter vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simcf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This creates a closure that simulates the model, similar to simulator.c — simcf","text":"returns closure around: - experiments, - model, - parameter mapping returned function depends parABC/parMCMC (sampling parameters). simulation done suing rgsl backend. version function use parallel package add noise simulations. also perform sensitivty analysis.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simcf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This creates a closure that simulates the model, similar to simulator.c — simcf","text":"","code":"#  model.sbtab <- SBtabVFGEN::sbtab_from_tsv(dir(pattern=\"[.]tsv$\"))  #  experiments <- SBtabVFGEN::sbtab.data(model.sbtab)  #  parABC <- SBtabVFGEN::sbtab.quantity(model.sbtab$Parameter)   #  modelName <- checkModel(\"<insert_model_name>_gvf.c\")  #  simulate <- simulator.c(experiments, modelName,  parABC)  #  yf <- sim(parABC)"},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":null,"dir":"Reference","previous_headings":"","what":"This creates a closure that simulates the model — simulator.R","title":"This creates a closure that simulates the model — simulator.R","text":"shorter alternative runModel function (R, deSolve backend).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This creates a closure that simulates the model — simulator.R","text":"","code":"simulator.R(experiments, model, parMap = identity)"},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This creates a closure that simulates the model — simulator.R","text":"experiments list experiments simulate: inital values, inputs, time vectors, initial times parMap model called parMap(parABC); parameter transformation can happen . modelName string (optional comment indicating .file) points model simulate parABC parameters model, subject change parMap.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This creates a closure that simulates the model — simulator.R","text":"closure returns model's output given parameter vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This creates a closure that simulates the model — simulator.R","text":"returns closure around:     - experiments,     - model,     - parameter mapping returned function depends parABC (sampling parameters).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This creates a closure that simulates the model — simulator.R","text":"","code":"model.sbtab <- SBtabVFGEN::sbtab_from_tsv(dir(pattern=\"[.]tsv$\")) #> Error in file(con, \"r\"): invalid 'description' argument    experiments <- SBtabVFGEN::sbtab.data(model.sbtab) #> Error in is.factor(x): object 'model.sbtab' not found    parABC <- SBtabVFGEN::sbtab.quantity(model.sbtab$Parameter) #> Error: 'sbtab.quantity' is not an exported object from 'namespace:SBtabVFGEN'     source(\"<model name>.R\") # this defines the `model` variable #> Warning: cannot open file '<model name>.R': No such file or directory #> Error in file(filename, \"r\", encoding = encoding): cannot open the connection    simulate <- simulator.R(experiments, model,  parABC) #> Error in simulator.R(experiments, model, parABC): object 'experiments' not found    yf <- sim(parABC) #> Error in sim(parABC): could not find function \"sim\""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":null,"dir":"Reference","previous_headings":"","what":"This creates a closure that simulates the model — simulator.c","title":"This creates a closure that simulates the model — simulator.c","text":"shorter alternative runModel function (C backend).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This creates a closure that simulates the model — simulator.c","text":"","code":"simulator.c(experiments, modelName, parMap = identity, noise = FALSE)"},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This creates a closure that simulates the model — simulator.c","text":"experiments list experiments simulate: inital values, inputs, time vectors, initial times modelName string (optional comment indicating .file) points model simulate parMap model called parMap(parABC); parameter transformation can happen . noise boolean variable. noise=TRUE, Gaussian noise added output simulations. standard deviation Gaussian noise equal measurement error. noise=FALSE output deterministic solution ODE system. parABC parameters model, subject change parMap.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This creates a closure that simulates the model — simulator.c","text":"closure returns model's output given parameter vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This creates a closure that simulates the model — simulator.c","text":"returns closure around: - experiments, - model, - parameter mapping returned function depends parABC (sampling parameters). simulation done suing rgsl backend.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This creates a closure that simulates the model — simulator.c","text":"","code":"#  model.sbtab <- SBtabVFGEN::sbtab_from_tsv(dir(pattern=\"[.]tsv$\"))  #  experiments <- SBtabVFGEN::sbtab.data(model.sbtab)  #  parABC <- SBtabVFGEN::sbtab.quantity(model.sbtab$Parameter)   #  modelName <- checkModel(\"<insert_model_name>_gvf.c\")  #  simulate <- simulator.c(experiments, modelName,  parABC)  #  yf <- sim(parABC)"},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move.html","id":null,"dir":"Reference","previous_headings":"","what":"SMMALA move — smmala_move","title":"SMMALA move — smmala_move","text":"Simiplified Manifold Metropolis Adjusted Langevin Algorithm uses move instriction uses Gaussian kernel shifted away current point","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SMMALA move — smmala_move","text":"","code":"smmala_move(beta, parGiven, fisherInformationPrior, eps = 0.01)"},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SMMALA move — smmala_move","text":"beta inverse temperature (parallel tempering) parGiven given point","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SMMALA move — smmala_move","text":"SMMALA proposal point","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move_density.html","id":null,"dir":"Reference","previous_headings":"","what":"SMMALA transition kernel density — smmala_move_density","title":"SMMALA transition kernel density — smmala_move_density","text":"Simiplified Manifold Metropolis Adjusted Langevin Algorithm uses move instriction uses Gaussian kernel shifted away current point.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SMMALA transition kernel density — smmala_move_density","text":"","code":"smmala_move_density(   beta,   parProposal,   parGiven,   fisherInformationPrior,   eps = 0.01 )"},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SMMALA transition kernel density — smmala_move_density","text":"beta inverse temperature (parallel tempering) parGiven given point","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SMMALA transition kernel density — smmala_move_density","text":"SMMALA proposal point","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sum.of.bin.variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","title":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","text":"function calculates variance sum vector valued observable.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sum.of.bin.variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","text":"","code":"sum.of.bin.variance(hst, binMeans, totalMean)"},{"path":"https://icpm-kth.github.io/uqsa/reference/sum.of.bin.variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","text":"hst histogram parameter sample binMeans means observable within bin (rows means) totalMean mean observable entire sample (vector)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sum.of.bin.variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","text":"weighted sum square differences binMean totalMean","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/swap_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Swap the end-points of two Markov chains — swap_points","title":"Swap the end-points of two Markov chains — swap_points","text":"conditional swap, according rules parallel tempering. function useful Markov chains returned global scope one process make decision perform swap.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/swap_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swap the end-points of two Markov chains — swap_points","text":"","code":"swap_points(parMCMC)"},{"path":"https://icpm-kth.github.io/uqsa/reference/swap_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swap the end-points of two Markov chains — swap_points","text":"parMCMC list Markov chain end points","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/swap_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Swap the end-points of two Markov chains — swap_points","text":"list members swapped","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/swap_points_locally.html","id":null,"dir":"Reference","previous_headings":"","what":"Swap the end-points of two Markov chains — swap_points_locally","title":"Swap the end-points of two Markov chains — swap_points_locally","text":"conditional swap, according rules parallel tempering. function useful Markov chains returned global scope one process make decision perform swap, .e.: current state chain locally available.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/swap_points_locally.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swap the end-points of two Markov chains — swap_points_locally","text":"","code":"swap_points_locally(parMCMC)"},{"path":"https://icpm-kth.github.io/uqsa/reference/swap_points_locally.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swap the end-points of two Markov chains — swap_points_locally","text":"parMCMC list Markov chain end points, entry annotated temperature attribute attr(parMCMC[[]],\"beta\")","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/swap_points_locally.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Swap the end-points of two Markov chains — swap_points_locally","text":"list members swapped","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa-package.html","id":null,"dir":"Reference","previous_headings":"","what":"uqsa: Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling — uqsa-package","title":"uqsa: Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling — uqsa-package","text":"package solve initial value problem (given ordinary differential equation) list simulation experiments. simulations compared data, repeatedly. package can sample parameters model via ABC (approximate Bayesian computation) quantify uncertainty remains within model even considering data. Experiments evaluated sequence, intermediate probability densities modeled using VineCopua package.","code":""},{"path":[]},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"uqsa: Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling — uqsa-package","text":"Maintainer: Olivia Eriksson olivia@kth.se Authors: Alexandra Jauhiainen Alexandra.Jauhiainen@astrazeneca.com Federica Milinanni fedmil@kth.se Andrei Kramer andreikr@kth.se [contributor]","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Load an example model for this package — uqsa_example","title":"Load an example model for this package — uqsa_example","text":"function finds path example model, given name. SBtab format, model data travel together (different tables, documents).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load an example model for this package — uqsa_example","text":"","code":"uqsa_example(   modelName = NULL,   full.names = TRUE,   pattern = \"[.]tsv$\",   f = NULL )"},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load an example model for this package — uqsa_example","text":"modelName name model, e.g.: \"AKAR4\", \"AKAP79\", \"CaMKII\"; empty, function lists available examples. full.names return full paths files - defaults TRUE pattern pattern find specific files; NULL, function returns directory example f file ending, search file endings f, alternative pattern","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load an example model for this package — uqsa_example","text":"location examples current environment called arguments, paths model files modelName provided full path example file pattern pattern unset","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load an example model for this package — uqsa_example","text":"default function returns names tsv files belonging named model. modelName provided returns possible names (contents top-level example directory).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load an example model for this package — uqsa_example","text":"","code":"uqsa_example() #> [1] \"AKAP79\"    \"AKAP79tc\"  \"AKAR4\"     \"AKAR4cl\"   \"CaMKII\"    \"README.md\" #> [7] \"Spike\"     uqsa_example(\"AKAR4\",full.names=FALSE) #> [1] \"AKAR4_100nM.tsv\"       \"AKAR4_25nM.tsv\"        \"AKAR4_400nM.tsv\"       #> [4] \"AKAR4_Compound.tsv\"    \"AKAR4_Experiments.tsv\" \"AKAR4_Output.tsv\"      #> [7] \"AKAR4_Parameter.tsv\"   \"AKAR4_Reaction.tsv\"    uqsa_example(\"AKAP79\",f='R',full.names=FALSE) #> [1] \"AKAP79.R\"            \"AKAP79_out.R\"        \"AKAP79_plots.R\"      #> [4] \"ptAKAP79cl.R\"        \"ptmhAKAP79cl.R\"      \"runABCMCMC_AKAP79.R\" uqsa_example(\"AKAP79\",pat=\"^run.*R$\") #> [1] \"/tmp/Rtmp7hRdw6/temp_libpath634d15e1263f/uqsa/extdata/AKAP79/runABCMCMC_AKAP79.R\""},{"path":"https://icpm-kth.github.io/uqsa/news/index.html","id":"uqsa-014","dir":"Changelog","previous_headings":"","what":"uqsa 0.1.4","title":"uqsa 0.1.4","text":"Published Application Note pre-print arxiv.org.","code":""}]
