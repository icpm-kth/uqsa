[{"path":"https://icpm-kth.github.io/uqsa/articles/ABC_sampling.html","id":"available-prior-functions-in-our-examples","dir":"Articles","previous_headings":"","what":"Available Prior functions in our examples","title":"ABC sampling","text":"(Log)uniform (Log)normal","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/ABC_sampling.html","id":"acceptance-criteria","dir":"Articles","previous_headings":"Available Prior functions in our examples","what":"Acceptance criteria","title":"ABC sampling","text":"-Distance function- Acceptance probability","code":""},{"path":[]},{"path":"https://icpm-kth.github.io/uqsa/articles/ABC_sampling.html","id":"abcmcmc","dir":"Articles","previous_headings":"R-functions","what":"ABCMCMC","title":"ABC sampling","text":"Build chain parameters approximately distributed posterior distribution model parameters ABCMCMC function generates chains sample parameters using ABCMCMC algorithm. samples approximately distributed posterior probability model parameters. build chain, algorithm considers (current) last value chain proposes parameter sampled multivariate normal distribution cenetered current parameter Sigma0 covariance matrix. covariance matrix adaptively modified: chain gets stuck, regularization performed. 4 regularizations, chain aborted. , understand proposed parameter just sampled “agreement” experimental data objectiveFunction called proposed parameter vector: objectiveFunction simulates model computes distance experimental data output functions model. distance larger threshold delta, proposed parameter likely generated experimental data, therefore rejected. Markov chain repeat point (stands still). distance less threshold delta, proposed parameter accepted probability equal ratio prior probability density (calculated dprior) evaluated proposed current parameter, respectively. Input arguments * objectiveFunction (function) - function , given (vectorial) parameter input, simulated model outputs distance experimental data data simulated model parameter provided input * startPar (numeric) - parameter (vector) corresponds starting parameter chain * nSims (integer) - requested number samples output chain * Sigma0 (numeric) - matrix dimensions equal length (vectorial) model parameter, corresponding covariance matrix desired proposed moves parameter space. ABCMCMC algorithm covariance matrix slightly modified regularized enhance exploration parameter space convergence method * delta (numeric) - ABC acceptance threshold * dprior (function) - function evaluates prior probability density function parameter given input Output (list) output ABCMCMC list containing following data: * draws (numeric) - matrix nSims rows number columns equal length model parameter. row corresponds sample ABCMCMC chain * scores (numeric) - vector length nSims containing distances experimental data data simulated corresponding ABCMCMC samples (stored draws) * acceptanceRate (numeric) - fraction parameters ABCMCMC chain proposed accepted. * nRegularizations (integer) - number regularizations performed covariance matrix moves proposed algorithm","code":"mcmc <- ABCMCMC(objectiveFunction, startPar, nSims, Sigma0, delta, dprior, acceptanceProbability=NULL)"},{"path":"https://icpm-kth.github.io/uqsa/articles/ABC_sampling.html","id":"checkfitwithpreviousexperiments","dir":"Articles","previous_headings":"R-functions","what":"checkFitWithPreviousExperiments","title":"ABC sampling","text":"ABC acceptance currently sampled values given old data (Prior) function tests samples draws experimental data used generate draws. experimental data needs used construct variable objectiveFunction. objectiveFunction used simualte model draws parameters, compare simulated data old experimental data. distances computed objectiveFunction ABC threshold delta, corresponding parameters draws kept. Otherwise, discarded. Input arguments * draws (numeric) - matrix sampled values (filtered) * objectiveFunction (function) - function , given (vectorial) parameter input, simulated model outputs distance experimental data data simulated model parameter provided input * delta (numeric) - acceptance threshold Output (numeric) Filtered subset (matrix) acceptable parameter draws","code":"oldObjective <- makeObjective(oldExperiments,modelName, distanceMeasure, parMap, simulate) filteredDraws <- checkFitWithPreviousExperiments(draws=mcmc$draws, objectiveFunction=oldObjective, delta)"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"akar4-with-conservation-law-analysis","dir":"Articles","previous_headings":"","what":"AKAR4 with Conservation Law Analysis","title":"AKAR4 with MCMC","text":"version AKAR4 model built conservation law analysis turned processing SBtab content produce vector field file (vf). downstream effect R C code.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"loading-model-and-data","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis","what":"Loading Model and Data","title":"AKAR4 with MCMC","text":"load SBtab content tsv files extract data : next block load series functions: AKAR4cl_vf, AKAR4cl_jac, etc.; also loads model variable: list functions generic names.","code":"modelFiles <- uqsa_example(\"AKAR4cl\",pattern=\"[.]tsv$\",full.names=TRUE) SBtab <- SBtabVFGEN::sbtab_from_tsv(modelFiles) #> [tsv] file[1] «/home/andrei/R/library/uqsa/extdata/AKAR4cl/100nM.tsv» belongs to Document «AKAR4cl» #>  I'll take this as the Model Name. source(uqsa_example(\"AKAR4cl\",pat=\"^AKAR4cl[.]R$\")) names(model) #> [1] \"vf\"       \"jac\"      \"jacp\"     \"func\"     \"funcJac\"  \"funcJacp\" \"init\"     #> [8] \"par\"      \"name\" # compile modelName <- checkModel(\"AKAR4cl\",uqsa_example(\"AKAR4cl\",pat=\"_gvf[.]c$\")) #> building a shared library from c source, and using GSL odeiv2 as backend (pkg-config is used here). #> cc -shared -fPIC `pkg-config --cflags gsl` -o './AKAR4cl.so' '/home/andrei/R/library/uqsa/extdata/AKAR4cl/AKAR4cl_gvf.c' `pkg-config --libs gsl`"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"data-and-experiments","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis > Loading Model and Data","what":"Data and Experiments","title":"AKAR4 with MCMC","text":"experiments variable contains description simulate experiment also data simulation try replicate. Since model build conservation law analysis, need load results analysis, adjust simulation instructions: default values ODE model parameters, taking new inputs account:","code":"load(uqsa_example(\"AKAR4cl\",pat=\"^ConservationLaws[.]RData$\")) print(ConLaw$Text) #> [1] \"AKAR4_C_ConservedConst = AKAR4_C+1*C\"      #> [2] \"AKAR4_ConservedConst = AKAR4+1*AKAR4p-1*C\" experiments <- sbtab.data(SBtab,ConLaw) n <- length(experiments[[1]]$input) stopifnot(n>0) parVal <- head(AKAR4cl_default(),-n) print(parVal) #> kf_C_AKAR4 kb_C_AKAR4 kcat_AKARp  #>      0.018      0.106     10.200"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"prior","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis","what":"Prior","title":"AKAR4 with MCMC","text":"Scale determine prior values, default parameter range:","code":"defRange <- 2 # log-10 space dprior <- dNormalPrior(mean=log10(parVal),sd=rep(defRange,length(parVal))) rprior <- rNormalPrior(mean=log10(parVal),sd=rep(defRange,length(parVal))) print(dprior(log10(parVal))) #> [1] 0.007936704"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"mcmc-related-model-functions","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis","what":"MCMC related Model Functions","title":"AKAR4 with MCMC","text":"construct several closures needed MCMC","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"simulations","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis > MCMC related Model Functions","what":"Simulations","title":"AKAR4 with MCMC","text":"","code":"sensApprox <- sensitivityEquilibriumApproximation(experiments, model, log10ParMap, log10ParMapJac) simulate <- simulator.c(experiments,modelName,log10ParMap,noise=FALSE,sensApprox) y <- simulate(log10(parVal))  plot(experiments[[1]]$outputTimes,as.numeric(y[[1]]$state[1,,1]),xlab='time',ylab='AKAR4p', main='state',type='l')"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"likelihood-related-functions","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis > MCMC related Model Functions","what":"Likelihood related Functions","title":"AKAR4 with MCMC","text":"","code":"llf <- logLikelihood(experiments) gradLL <- gradLogLikelihood(model,experiments, parMap=log10ParMap, parMapJac=log10ParMapJac) fiIn <- fisherInformation(model, experiments, parMap=log10ParMap) fiPrior <- solve(diag(defRange, length(parVal))) print(fiPrior) # constant matrix #>      [,1] [,2] [,3] #> [1,]  0.5  0.0  0.0 #> [2,]  0.0  0.5  0.0 #> [3,]  0.0  0.0  0.5"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"maerkov-chain-update-function","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis > MCMC related Model Functions","what":"Maerkov Chain Update Function","title":"AKAR4 with MCMC","text":"","code":"update  <- mcmcUpdate(simulate=simulate,     experiments=experiments,     model=model,     logLikelihood=llf,     gradLogLikelihood=gradLL,     fisherInformation=fiIn,     fisherInformationPrior=fiPrior,     dprior=dprior)"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"find-a-good-smmala-step-size","dir":"Articles","previous_headings":"AKAR4 with Conservation Law Analysis","what":"Find a Good SMMALA step size:","title":"AKAR4 with MCMC","text":", construct mcmc function derived update function, initialize Markov chain start several chains parallel: define adjustment factor L() h, based acceptance rate test chain size N (good value test chain around 100). factor L() increases h target acceptance 25%.  Initialize parallel execution, 4 processes, 16 Markov chains. Next, perform sampling parallel, also swap positions every :","code":"m <- mcmc(update)   # a Markov chain h <- 1e-1           # step size guess  nChains <- 4 accTarget <- 0.25 L <- function(a) { (1.0 / (1.0+exp(-(a-accTarget)/0.1))) + 0.5 } N <- 100  start_time <- Sys.time() x <- log10(parVal)                               # do the adjustment of h a few times options(mc.cores = parallel::detectCores()) for (j in seq(6)){  cat(\"adjusting step size: \",h,\" \\n\");  x <- mcmcInit(1.0,x,simulate,dprior,llf,gradLL,fiIn)  Sample <- m(x,N,eps=h)  a <- attr(Sample,\"acceptanceRate\")  cat(\"acceptance: \",a*100,\" %\\n\")  h <- h * L(a)  x <- as.numeric(tail(Sample,1)) } #> adjusting step size:  0.1   #> acceptance:  27  % #> adjusting step size:  0.1049834   #> acceptance:  29  % #> adjusting step size:  0.115344   #> acceptance:  18  % #> adjusting step size:  0.09594452   #> acceptance:  28  % #> adjusting step size:  0.1030869   #> acceptance:  19  % #> adjusting step size:  0.08807162   #> acceptance:  29  % plot(attr(Sample,\"logLikelihood\"),xlab=\"iteration\",ylab=\"log-likelihood\",main=\"small Sample to find a good step size\",type='l') cat(\"final step size: \",h,\"\\n\") #> final step size:  0.0967632 cat(\"finished adjusting after\",difftime(Sys.time(),start_time,units=\"sec\"),\" seconds\\n\") #> finished adjusting after 30.12104  seconds n <- 16                                          # cluster size nChains <- 16 options(mc.cores = parallel::detectCores() %/% n) cl <- parallel::makeForkCluster(n) parallel::clusterSetRNGStream(cl, 1337)          # seeding random numbers sequences  betas <- seq(1,0,length.out=nChains)^2 parMCMC <- lapply(betas,mcmcInit,parMCMC=log10(parVal),simulate=simulate,dprior=dprior,logLikelihood=llf,gradLogLikelihood=gradLL,fisherInformation=fiIn) start_time <- Sys.time()                         # measure sampling time Sample <- NULL for (i in seq(100)){                            # 16 chains, 4 workers  s <- parallel::parLapply(cl, parMCMC, m, N=100, eps=h)  parMCMC <- lapply(s,attr,which=\"lastPoint\")  parMCMC <- swap_points(parMCMC)  if (i>2) {   Sample <- rbind(Sample,s[[1]])  } }  colnames(Sample) <- names(parVal)   time_ = difftime(Sys.time(),start_time,units=\"sec\") parallel::stopCluster(cl) cat(\"finished sampling after\",time_,\" seconds\\n\") #> finished sampling after 650.7688  seconds"},{"path":"https://icpm-kth.github.io/uqsa/articles/AKAR4cl.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"AKAR4 with MCMC","text":"final sample looks like :","code":"print(tail(Sample,10)) #>          kf_C_AKAR4 kb_C_AKAR4 kcat_AKARp #> [39991,]  -1.748616  -1.226415   2.167335 #> [39992,]  -1.748616  -1.226415   2.167335 #> [39993,]  -1.748616  -1.226415   2.167335 #> [39994,]  -1.748616  -1.226415   2.167335 #> [39995,]  -1.728994  -1.217590   2.261970 #> [39996,]  -1.745386  -1.282003   2.287830 #> [39997,]  -1.745386  -1.282003   2.287830 #> [39998,]  -1.745386  -1.282003   2.287830 #> [39999,]  -1.745386  -1.282003   2.287830 #> [40000,]  -1.745386  -1.282003   2.287830 hexbin::hexplom(Sample)"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"advantages-of-sbtab","dir":"Articles","previous_headings":"","what":"Advantages of SBtab","title":"SBtab","text":"Data models tightly linked also include two tables relationships data model simulations examples: Experiments, table list experiments together appropriate model settings Output, list output functions correspond measurable values model, named corresponding data columns SBtab Document set tables represent reactions, compounds, parameters, measured data correspond simulations model certain input conditions initial values. Input conditions often related initial values values input parameters (parameters used within model input signal). values input parameters always known, model’ s internal parameters (e.g. reaction rate coefficients) can subject optimization sampling. SBML level 2 lacks ability carry data model also lacks vocabulary define parameters inputs model internal. also way define observable SBML (function models measurement device, observation). reason, SBML document converted SBtab document qualities (need).","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"issues-to-be-aware-of-with-any-file-format","dir":"Articles","previous_headings":"","what":"Issues to be aware of with any File format","title":"SBtab","text":"According specifications SBtab authors, MS Excel spreadsheets acceptable storage format - don’t use original code therefore carry guarantees. SBtabVFGEN package uses either multiple TSV files one ODS file. TSV reading done using core R functions, ODS read readODS. formats can issues general specific package: line endings can \\n \\n\\r fields automatically unnecessarily quoted spreadsheet software encoding (UTF-8, something else) spreadsheets may want write unicode minus sign − rather - tsv file: U+2212, careful lines can blank, quite, contain just tabs spaces comments inside fields imported field content confuse model parser issue unicode minus signs readODS theoretically discontinued (deprecated), despite format continuing exist Models can automatically converted SBtab format modelling formats (SBML). information SBtab please refer official git repository. aware conversion SBML SBtab done official SBtab tools, (SBML hard). part, case, SBtab document collection tsv files (one file per table). can written hand, text editor (one doesn’t auto convert tabs N spaces). format. table contains information model, data, relationship one another: Reactions Parameters Output Functions Compounds/Molecular Species type items (e.g. parameters) gets TSV file (e.g. Parameter.tsv), see examples. files can automatically generate ODE code R C solvers, load data .","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"sbtab-file-structure","dir":"Articles","previous_headings":"","what":"SBtab File Structure","title":"SBtab","text":"file header, e.g.: header doesn’t columns, ’s line text, immediately followed actual table. sections , specify header like give example table can follow header. can also include columns order; column names special meanings, unknown columns parsed (harmless). don’t parse version attribute attribute TableName Document. use Document attribute assign name model read files; stored comment attached list data.frames SBtabVFGEN::sbtab_from_tsv() generates, comment(model.tab) print . second line contains table column headers. first column can called either !ID !Name (harmless , first one counts). first column called , scripts carry regardless, assuming kind name (!Id, !id, ID? also work us – software). columns found name, exactly. columns can appear order. amount columns can added names starting exclamation points, ignored. following sub-sections list minimum set columns table, sub-section heading refers required TableName attribute kind table. set columns given example tables. time omit !!SBtab heading table mess formatting. two generic table-types can used specific one applicable: TableType='Quantity' TableType='QuantityMatrix'. usually don’t use TableType property , needed official (sbtab.net) tool-set work. specific table-type setting table, list setting following sections.","code":"!!SBtab SBtabVersion='1.0' TableName='Reaction' TableType='Reaction' TableTitle='A list of Reactions' Document='myModel'"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"constant","dir":"Articles","previous_headings":"SBtab File Structure","what":"Constant","title":"SBtab","text":"list constants, values never change model.","code":"!!SBtab TableName='Constant' Document='myModel'"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"input","dir":"Articles","previous_headings":"SBtab File Structure","what":"Input","title":"SBtab","text":"Known paramters model, can vary experiments.","code":"!!SBtab TableName='Input' Document='myModel'"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"parameter","dir":"Articles","previous_headings":"SBtab File Structure","what":"Parameter","title":"SBtab","text":"Possibly unknown parameters model, parameters typically refer internal properties model rather something model experiment. !Scale column optional, often useful; several values possible: log10,log,linear (various spellings). missing linear assumed.","code":"!!SBtab TableName='Parameter' Document='myModel'"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"expression","dir":"Articles","previous_headings":"SBtab File Structure","what":"Expression","title":"SBtab","text":"mathematical sub-expressions can used reaction fluxes. Can used encode thermodynamic relationships parameters, model input signal. used assign name algebraic expression.","code":"!!SBtab TableName='Expression' Document='myModel'"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"compound","dir":"Articles","previous_headings":"SBtab File Structure","what":"Compound","title":"SBtab","text":"SBML language, species. several optional columns, e.g. !IsConstant !Type. variables usually used state variables ODE framework.","code":"!!SBtab TableName='Compound' TableType='Compound' Document='myModel'"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"reaction","dir":"Articles","previous_headings":"SBtab File Structure","what":"Reaction","title":"SBtab","text":"","code":"!!SBtab TableName='Reaction' TableType='Reaction' Document='myModel'"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"output","dir":"Articles","previous_headings":"SBtab File Structure","what":"Output","title":"SBtab","text":"unit 1 means 'dimensionless' SBML.","code":"!!SBtab TableName='Output' Document='myModel'"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"event","dir":"Articles","previous_headings":"SBtab File Structure","what":"Event","title":"SBtab","text":"Events interrupt solver rgsl package, change valuse input parameters, state variables, re-initialize ODE solver continue . Possible operations >OP:ID: SET,ADD,SUB,MUL,DIV, ID can refer parameter state variable (compound).","code":"!!SBtab TableName='ActivationEvent' Document='myModel'"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"experiments","dir":"Articles","previous_headings":"SBtab File Structure","what":"Experiments","title":"SBtab","text":"Type : Time Series, Dose Response. initial time ODE \\(t0\\) corresponds beginning experiment setup: !T0 (time value). plain !Time default time measurements; dose response experiments, place specify measurement time. !Event names table contains instructions scheduled events (see ). !Citation column entirely optional.","code":"!!SBtab TableName='Experiments' Document='myModel'"},{"path":"https://icpm-kth.github.io/uqsa/articles/SBtab.html","id":"alternatives","dir":"Articles","previous_headings":"","what":"Alternatives","title":"SBtab","text":"user can circumvent entire format just writing C code R code model hand entirely different tool, VFGEN , SBML related project like SBFC generates code. , model small enough, can also write files using text editor without tool. data load SBtab files stored list R, item list data.frames vectors (’s opaque object). user can just create list (e.g. R script), want avoid SBtab. data stored entirely different format, hdf5 file, read using e.g. hdf5r re-roganized list like .","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"time-series","dir":"Articles","previous_headings":"","what":"Time Series","title":"Importing Data","text":"time series typically requires one model simulation reproduce (unless scheduled events happening).","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"example-time-series","dir":"Articles","previous_headings":"Time Series","what":"Example Time Series","title":"Importing Data","text":"","code":"!!SBtab Document='myModel' TableType='QuantityMatrix' TableName='AutorYEARfigureS1a' TableTitle='Data originally published in CITATION'"},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"dose-response","dir":"Articles","previous_headings":"","what":"Dose Response","title":"Importing Data","text":"experiment maps increasing input output values. cases output happen one pre-defined time-point dose. dose-response curves transformed n time-series experiments parsing, n number content-rows (without headers). dose response curve requires n simulations model reproduce.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"example-dose-response-curve","dir":"Articles","previous_headings":"Dose Response","what":"Example Dose Response Curve","title":"Importing Data","text":"","code":"!!SBtab Document='myModel' TableType='QuantityMatrix' TableName='AutorYEARfigureS1b' TableTitle='Data originally published in CITATION'"},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"scheduled-events","dir":"Articles","previous_headings":"","what":"Scheduled Events","title":"Importing Data","text":"experiment can contain sudden events, systems biology useful describe experiments include intervention specified time (activation, silencing, stimulus, action potential, etc.), events happen much faster system dynamics modelling exactly slow solver dramatically. case event \\(t\\), solver stopped, linear (affine) transformation current state \\(x(t)\\) parameters \\(p\\) applied (C): \\[ x(t) := x(t) + b \\] (assignment, mathematical equality, discontinuity \\(\\) \\(b\\) non-trivial values) experiment[[]]$event structure: time (numeric vector, event schedule) (three dimensional array, third dimension corresponds time) b (three dimensional array, second dimension always 1, third long time vector) (three dimensional array, third dimension corresponds time) b (three dimensional array, second dimension always 1, third long time vector) […] […] type content experiment. cases permissible omit parts trivial (\\(b\\) trivial 0, neutral element addition). cases, omitted items can NULL (may work combinations, subject improvement).","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"r-functions","dir":"Articles","previous_headings":"","what":"R-functions","title":"Importing Data","text":"icpm-kth/SBtabVFGEN package functions import model data R data structures. install already: installed: experiments variable list, member (list), describes simulation experiment. experiment may result one calls simulator (C amounts resetting driver chosen solver). experiment properties:","code":"remotes::install_github(\"icpm-kth/SBtabVFGEN\") model.tsv <- dir(pattern=\"[.]tsv$\",full.names=TRUE) # a list of file paths to TSV files model.tab <- SBtabVFGEN::sbtab_from_tsv(model.tsv)  # a list of data.frames experiments <- SBtabVFGEN::sbtab.data(model.tab)    # a list of simulation experiments with data"},{"path":"https://icpm-kth.github.io/uqsa/articles/data.html","id":"gaussian-measurement-errors","dir":"Articles","previous_headings":"","what":"Gaussian Measurement errors","title":"Importing Data","text":"Gaussian noise, errorValues can standard deviation mean. data frame shape names output values. usual way write somewhere typically error models, noise distributions, user can decide kind values useful use custom scoring functions (untested us).","code":"outputValues ± errorValues"},{"path":"https://icpm-kth.github.io/uqsa/articles/examples_overview.html","id":"example-models","dir":"Articles","previous_headings":"","what":"Example Models","title":"Examples overview","text":"simple example using AKAR4 model available article AKAR4. can run locally using larger (computationally expensive) examples: AKAP79, CaMKII, stochastic version AKAR4 available form R scripts can run locally (preferably) computer cluster. examples included package AKAR4 AKAP79 ODE model CaMKII ODE model AKAR4 stochastic model ODE models added measurement noise used acceptance probability order allow use ABC (Alahmadi et al 2020). demo R scrips can found folder inst/extdata. uqsa::uqsa_example function can locate example folders package installation.","code":"library(uqsa) source(uqsa_example(\"AKAR4\",pat=\"^runABCMCMC_AKAR4[.]R$\"))"},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"gnu-scientific-library-optional","dir":"Articles","previous_headings":"","what":"GNU Scientific Library (optional)","title":"Installation","text":"simulation backend using GNU Scientific Library (gsl, odeiv2), library needs installed OS, R package (’s library dependency). compile sources gsl requires c compiler options related linking librarie’s location. can look like : -lgsl -lgslcblas -lm, also complex (depends system). use pkg-config determine right options (pkgconf, thing (faster)). pkg-config missing system, installation fail (available MAC, GNU Linux, Unix, BSD, Windows). gsl pkg-config available system, icpm-kth/rgsl package compile nicely. normal user shell (root shell, su -), using guix NixOS, commands require sudo doas front required system administration rights. GNU Guix NIXOS package managers don’t require administration rights.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"r-itself","dir":"Articles","previous_headings":"","what":"R itself","title":"Installation","text":"Availability specific versions depend version OS, --date package database. quick list approximate command: MAC, please follow instructions R-studio web-site. experience R windows, specifically comes GSL C compilers compile C code included R package, may just work, , maybe help: WSL Cygwin)","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"r-packages","dir":"Articles","previous_headings":"","what":"R packages","title":"Installation","text":"system’s package manager may system-wide R packages, e.g.: ubuntu r-cran-desolve, sudo apt install r-cran-desolve install deSolve package users machine. HPC environments preferable user accounts can harsh quotas file sizes file numbers. , R packages can also installed within R (individual users), location writable , typically $HOME diectory. Please ensure .libPaths() returns least one location write access . , can create new directory, make known R: Now, can install R packages Comprehensive R Archive Network cran github: packages CRAN, can installe dlike :","code":".libPaths() mkdir -p ~/R/library && echo \"R_LIBS=~/R/library\" >> ~/.Renviron install.packages(\"remotes\") remotes::install_github(\"icpm-kth/uqsa\")"},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"installation-of-companion-packages","dir":"Articles","previous_headings":"","what":"Installation of Companion packages","title":"Installation","text":"developed two companion packages: solves ODEs interface organised around simulation experiments uses solvers GNU Scientific Library used examples organises storage loading models loads SBtab content tsv, ods, excel files creates vfgen, MOD, sbml, format free ODE files also loads biological data contained SBtab files R variables (lists simulation experiment setups) optional, recommended (examples use ).","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"rgsl","dir":"Articles","previous_headings":"Installation of Companion packages","what":"RGSL","title":"Installation","text":"package solves ODE initial value problems, given lists simulation experiments, sudden interventions (like activation, sudden signal). can replaced standard solvers deSolve package. examples, solvers deSolve always slower.","code":"remotes::install_github(\"icpm-kth/rgsl\")       # requires gsl in your OS, see above"},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"sbtab-model-handling","dir":"Articles","previous_headings":"Installation of Companion packages","what":"SBtab Model Handling","title":"Installation","text":"package loads model written SBtab format, designed models systems biology, much easier read SBML: can replaced, different method model creation want write model source files hand (hard large models).","code":"remotes::install_github(\"icpm-kth/SBtabVFGEN\") # if you plan to use SBtab"},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"installation-of-uqsa","dir":"Articles","previous_headings":"","what":"Installation of UQSA","title":"Installation","text":"Read articles website, especially Example articles learn : AKAR4, AKAP79, CaMKII.","code":"remotes::install_github(\"icpm-kth/uqsa\")       # this package library(uqsa)                                  # to load it"},{"path":"https://icpm-kth.github.io/uqsa/articles/install.html","id":"examples-in-the-package","dir":"Articles","previous_headings":"Installation of UQSA","what":"Examples in the Package","title":"Installation","text":"package also includes example models, run script . advise users copy run scripts either repository installed package adapt . location run file can found like : browsing folders GitHub (inst/extdata/). Copy one adapt needs.","code":"uqsa::uqsa_example(\"AKAP79\",pat=\"^run.*R$\")"},{"path":"https://icpm-kth.github.io/uqsa/articles/installation.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Short Installation Instructions","text":"Alternatively, download release tar.gz zip file run","code":"# requires the 'remotes' package remotes::install_github(\"icpm-kth/uqsa\") R CMD INSTALL uqsa*.{tar.gz,zip}"},{"path":"https://icpm-kth.github.io/uqsa/articles/installation.html","id":"prerequisites","dir":"Articles","previous_headings":"Installation","what":"Prerequisites","title":"Short Installation Instructions","text":"R package uqsa contains examples addition normal package dependencies also use reshape2, ggplot2; SBtabVFGEN benefits libSBML installed R bindings; hard dependency, required export SBML, L2V4. hdf5r also (minor) optional benefit. also need install GNU Scientific Library (rgsl package tested MACOS GNU Linux platforms [debian, ubuntu]) maxima yacas RPN-derivative package code perform derivatives (needs make && sudo make     install)","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/installation.html","id":"note-on-model-code","dir":"Articles","previous_headings":"Installation > Prerequisites","what":"Note on Model code","title":"Short Installation Instructions","text":"Strictly speaking auto-generation code required, user can also hand-craft model code just use SBtab related functionality. package requires either R code deSolve C code gsl_odeiv2 (https://www.gnu.org/software/gsl/doc/html/ode-initval.html) user visible functions manual (e.g. run > ?ABCMCMC R)","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/literature_references.html","id":"data-references","dir":"Articles","previous_headings":"","what":"Data references","title":"Model and Data references","text":"experimental data AKAP79 AKAR4 models publication: described detail SBtab files AKAP79 AKAR4 model folders. experimental data CaMKII model extracted following references: described detail SBtab files CaMKII model folder.","code":"Church, Timothy W., et al. \"AKAP79 enables calcineurin to directly suppress protein kinase A activity.\"  Elife 10 (2021): e68164. Stemmer PM, Klee CB. Biochemistry. 1994;33(22):6859-6866 (phenotype 1, 3 and 4) O'Donnell SE et al. Proteins. 2011;79(3):765-786 (phenotype 2)"},{"path":"https://icpm-kth.github.io/uqsa/articles/literature_references.html","id":"model-references","dir":"Articles","previous_headings":"","what":"Model references","title":"Model and Data references","text":"AKAP79 model modified : CaMKII model ","code":"Church, Timothy W., et al. \"AKAP79 enables calcineurin to directly suppress protein kinase A activity.\"  Elife 10 (2021): e68164.` Buxbaum JD, Dudai Y. 1989. \"A quantitative model for the kinetics of cAMP-dependent protein kinase (type II)  activity. Long-term activation of the kinase and its possible relevance to learning and memory.\"  The Journal of Biological Chemistry 264:9344–9351. Nair, A. G., Gutierrez-Arenas, O., Eriksson, O., Jauhiainen, A., Blackwell, K. T., & Kotaleski, J. H. (2014). \"Modeling intracellular signaling underlying striatal function in health and disease.\" Progress in molecular biology and translational science, 123, 277-304."},{"path":"https://icpm-kth.github.io/uqsa/articles/models.html","id":"parameters","dir":"Articles","previous_headings":"","what":"Parameters","title":"Importing Models","text":"goal perform parameter estimation. systems biology model typically parameters either reaction rate coefficients \\(k_f\\), equilibrium constants \\(K_d\\), Hill coefficients, many quantities related kinetc laws; often unknown uniquely determined yet. , parameters model unknown, model parameters intrinsic system study. model interventions model performing experiment. frequency driving force mechanical model, amount treatment dose (added system) affects time course reactions: substrate, buffer enzyme, silencing agent, inhibitor parameters known us, written protocol. input time dependent, dynamics (explicit algebraic functions) become part model. input parameters can different experiments, intrinsic parameters always . ordinary differential equation hand need know distinction known unknown parameters. reasons: k intrinsic, unknown parameters (subject sampling), u known input parameters encoded input field experiment. input parameters exist, always concatenated order passed model, model’s C code sees p. wrapper functions rgsl package concatenation solver called. sample k usually logarithmic space, solver gets proposed k appends right u experiment, linear space.","code":"k = [...] # some parameter set u = experiments[[i]]$input p = c(k,u) # solve ODE using p"},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"create-a-vector-field-for-ode-solvers","dir":"Articles","previous_headings":"","what":"Create a Vector Field for ODE solvers","title":"Build C and R source for a model","text":"assume wrote model SBtab. testing can also download one example models. code meant run terminal POSIX shell (bash, zsh, dash, ash) work (usually pre-installed windows). Please aware scripts use awk sed, may differ different platforms (one true awk, GNU gawk, mawk, etc.). differ options accept regular expressions understand. assume format collection tsv files. SBtabVFGEN package contains file called sbtab_to_vfgen (script, RScript, R needed). Copy directory model (alias itm symlink , whatever prefer) Afterwards, directory also contain .vf file well sbml .xml file zip file (essentially content vf file).","code":"./sbtab_to_vfgen *.tsv"},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"make-source-code-for-your-model","dir":"Articles","previous_headings":"Create a Vector Field for ODE solvers","what":"Make Source Code for your Model","title":"Build C and R source for a model","text":"convert ordinary differential equations code solvers, need calculate appropriate expressions jacobian. calculations either download contents sh directory icpm-kth/RPN-derivative, clone entire repository (optionally make install). want run conversion ODE code directory, easiest way set alias: , alias ode.sh script. alternative write path every time, set variable full path (script loads files doesn’t work copied without others). assume repository clone lies $HOME directory. Now .c source file shared library .file (unless model errors, model complex translation).","code":"alias ode.sh='~/RPN-derivative/sh/ode.sh' ode.sh -C --maxima myModel.vf > myModel_gvf.c [ -f myModel_gvf.c ] && gcc -shared -fPIC -O2 -o myModel.so myModel_gvf.c"},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Build C and R source for a model","text":"can find code blocks storage format.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"sbtab-as-tsv","dir":"Articles","previous_headings":"Summary","what":"SBtab as TSV","title":"Build C and R source for a model","text":"summary code previous section:","code":"alias sbtab_to_vfgen='~/SBtabVFGEN/sbtab_to_vfgen' alias ode.sh='~/RPN-derivative/sh/ode.sh' ./sbtab_to_vfgen *.tsv ode.sh -C myModel.vf > myModel_gvf.c ode.sh -R myModel.vf > myModel.R [ -f myModel_gvf.c ] && gcc -shared -fPIC -O2 -o myModel.so myModel_gvf.c"},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"sbtab-as-xlsx","dir":"Articles","previous_headings":"Summary","what":"SBtab as XLSX","title":"Build C and R source for a model","text":"procedure applies, alias sbtab_to_vfgen rather copying time. Also, time use yacas calculate derivatives, rather maxima. create C code R code time.","code":"alias sbtab_to_vfgen='~/SBtabVFGEN/sbtab_to_vfgen' alias ode.sh='~/RPN-derivative/sh/ode.sh' ./sbtab_to_vfgen myModel.xlsx ode.sh -C --yacas myModel.vf > myModel_gvf.c ode.sh -R --yacas myModel.vf > myModel.R [ -f myModel_gvf.c ] && gcc -shared -fPIC -O2 -o myModel.so myModel_gvf.c"},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"sbtab-as-ods","dir":"Articles","previous_headings":"Summary","what":"SBtab as ODS","title":"Build C and R source for a model","text":"repeat procedure XLSX, model name variable, C compiler whatever target cc links :","code":"modelName='myModel' alias sbtab_to_vfgen='~/SBtabVFGEN/sbtab_to_vfgen' alias ode.sh='~/RPN-derivative/sh/ode.sh' ./sbtab_to_vfgen ${modelName}.ods ode.sh -C --yacas ${modelName}.vf > ${modelName}_gvf.c ode.sh -R --yacas ${modelName}.vf > ${modelName}.R [ -f ${modelName}_gvf.c ] && cc -shared -fPIC -O2 -o ${modelName}.so ${modelName}_gvf.c"},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"comments","dir":"Articles","previous_headings":"","what":"Comments","title":"Build C and R source for a model","text":"Now C sources shared library, error messages SBtab content (files contain errors). simulator can use shared library directly. take account ${modelName}.machine specific work copy onto completely different kind machine (may work two similar enough). Please take time open inspect C sources try spot obvious mistakes.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/shortMakeSharedLibrary.html","id":"rpn-derivative","dir":"Articles","previous_headings":"","what":"RPN-derivative","title":"Build C and R source for a model","text":"RPN-derivative package can also work without maxima yacas, needs compiled work. RPN-derivative’s root directory: get error messages pkg-config found, install (probably MAC: brew install pkg-config). get error messages missing directories, make (mkdir /path//missing/directory).","code":"make make test sudo make install"},{"path":"https://icpm-kth.github.io/uqsa/articles/simAKAP79.html","id":"load-the-model","dir":"Articles","previous_headings":"","what":"Load the Model","title":"Example Simulation","text":"model included package. load model, see user model article.","code":"modelFiles <- uqsa_example(\"AKAP79\",full.names=TRUE) SBtab <- SBtabVFGEN::sbtab_from_tsv(modelFiles) #> [tsv] file[1] «/home/andrei/R/library/uqsa/extdata/AKAP79/AKAP79_Compound.tsv» belongs to Document «AKAP79» #>  I'll take this as the Model Name. modelName <- checkModel(\"AKAP79\",uqsa_example(\"AKAP79\",pat=\"_gvf[.]c$\")) #> building a shared library from c source, and using GSL odeiv2 as backend (pkg-config is used here). #> cc -shared -fPIC `pkg-config --cflags gsl` -o './AKAP79.so' '/home/andrei/R/library/uqsa/extdata/AKAP79/AKAP79_gvf.c' `pkg-config --libs gsl` comment(modelName) #> [1] \"./AKAP79.so\"  # model related functions, in R, e.g. AKAP79_default() parameters source(uqsa_example(\"AKAP79\",pat='^AKAP79[.]R$',full.names=TRUE)) print(AKAP79_default()) #>            kf_Rii_C__RiiP_C kf_RiiP_CxcAMP__RiiP_C_cAMP  #>                    33.00000                     0.49600  #> kf_RiiP_cAMPxC__RiiP_C_cAMP kb_RiiP_cAMPxC__RiiP_C_cAMP  #>                     0.00545                     0.01560  #>     kb_RiiPXcAMP__RiiP_cAMP     kf_RiiPXcAMP__RiiP_cAMP  #>                     0.00160                     0.01500  #>           kf_RiiPxC__RiiP_C           kb_RiiPxC__RiiP_C  #>                     0.03800                     0.00260  #>       kf_cAMPxRii__Rii_cAMP       kb_cAMPxRii__Rii_cAMP  #>                     0.01500                     0.00160  #>   kf_Rii_CxcAMP__Rii_C_cAMP   kb_Rii_CxcAMP__Rii_C_cAMP  #>                     0.49600                     1.41300  #>             kf_RiixC__Rii_C   kf_Rii_cAMPxC__Rii_C_cAMP  #>                     2.10000                     0.29840  #>   kb_Rii_cAMPxC__Rii_C_cAMP  kf_Rii_C_cAMP__RiiP_C_cAMP  #>                     0.01800                    33.00000  #>             kb_RiixC__Rii_C                   AKAPoff_1  #>                     0.00030                     2.60000  #>                   AKAPoff_3                    AKAPon_1  #>                    20.00000                     0.45000  #>                    AKAPon_3                  kf_C_AKAR4  #>                     2.00000                     0.01800  #>                  kb_C_AKAR4                  kcat_AKARp  #>                     0.10600                    10.20000  #>                       kmOFF                        kmON  #>                   100.00000                     1.00000  #>                        KD_T                      b_AKAP  #>                     0.70000                     0.00000"},{"path":"https://icpm-kth.github.io/uqsa/articles/simAKAP79.html","id":"load-experiments-data","dir":"Articles","previous_headings":"","what":"Load Experiments (data)","title":"Example Simulation","text":"also includes instructions simulator.","code":"experiments <- sbtab.data(SBtab) # for example, these are the input # and initial state of experiment 1: print(experiments[[1]]$input) #> [1] 1 print(experiments[[1]]$initialState) #>           Rii          cAMP          RiiP         Rii_C     RiiP_cAMP  #>          6.30          0.00          0.00          0.63          0.00  #>        RiiP_C   RiiP_C_cAMP             C      Rii_cAMP    Rii_C_cAMP  #>          0.00          0.00          0.00          0.00          0.00  #>           CaN      RiiP_CaN RiiP_cAMP_CaN         AKAR4       AKAR4_C  #>          1.50          0.00          0.00          0.20          0.00  #>        AKAR4p  #>          0.00 # pick prameters for simulation nInput <- length(experiments[[1]]$input) p <- head(AKAP79_default(),-nInput) print(p) #>            kf_Rii_C__RiiP_C kf_RiiP_CxcAMP__RiiP_C_cAMP  #>                    33.00000                     0.49600  #> kf_RiiP_cAMPxC__RiiP_C_cAMP kb_RiiP_cAMPxC__RiiP_C_cAMP  #>                     0.00545                     0.01560  #>     kb_RiiPXcAMP__RiiP_cAMP     kf_RiiPXcAMP__RiiP_cAMP  #>                     0.00160                     0.01500  #>           kf_RiiPxC__RiiP_C           kb_RiiPxC__RiiP_C  #>                     0.03800                     0.00260  #>       kf_cAMPxRii__Rii_cAMP       kb_cAMPxRii__Rii_cAMP  #>                     0.01500                     0.00160  #>   kf_Rii_CxcAMP__Rii_C_cAMP   kb_Rii_CxcAMP__Rii_C_cAMP  #>                     0.49600                     1.41300  #>             kf_RiixC__Rii_C   kf_Rii_cAMPxC__Rii_C_cAMP  #>                     2.10000                     0.29840  #>   kb_Rii_cAMPxC__Rii_C_cAMP  kf_Rii_C_cAMP__RiiP_C_cAMP  #>                     0.01800                    33.00000  #>             kb_RiixC__Rii_C                   AKAPoff_1  #>                     0.00030                     2.60000  #>                   AKAPoff_3                    AKAPon_1  #>                    20.00000                     0.45000  #>                    AKAPon_3                  kf_C_AKAR4  #>                     2.00000                     0.01800  #>                  kb_C_AKAR4                  kcat_AKARp  #>                     0.10600                    10.20000  #>                       kmOFF                        kmON  #>                   100.00000                     1.00000  #>                        KD_T  #>                     0.70000"},{"path":"https://icpm-kth.github.io/uqsa/articles/simAKAP79.html","id":"simulate","dir":"Articles","previous_headings":"","what":"Simulate","title":"Example Simulation","text":"make function s, always simulate scenarios described experiments list, user supplied parameters.","code":"s <- simulator.c(experiments,modelName,noise=TRUE) #> Loading required package: rgsl y <- s(p)"},{"path":"https://icpm-kth.github.io/uqsa/articles/simAKAP79.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"Example Simulation","text":"","code":"E <- 10 # which experiment to plot out <- experiments[[E]]$outputValues$AKAR4pOUT err <- experiments[[E]]$errorValues$AKAR4pOUT tm <- experiments[[E]]$outputTime  par(bty='n',xaxp=c(80,120,4)) plot(tm,      y[[E]]$func[1,,1],      type='l',      ylim=c(90,130), ylab=\"AKAR4p\",      xlab=\"t\",      main=sprintf(\"Experiment %i\",E),      lwd=1.5,      col=\"purple\" )  points(tm,out) arrows(x0=tm,x1=tm,y0=out,y1=out+err,angle=90,length=0.025) arrows(x0=tm,x1=tm,y0=out,y1=out-err,angle=90,length=0.025)"},{"path":"https://icpm-kth.github.io/uqsa/articles/simAKAP79.html","id":"gg-plot","dir":"Articles","previous_headings":"","what":"gg-Plot","title":"Example Simulation","text":"","code":"require(ggplot2) #> Loading required package: ggplot2  D<-data.frame(time=experiments[[E]]$outputTime,               AKAR4p=experiments[[E]]$outputValues$AKAR4pOUT,               AKAR4pERR=experiments[[E]]$errorValues$AKAR4pOUT,               sim=y[[E]]$func[1,,1]) ggplot(D) +   geom_linerange(mapping=aes(x=time,y=AKAR4p,ymin=AKAR4p-AKAR4pERR,ymax=AKAR4p+AKAR4pERR),na.rm=TRUE) +   geom_point(mapping=aes(x=time,y=AKAR4p),na.rm=TRUE) +   geom_line(mapping=aes(x=time,y=sim),color=\"purple\",lwd=1.2)"},{"path":[]},{"path":"https://icpm-kth.github.io/uqsa/articles/simulate.html","id":"runmodel","dir":"Articles","previous_headings":"R-functions","what":"runModel","title":"Simulate","text":"Simulate Experiment using ODE Model, without using closures previous sections. function uses GSL solvers, R solver deSolve [default] simulate ODE model initial states input characteristic experiments provided input. model name comment indicates model file ending ., function use shared library GSL solvers. Input arguments experiments (list) - experiments simulate. experiment variable element variable experiments imported via function import_experiments modelName(character) - used find model files functions within file (prefix), optionally comment indicating file parABC (numeric) - matrix column vectors; column contains vector normal parameters (e.g. kinetic parameters like kf kr) input_parameters (concatenated order, .e. first parameters, inputs). number columns N, N simulations performed. parMap (function) - re-mapping function apply parameters (e.g. switch linear logarithmic scale) Output (list) List whose elements correspond simulation experiment provided input argument experiments. element turn list, elements: - state (numeric) - value approximated solution ODE system time point experimental measurements - func (numeric) - value output time point experimental measurements","code":"runModel(experiments, modelName,  parABC, parMap=identity)"},{"path":"https://icpm-kth.github.io/uqsa/articles/simulate.html","id":"checkmodel","dir":"Articles","previous_headings":"R-functions","what":"checkModel","title":"Simulate","text":"Assign simulation file given model, compile model necessary, check existence: SBtab document contains model name, SBtabVFGEN::sbtab_from_tsv includes information comment return value. checkModel returns model name supplied first slot, additional comments file. user can course pick different model name point. circumvent function. alternative function, sufficient write function attempt find model file, current directory. , checkModel compile GSL compatible C source file shared object modelFile ends .c stop doesn’t work. case, function stops execution model file doesn’t exist. Input arguments * modelName (character) * modelFile (character) - string, model file different “modelName.R”. file name ends .c, c source compiled shared library. Output (character) returned value “modelName” additional comment file use simulations.","code":"model.sbtab <- SBtabVFGEN::sbtab_from_tsv(model.tsv) modelName <- checkModel(comment(model.sbtab),modelFile=NULL) modelName <- \"test_ode_model\"             # or some other model name comment(modelName) <- \"test_ode_model.so\" # e.g.: manually compiled"},{"path":"https://icpm-kth.github.io/uqsa/articles/simulate.html","id":"makeobjective","dir":"Articles","previous_headings":"R-functions","what":"makeObjective","title":"Simulate","text":"Creates Objective functions ingredients (closures) function creates function obj (closure), used ABCMCMC parameter estimation. created function accepts one argument input: vectorial parameter matrix parameters, column corresponding parameter vector. function obj(par) : 1. apply transformation parMap column par: 1. experiment, append input parameters (experiments[[]]$input) 2. simulate experiments, inputs, events, initial values experiments 3. calculate model’s output functions 4. use distance measure function obtain distance simulation experimental data (experiments[[]]$outputValues) 2. save distances matrix: distance[,j] distance data model functions experiment parameter set j Input arguements * experiments (list) - simulation experiments * modelName (character) - model name string, model storage file comment variable * distance (function) - function calculates ABC scores, .e. distance experimental simulated data * parMap (function) - function transforms ABC variables acceptable model parameters (e.g. allowing switch linear logarithmic scale) Output (function) output function accepts one parameter matrix par calculates distance experimental data data simulated model using par.","code":"obj <- makeObjective(experiments,modelName,distance,parMap=identity)"},{"path":"https://icpm-kth.github.io/uqsa/articles/tsv.html","id":"storing-models-in-the-tsv-format","dir":"Articles","previous_headings":"","what":"Storing models in the TSV format","title":"Tab Separated Values","text":"Advantages: tsv files text files. can use version control track changes (git) ods xlsx compressed xml real spreadsheet formats, sbml, require library language bindings import content language like R (similar) import libraries become unmaintained, theR package removed CRAN, format becomes unavailable. hidden columns hidden rows cells comments colors multiline cell content may asking : json, yaml, toml? valid questions! , tsv simlest lot. Disadvantages: TSV files best contain one table time, thus SBtab document collection tsv files (us, must) TSV files ususally displayed pretty way opening text editor (columns align) \\n systems \\r\\n others (\\n\\r?) kf * * B exported \"kf * * B\" (even though spaces, tabs)","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/tsv.html","id":"line-endings","dir":"Articles","previous_headings":"Storing models in the TSV format","what":"Line Endings","title":"Tab Separated Values","text":"remove \\r, inserted spreadsheet program: reverse: restore line endings operating systems ending *dows prefer.","code":"tr -d '\\r' tr '\\n' '\\r\\n'"},{"path":"https://icpm-kth.github.io/uqsa/articles/tsv.html","id":"conversion","dir":"Articles","previous_headings":"Storing models in the TSV format","what":"Conversion","title":"Tab Separated Values","text":"Excel LibreOffice just export spreadsheet collection .tsv files. ssconvert program gnumeric package can . SBtabVFGEN package contains convenience script (still using ssconvert), important line : also companion script combines several .tsv files one spreadsheet: tsv ods conversion amounts : .ods file ending can replaced different format.","code":"LC_ALL=\"C\" ssconvert -S \\  --export-type=Gnumeric_stf:stf_assistant \\  --export-options=\"quoting-mode=never separator='   ' locale=C\" \\    DemoModel.{ods,xlsx,gnumeric} \"%s.tsv\" $ ls -1 ~/SBtabVFGEN/*.sh ~/SBtabVFGEN/ods_to_tsv.sh ~/SBtabVFGEN/tsv_to_ods.sh ssconvert --merge-to=\"OUT-FILE.ods\" *.tsv"},{"path":"https://icpm-kth.github.io/uqsa/articles/uq.html","id":"introduction-to-uq","dir":"Articles","previous_headings":"","what":"Introduction to UQ","title":"Uncertainty Quantification","text":"Uncertainty Quantification global Sensitivity Analysis common tasks systems biology. Uncertainty quantification aims establish amount knowledge (indeed lack) possible values model parameters. knowledge expressed form probability distributions parameters, even though parameters random variables. case probability related randomness within observed data: measurement noise. noise direct implications possible parameters: parameters high probability density values can easily explain data, unlikely parameters require random noise uncharacteristically large values given measurements package aims characterize posterior probability distribution \\(p(\\theta|D)\\), \\(\\theta\\) vector directly maps model parameters used Markov chain variable, e.g.: \\(\\rho = exp(\\theta)\\), \\(\\rho\\) real model parameters. target distribution quantifies amount knowledge \\(\\theta\\), indirectly also internal parameters model. field systems biology, internal parameters \\(\\rho\\) typically quantities like reaction rate coefficients \\(k_{\\{f,b\\}}\\), dissociation constants (equilibrium constants) \\(K_{D}\\), Hill exponents \\(m\\), parameters relate gene expression, enzyme-substrate interaction, biochemical processes.","code":""},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"loading-the-model","dir":"Articles","previous_headings":"","what":"Loading the Model","title":"Using your own model","text":"model collection tsv files, need create R list names; just one file need type name. cases, need load SBtabVFGEN. instructions .ods (readODS) .excel (readxl) files work long packages use load remain available. .tsv format safest bet reliability, text files object read much (read .tsv files utils::read.delim).","code":"library(SBtabVFGEN)"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"tab-separated-values","dir":"Articles","previous_headings":"Loading the Model","what":"Tab Separated Values","title":"Using your own model","text":"information solve common tasks regarding tsv files, see tsv topic. obtain list tsv files current directory, import contents, like :","code":"modelFiles <- dir(pattern='[.]tsv$') SBtab <- sbtab_from_tsv(modelFiles)"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"open-document-spreadsheet","dir":"Articles","previous_headings":"Loading the Model","what":"Open Document Spreadsheet","title":"Using your own model","text":"files can created Libre Office, Apple’s numbers program, gnumeric, web-hosted spreadsheet application (like google spreadsheets).","code":"modelFiles <- \"DemoModel.ods\" SBtab <- sbtab_from_ods(modelFiles)"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"excel","dir":"Articles","previous_headings":"Loading the Model","what":"Excel","title":"Using your own model","text":"can created MS Excel, loaded like :","code":"modelFiles <- \"DemoModel.xlsx\" SBtab <- sbtab_from_excel(modelFiles)"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"converting-to-an-ordinary-differential-equation-model","dir":"Articles","previous_headings":"","what":"Converting to an Ordinary Differential Equation Model","title":"Using your own model","text":"R, SBtab content now named list data frames (!ID column serving row.names): data frame corresponds sheet name. first column always used assign row names creating data frames. next command produces lot output, details script interprets model. also conservation law analysis automatically replace state variables algebraic assignments. script picks Compounds largest initial amount replaced. Normally, reacting compounds represented state variables, conserved quantities interpreted additional input parameters. writes three main files: DemoModel.vf - vfgen vector field file (custom xml content). DemoModel.mod - NEURON mod file, simulations NEURON software. DemoModel.xml - SBML file simulations COPASI others. done sbml package available (R package). script also writes findings fairly format-free way, text files (can interpreted ODE without target software mind). SBtabVFGEN::sbtab_to_vfgen() also attempts zip .txt files.","code":"SBtab$Reaction conservationLaws <- sbtab_to_vfgen(SBtab)"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"automated-procedure","dir":"Articles","previous_headings":"Converting to an Ordinary Differential Equation Model","what":"Automated Procedure","title":"Using your own model","text":"github repository SBtabVFGEN (systems biology table vector field generator) also includes RScript called sbtab_to_vfgen, begins : , can called directly command line, like : just create .vf, .xml, .MOD files, well ConservationLaws.h5 (hdf5 file) .RData file conservation laws. NOTE: wish turn conservation law analysis , don’t supply comamnd line option --cla. file formats also work R packages read (.ods, .xlsx).","code":"#!/usr/bin/env Rscript  library(SBtabVFGEN) args <- commandArgs(TRUE) $ ./sbtab_to_vfgen *.tsv        # no   conservation law analysis $ ./sbtab_to_vfgen --cla *.tsv  # with conservation law analysis"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Using your own model","text":"data component SBtab extracted using returns list one element per entry Experiments table (SBtab$Experiments R). list item contains data set (two data frames, second measurement error estimates), also inputs model meant fit data, initial values state variables. simulation instructions always accompany data, can include scheduled events (sudden changes system).","code":"SBtab <- SBtabVFGEN::sbtab_from_ods(\"myModel.ods\") experiments <- SBtabVFGEN::sbtab.data(SBtab,conservationLaws) experiments[[1]]$input"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"the-ode-must-be-converted-to-code","dir":"Articles","previous_headings":"","what":"The ODE must be converted to code","title":"Using your own model","text":"vf file, SBML, even text output created yet code can simulated. ODE solver needs right-hand-side function, programming language solver runs . software, code generation happens invisibly background, model kept high level language (makes simulations slow). prefer able see generated code, check errors, change code hand (necessary). ODE model source-code can also written hand th efirst place. case none needed; , started . difficult gets difficult bigger models. Fast, advanced (accurate) solvers require additional functions, least jacobian ODE system: \\[ J(t,x;p)_{ij} = \\frac{d f_i(t,x;p)}{dx_j}\\,,\\] \\(p\\) parameters ODE model. generate code automatically using package: RPN-derivative. R package (’s partially written C), can run command line POSIX compliant shell (zsh,bash,dash, etc.). uses sed awk well, always present unix derived system (annoyingly, different capabilities). package repository contains shell script called ode.sh, can use one three backends derivative calculations: internal, maxima, yacas. just file, installed anywhere, package contains helper programs (calculate derivatives), can installed (make && make install). can entirely omit make step plan using maxima yacas backend. probably good alias ode shell script: alias ode='$HOME/RPN-derivative/sh/ode.sh' (wherever put file). , alternatively, put somewhere $PATH. , generically: files need re-created change model structurally. change initial conditions, parameter values result largely code, except function returns default initial conditions default parameter values. R code usually used simulations (us), can useful call model functions within R (e.g. simulation), build sampling algorithms, make user-supplied objective function internally uses deSolve package simulations. functions DemoModel.R compatible deSolve. DemoModel_gvf.c can either convert shared library , use checkModel function included uqsa: shared object file can used simulations.","code":"ode --maxima -C DemoModel.vf > DemoModel_gvf.c ode [--yacas|--maxima] -R DemoModel.{zip,vf,tar.gz} > DemoModel.R gcc -shared -fPIC -O2 -o DemoModel.so DemoModel_gvf.c modelName <- uqsa::checkModel(\"DemoModel\", \"./DemoModel_gvf.c\")                              # model-name,      file-name ## comment(modelName) == \"DemoModel.so\""},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"simulations","dir":"Articles","previous_headings":"","what":"Simulations","title":"Using your own model","text":"previously created modelName variable comment attribute (can also set , magic ). comment indicates shared object file simulate . R, using uqsa first create closure: now, sim function implicitly depends simulation instructions list experiments, explicitly supplied parameters p (numeric vector, matrix). return value y also list one result per experiment: length(y)==length(experiments). result contains two components per list item: state variables, output values corresponds experiment l, output function , time-point j, parameter column k (p matrix). p vector, k can 1. Similarly, state variables: corresponds experiment l, state variable , time-point j, parameter column k (, relevant p matrix). results can visualized plotting experiment’s output time values: (case p vector).","code":"sim <- simulator.c(experiments, modelName) y <- sim(p) y[[l]]$func[i,j,k] # a number y[[l]]$state[i,j,k] # a number # plot output function 1, for experiment 2 p <- model$par()[seq(n)] y <- sim(p) plot(experiments[[2]]$outputTimes, y[[2]]$func[1,,])"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"parameters","dir":"Articles","previous_headings":"Simulations","what":"Parameters","title":"Using your own model","text":"Observe model$par() returns ODE model parameters, can biological parameters, components : biological parameters (SBtab$Parameter) origignal input parameters (SBtab$Input) derived input parameter, conservationlaws (conserved constants) inputs allowed different experiment (definition), biological parameters experiments simulated one go. Therefore, supply biological parameters (first n) simultor retrieves others experiments variable, concatenation: experiment l, c(parMap(p),experiments[[l]]$input), parMap non-trivial.","code":"c(p,experiments[[l]]$input) # for each l"},{"path":"https://icpm-kth.github.io/uqsa/articles/user_model.html","id":"benefits-of-intermediates","dir":"Articles","previous_headings":"Simulations","what":"Benefits of Intermediates","title":"Using your own model","text":"Every step produces output file carries meaning: consideration regarding systems (input/output model) .vf file represents model ODE .c file code representation ODE model, intended specific solver suite. files can checked user, internal formats hidden; can help checking errors testing, resability, interoperability different software packages. vfgen software can also create model files R C, functions slightly different . decided write converter several reasons: script creates one output function returns vector (one item per output line SBtab) – vector valued output functions, can depend constants model, previous parameters, even initial time t₀, e.g.: double par12 = t>0 ? par3*par5 : par5; use error codes probe dimensionality model, without writing extra data structures","code":""},{"path":"https://icpm-kth.github.io/uqsa/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexandra Jauhiainen. Author. Olivia Eriksson. Author, maintainer. Federica Milinanni. Author. Andrei Kramer. Author, contributor.","code":""},{"path":"https://icpm-kth.github.io/uqsa/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kramer , Milinanni F, Nyquist P, Jauhiainen , Eriksson O (2023). “UQSA – R-Package Uncertainty Quantification Sensitivity Analysis Biochemical Reaction Network Models.” doi: 10.48550/arXiv.2308.05527, 2308.05527. Jauhiainen Alexandra, Eriksson Olivia, Milinanni Federica, Kramer Andrei, (2024). uqsa: Uncertainty Quanitification Global Sensitivity Analysis via ABC sampling. R package version 0.1.4, https://icpm-kth.github.io/uqsa/","code":"@Misc{,   title = {UQSA -- An R-Package for Uncertainty Quantification and Sensitivity Analysis for Biochemical Reaction Network Models},   author = {Andrei Kramer and Federica Milinanni and Pierre Nyquist and Alexandra Jauhiainen and Olivia Eriksson},   year = {2023},   eprint = {2308.05527},   archiveprefix = {arXiv},   primaryclass = {q-bio.QM},   doi = {https://doi.org/10.48550/arXiv.2308.05527}, } @Manual{,   title = {{uqsa}: Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling},   author = {Alexandra Jauhiainen and Olivia Eriksson and Federica Milinanni and Andrei Kramer},   year = {2024},   note = {R package version 0.1.4},   url = {https://icpm-kth.github.io/uqsa/}, }"},{"path":"https://icpm-kth.github.io/uqsa/index.html","id":"uncertainty-quantification-uq-and-sensitivity-analysis-sa","dir":"","previous_headings":"","what":"Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling","title":"Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling","text":"R package performs parameter estimation, uncertainty quantification, global sensitivity analysis using Bayesian methods ABC-MCMC sampling. Source code: https://github.com/icpm-kth/uqsa/ Articles page user guide package. always, function reference also accessible within R (?uqsa::ABCMCMC), installation. See Get Started detailed installation instructions.","code":"install.packages(\"remotes\") remotes::install_github(\"icpm-kth/uqsa\")"},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"Given set simulation experiments (list), model, parameter boundaries, function draw sample parameters posterior probability density given problem.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"","code":"ABCMCMC(objectiveFunction, startPar, nSims, Sigma0, delta, dprior)"},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"objectiveFunction function , given (vectorial) parameter input, simulates model, outputs distance experimental data data simulated model parameter provided input startPar starting value parameter vector nSims requested sample size Sigma0 multivariate normal covariance Markov chain transition kernel delta ABC acceptance threshold dprior function returns prior probability density values","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"list containing sample matrix vector scores (values delta sample)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ABCMCMC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Performs and Approximate Bayesian Computation Sampling of Model Parameters — ABCMCMC","text":"Initially function performs similar job optimizer, transitions MCMC sampling.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkFitWithPreviousExperiments.html","id":null,"dir":"Reference","previous_headings":"","what":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","title":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","text":"prior probability density model using copulas vines perfect, values sampled imperfect prior estimate can checked old data.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkFitWithPreviousExperiments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","text":"","code":"checkFitWithPreviousExperiments(draws, objectiveFunction, delta)"},{"path":"https://icpm-kth.github.io/uqsa/reference/checkFitWithPreviousExperiments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","text":"draws matrix sampled values (filtered). objectiveFunction function , given (vectorial) parameter input, simulates model, outputs distance experimental data data simulated model parameter provided input delta acceptance threshold.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkFitWithPreviousExperiments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ABC acceptance of currently sampled values given old data (Prior) — checkFitWithPreviousExperiments","text":"filtered subset acceptable parameter draws","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":null,"dir":"Reference","previous_headings":"","what":"checkModel tries to establish the simulation file for a given model — checkModel","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"function returns model name, additional comments file","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"","code":"checkModel(modelName, modelFile = NULL)"},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"modelName string modelFile string, model file different \"modelName.R\". file name ends .c, c source compiled shared library.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"modelName additional comment file use simulations","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/checkModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"checkModel tries to establish the simulation file for a given model — checkModel","text":"alternative function, sufficient write function attempt find model file, current directory. , checkModel compile GSL compatible C source file shared object modelFile ends .c stop work. compiler called using system call, may incorrect system -- funciton fails, make shared library model using correct compiler options system. case, function stops execution model file exist, simulations possible.","code":"modelName <- \"test_ode_model\"             # or some other model name comment(modelName) <- \"test_ode_model.so\""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ODE parameter to Gillespie parameter — convert.parameter","title":"Convert ODE parameter to Gillespie parameter — convert.parameter","text":"ODE parameters usually different unit measurement parameters need stochastic simulators.  ODEs fluxes, multiples M/s (M mol/liter), unit first derivative state variables.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ODE parameter to Gillespie parameter — convert.parameter","text":"","code":"convert.parameter(k, n = 0, LV = 602214076)"},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ODE parameter to Gillespie parameter — convert.parameter","text":"k ODE reaction rate coefficient (mandatory) n multiplicity reactant, (order > 0); omit zero-order LV L*V -- product Avogadro's number volume defaults 6.02214076e+8","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ODE parameter to Gillespie parameter — convert.parameter","text":"rescaled parameter stochastic simulation comment re-scale ","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert ODE parameter to Gillespie parameter — convert.parameter","text":"reaction rate coefficients mass action kinetics, kf kb units compatible flux units, depending order reaction (order related reaction's stoichiometry).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/convert.parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert ODE parameter to Gillespie parameter — convert.parameter","text":"","code":"# reaction: \"2 A + B -> C\" k <- 1.0 attr(k,'unit') <- \"µM/s\" n <- c(2,1) reactants <- c('A','B') uqsa:::convert.parameter(k,n) #> [1] 2.75739e-24 #> attr(,\"unit\") #> [1] \"µM/s\" #> attr(,\"conversion\") #> [1] 2.75739e-24"},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"copulaPrior creates a prior probability density function — dCopulaPrior","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"function accepts return list fitCopula() makeIndepCopula() creates density function .","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"","code":"dCopulaPrior(Copula)"},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"Copula list, returned fitCopula() makeIndepCopula","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"function maps parameters (vector) probability density values (scalar)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dCopulaPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"copulaPrior creates a prior probability density function — dCopulaPrior","text":"","code":"x<-rnorm(300,mean=1,sd=2) X<-matrix(x,100,3) C<-fitCopula(X) d<-dCopulaPrior(C) print(d(c(1,2,3))) #> [1] 0.006219984 print(prod(sapply(c(1,2,3),FUN=dnorm,mean=1,sd=2))) #> [1] 0.004248212"},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"returned density function takes vectors size mean sd. returns product components' one-dimensional normal distribution, mean \"mean\" standard deviation \"sd\".","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"","code":"dNormalPrior(mean, sd)"},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"mean mean random variables (vector) sd standard deviation random variables (size vector mean)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"probability density function vectors length mean sd.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dNormalPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dNormalPrior creates the density function of a multivariate normal distribution with independent components — dNormalPrior","text":"","code":"dnp<-dNormalPrior(mean=c(0,1,2),sd=c(1,2,3)) dnp(c(0.5,1.5,2.5)) #> [1] 0.008926651"},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"dUniformPrior creates a uniform density function — dUniformPrior","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"returned denisty function takes vectors size ll ul. returns product component's one-dimensional uniform distribtions.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"","code":"dUniformPrior(ll, ul)"},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"ll lower limit random variables (vector) ul upper limit random variables (size vector ll)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"probability density function vectors withthe length ll ul.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/dUniformPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dUniformPrior creates a uniform density function — dUniformPrior","text":"","code":"dup<-dUniformPrior(ll=c(0,1,2),ul=c(1,2,3)) dup(c(0.5,1.5,2.5)) #> [1] 1"},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultAcceptance.html","id":null,"dir":"Reference","previous_headings":"","what":"default ABC acceptance probability function for one experiment — defaultAcceptance","title":"default ABC acceptance probability function for one experiment — defaultAcceptance","text":"experiment corresponds one simulation fully quanitified , calculating overall distance data experiment can done one one. function describes default way simulation compared data.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultAcceptance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"default ABC acceptance probability function for one experiment — defaultAcceptance","text":"","code":"defaultAcceptance(funcSim, dataVAL, dataERR = max(dataVAL))"},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultAcceptance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"default ABC acceptance probability function for one experiment — defaultAcceptance","text":"funcSim matrix, contains model solution (output values), columns output vectors dataVAL data.frame experimental data dataERR data.frame measurement errors, available, defaults maximum data value.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultAcceptance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"default ABC acceptance probability function for one experiment — defaultAcceptance","text":"data complex, two simulations needed calculate one distance value objective-Function needs entirely user-supplied. case experiments \"control\" -- needed measurement arbitrary units makes sense comparatively secondary (control) scenario. function used none provided user. funcSim values need supplied matrix size N×T N length model's output vectors T amount measurement times (rgsl package returns simulation results).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultDistance.html","id":null,"dir":"Reference","previous_headings":"","what":"default distance function for one experiment — defaultDistance","title":"default distance function for one experiment — defaultDistance","text":"experiment corresponds one simulation fully quanitified , calculating overall distance data experiment can done one one. function describes default way simulation compared data.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultDistance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"default distance function for one experiment — defaultDistance","text":"","code":"defaultDistance(funcSim, dataVAL, dataERR = max(dataVAL))"},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultDistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"default distance function for one experiment — defaultDistance","text":"funcSim matrix, contains model solution (output values), columns output vectors dataVAL data.frame experimental data dataERR data.frame measurement errors, available, defaults maximum data value.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/defaultDistance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"default distance function for one experiment — defaultDistance","text":"data complex, two simulations needed calculate one distance value objective-Function needs entirely user-supplied. case experiments \"control\" -- needed measurement arbitrary units makes sense comparatively secondary (control) scenario. function used none provided user. funcSim values need supplied matrix size N×T N length model's output vectors T amount measurement times (rgsl package returns simulation results).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformation.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher Information from Sensitivity — fisherInformation","title":"Fisher Information from Sensitivity — fisherInformation","text":"Given list simulation sensitivities, function returns fisher information (sum experiments). actual work done returned function implicitly depends model, experiments, parameter mapping","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher Information from Sensitivity — fisherInformation","text":"","code":"fisherInformation(model, experiments, parMap = identity, parMapJac = 1)"},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher Information from Sensitivity — fisherInformation","text":"model list R functions ODE model experiments list experiments, inputs parMap mapping MCMC variables ODE parameters parMapJac jacobian map","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher Information from Sensitivity — fisherInformation","text":"fisher information calculating funciton","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fisher Information from Sensitivity — fisherInformation","text":"return value: function(par, simulations, sensitivity) -> fisherInformation (matrix) par refers model parameters (possibly transformed), simulations performed parameters.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformationFromGSA.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Global Fisher Information — fisherInformationFromGSA","title":"Calculate Global Fisher Information — fisherInformationFromGSA","text":"Given sample, performs global sensitivity analysis, squares sensitivity.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformationFromGSA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Global Fisher Information — fisherInformationFromGSA","text":"","code":"fisherInformationFromGSA(Sample, yf = NULL, E)"},{"path":"https://icpm-kth.github.io/uqsa/reference/fisherInformationFromGSA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Global Fisher Information — fisherInformationFromGSA","text":"Sample MCMC sample, ABC sample yf simulations sample E experiments list","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fitCopula.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a Probability Density Estimate (from a sample) — fitCopula","title":"Makes a Probability Density Estimate (from a sample) — fitCopula","text":"Given sample (probability distribution) function makes Copula fit source distribution using VineCopula package.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fitCopula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a Probability Density Estimate (from a sample) — fitCopula","text":"","code":"fitCopula(X, nCores = detectCores())"},{"path":"https://icpm-kth.github.io/uqsa/reference/fitCopula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a Probability Density Estimate (from a sample) — fitCopula","text":"X sample characterizes traget distribution (rows) nCores passed parallel::mclapply()","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/fitCopula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a Probability Density Estimate (from a sample) — fitCopula","text":"list: vineCop, U, Z, Y U marginal probability samples, Z cummulative density values U, Y probability density values U.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getDose.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the values of the input for a series of dose response experiments — getDose","title":"Get the values of the input for a series of dose response experiments — getDose","text":"function finds vector inputs  varies among series experiments part dose response experiment","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getDose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the values of the input for a series of dose response experiments — getDose","text":"","code":"getDose(experiments)"},{"path":"https://icpm-kth.github.io/uqsa/reference/getDose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the values of the input for a series of dose response experiments — getDose","text":"experiments list experimental data dose response experiment","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getDose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the values of the input for a series of dose response experiments — getDose","text":"vector inputs (.e. dose) varies among experiments provided function. name input saved \"comment(dose)\".","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getMCMCPar.html","id":null,"dir":"Reference","previous_headings":"","what":"Selects MCMC scheme specific setup parameters — getMCMCPar","title":"Selects MCMC scheme specific setup parameters — getMCMCPar","text":"MCMC scheme uses transition kernel. function returns parameters transition kernel. Better parameters make Markov chain perform better (.e. lower auto-correlation).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getMCMCPar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selects MCMC scheme specific setup parameters — getMCMCPar","text":"","code":"getMCMCPar(prePar, preDelta, p = 0.05, sfactor = 0.1, delta = 0.01, num = 1)"},{"path":"https://icpm-kth.github.io/uqsa/reference/getMCMCPar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selects MCMC scheme specific setup parameters — getMCMCPar","text":"prePar sample parameters pre-Calibration preDelta distance values (scores) parameters p fraction (top scoring) sampled points base Sigma sfactor scales Sigma delta ABC threshold num number different starting parameter vectors.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/getMCMCPar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selects MCMC scheme specific setup parameters — getMCMCPar","text":"Sigma startPar (matrix num rows) list","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time series simulations with experimental data — ggplotTimeSeries","title":"Plot time series simulations with experimental data — ggplotTimeSeries","text":"function plots simulations time series experiments plots experimental data. input provided experiments must differ one vector component.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time series simulations with experimental data — ggplotTimeSeries","text":"","code":"ggplotTimeSeries(   simulations,   experiments,   nrow = NULL,   ncol = NULL,   plot.state = FALSE )"},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time series simulations with experimental data — ggplotTimeSeries","text":"simulations list simualtions output simulator experiments list experiments show.plot boolean variable. Set show.plot=TRUE display plots running funcion, FALSE otherwise","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot time series simulations with experimental data — ggplotTimeSeries","text":"list plots simulations experimental data","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeriesStates.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time series simulation with state variables — ggplotTimeSeriesStates","title":"Plot time series simulation with state variables — ggplotTimeSeriesStates","text":"function plots simulations time series experiments plots experimental data. input provided experiments must differ one vector component.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeriesStates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time series simulation with state variables — ggplotTimeSeriesStates","text":"","code":"ggplotTimeSeriesStates(simulations, experiments, nrow = NULL, ncol = NULL)"},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeriesStates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time series simulation with state variables — ggplotTimeSeriesStates","text":"simulations list simualtions output simulator experiments list experiments show.plot boolean variable. Set show.plot=TRUE display plots running funcion, FALSE otherwise","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/ggplotTimeSeriesStates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot time series simulation with state variables — ggplotTimeSeriesStates","text":"list plots simulations experimental data","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/globalSensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Sensitivity Analysis — globalSensitivity","title":"Global Sensitivity Analysis — globalSensitivity","text":"function performs binning based estimation global sensitivity model's output respect model's parameters. output can prediction model's behaviour scenario interest (parameters, input, intial values, boundary conditions, scheduled events etc.). output models potentially measurable value (\"observable\"). sample-rows output rows must correspond (must model simulation).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/globalSensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Sensitivity Analysis — globalSensitivity","text":"","code":"globalSensitivity(parSample, outputSample, nBins = \"Sturges\")"},{"path":"https://icpm-kth.github.io/uqsa/reference/globalSensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Sensitivity Analysis — globalSensitivity","text":"parSample matrix parameter vectors (rows) outputSample matrix, rows outputs (row-index sample index) nBins number bins, unset defaults default hist function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/globalSensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Sensitivity Analysis — globalSensitivity","text":"sensitivity Si,j outputi respect parameterj","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/gradLogLikelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Default log-likelihood function, gradient — gradLogLikelihood","title":"Default log-likelihood function, gradient — gradLogLikelihood","text":"returns function g(x,simulations), maps simulation results MCMC variables x gradient log(likelihood) values withj respect x. experiments used implicitly; simulations list returned rgsl::r_gsl_odeiv2_outer().","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/gradLogLikelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default log-likelihood function, gradient — gradLogLikelihood","text":"","code":"gradLogLikelihood(model, experiments, parMap = identity, parMapJac = 1)"},{"path":"https://icpm-kth.github.io/uqsa/reference/gradLogLikelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default log-likelihood function, gradient — gradLogLikelihood","text":"experiment compared tp simulation results","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/grapes-otherwise-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"This function can be used to specify default values — %otherwise%","title":"This function can be used to specify default values — %otherwise%","text":"attributes missing, base::attr() function returns NULL. cases function can used find alternative value one expression: attr(x,\"dim\") %otherwise% length(x)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/grapes-otherwise-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function can be used to specify default values — %otherwise%","text":"","code":"a %otherwise% b"},{"path":"https://icpm-kth.github.io/uqsa/reference/grapes-otherwise-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function can be used to specify default values — %otherwise%","text":"value check NULL b value substitute","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/grapes-otherwise-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function can be used to specify default values — %otherwise%","text":", b NULL","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/importReactionsSSA.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","title":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","text":"translates Reaction network specific form required GillespieSSA2","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/importReactionsSSA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","text":"","code":"importReactionsSSA(model)"},{"path":"https://icpm-kth.github.io/uqsa/reference/importReactionsSSA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","text":"model model, represented list data.frames SBtab content","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/importReactionsSSA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to construct and run the stochastic simulation using GillespieSSA2 package — importReactionsSSA","text":"list GillespieSSA2::reaction items","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"SBtab Document set tables represent reactions, compounds, parameters, measured data correspond simulations model certain input conditions initial values.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"","code":"import_experiments(modelName = NULL, SBtabDir)"},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"modelName (string) functions model prefix SBtabDir (string) local directory contains tsv files (SBtab content)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"list simulation experiments (data corresponding simulation)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_experiments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reads the Data and Model Contained in an SBtab Document (tsv) — import_experiments","text":"function assumes information stored series tsv files. content imported using SBtabVFGEN package. data contents reorganized list simulation experiments (initial values, measurement time points, etc.)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"function uses SBtabVFGEN read series tsv files, containing one systems biology table together create model (Reactions, Parameters, etc.). model converted vfgen compatible file. file processed vfgen system call create source code R (deSolve) C (GSL solvers).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"","code":"import_from_SBtab(SBtabDir)"},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"SBtabDir directory contains `.tsv` files (SBtab content)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"model list data.frames, one per tsv file,     Document title attached comment attribute:     comment(model) = Document Title","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"requires vfgen installed (https://github.com/WarrenWeckesser/vfgen) - R package. SBtab particular convention structure tables (sbtab.net)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/import_from_SBtab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import Systems Biology Models given in Tabular Form — import_from_SBtab","text":"","code":"model <- import_from_SBtab(\"./model\") #> Warning: cannot open file './model/': No such file or directory #> Error in file(con, \"r\"): cannot open the connection  comment(model) #> Error in comment(model): object 'model' not found  source(\"model.R\") #> Warning: cannot open file 'model.R': No such file or directory #> Error in file(filename, \"r\", encoding = encoding): cannot open the connection"},{"path":"https://icpm-kth.github.io/uqsa/reference/log10ParMap.html","id":null,"dir":"Reference","previous_headings":"","what":"LOG10 parameter mapping used by the MCMC module — log10ParMap","title":"LOG10 parameter mapping used by the MCMC module — log10ParMap","text":"map used simulator transform sampling variables ODE-model porameters.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/log10ParMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LOG10 parameter mapping used by the MCMC module — log10ParMap","text":"","code":"log10ParMap(parMCMC)"},{"path":"https://icpm-kth.github.io/uqsa/reference/log10ParMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LOG10 parameter mapping used by the MCMC module — log10ParMap","text":"parMCMC sampling variables (numeric vector)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/log10ParMapJac.html","id":null,"dir":"Reference","previous_headings":"","what":"LOG10 parameter mapping, jacobian — log10ParMapJac","title":"LOG10 parameter mapping, jacobian — log10ParMapJac","text":"map used simulator transform sampling variables ODE-model porameters. often calculate sensitivites, alos need jacobian map, due chain rule differentiation.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/log10ParMapJac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LOG10 parameter mapping, jacobian — log10ParMapJac","text":"","code":"log10ParMapJac(parMCMC)"},{"path":"https://icpm-kth.github.io/uqsa/reference/log10ParMapJac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LOG10 parameter mapping, jacobian — log10ParMapJac","text":"parMCMC sampling variables (numeric vector)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/logLikelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Default log-likelihood function — logLikelihood","title":"Default log-likelihood function — logLikelihood","text":"returns function f(simulations), maps simulation results log(likelihood) values. experiments used implicitly; simulations list returned rgsl::r_gsl_odeiv2_outer().","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/logLikelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default log-likelihood function — logLikelihood","text":"","code":"logLikelihood(experiments)"},{"path":"https://icpm-kth.github.io/uqsa/reference/logLikelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default log-likelihood function — logLikelihood","text":"experiment compared tp simulation results","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeAcceptanceProbability.html","id":null,"dir":"Reference","previous_headings":"","what":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","title":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","text":"returned closure needs sampling variables (parABC) inputand calculates probability accepting Markov chainmoves.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeAcceptanceProbability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","text":"","code":"makeAcceptanceProbability(   experiments,   modelName,   getAcceptanceProbability,   parMap = identity )"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeAcceptanceProbability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","text":"experiments list experiments modelName annotated string, model name model file comment getAcceptanceProbability R function mape results simulation experimental data acceptance probability parMap optional mapping sampling parameters (parABC) model parameters (e.g. rescaling,re-ordering).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeAcceptanceProbability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ths function Creates an acceptanceProbability function — makeAcceptanceProbability","text":"function calculates probabilities given parABC input; implicitly uses argiments function.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"function takes series SBtab tables, returned SBtabVFGEN::sbtab_from_tsv() creates GillespieSSA2 reactions . Reactions arfe made pairwise, forward backward reaction pairs. backward reaction exist, list item NULL. valid set reactions can obtained !.null(reactions)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"","code":"makeGillespieModel(SBtab, LV = NULL, strip.null = TRUE)"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"SBtab series tables returned sbtab_from_tsv() LV product Avogadro's constant L system's volume V litres; unspecified information retrieved SBtab files, missing assume 1µm³ volume (approximate sizes bacteria synapses)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"list reactions","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeGillespieModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of reactions for GillespieSSA2 — makeGillespieModel","text":"","code":"# model.tsv <- dir(pattern=\"[.]tsv$\")  # model.sbtab <- SBtabVFGEN::sbtab_from_tsv(model.tsv)  # reactions <- makeGillespieModel(model.sbtab)  # l <- is.null(reactions)  # model.ssa2 <- reactions[!l]"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeIndepCopula.html","id":null,"dir":"Reference","previous_headings":"","what":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","title":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","text":"Covers (simpler) special case prior(x) iid uniform. return value structure value fitCopula().","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeIndepCopula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","text":"","code":"makeIndepCopula(ll, ul)"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeIndepCopula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","text":"ll ll[] lower limit random variable x[] ul upper limit, analogous ll.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeIndepCopula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copula Formulation for Uniform Prior Distributions — makeIndepCopula","text":"list : copula, U, Z, Y entries.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjective.html","id":null,"dir":"Reference","previous_headings":"","what":"creates Objective functions from ingredients — makeObjective","title":"creates Objective functions from ingredients — makeObjective","text":"returned objective function one argument: ABC variables shall mapped ODE-model parameters.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates Objective functions from ingredients — makeObjective","text":"","code":"makeObjective(   experiments,   modelName = NULL,   distance,   parMap = identity,   simulate = NULL )"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates Objective functions from ingredients — makeObjective","text":"experiments list simulation experiments modelName model storage file comment distance function calculates ABC scores parMap function transforms ABC variables acceptable model parameters simulate closure simulates model","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjective.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"creates Objective functions from ingredients — makeObjective","text":"objective function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjectiveSSA.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that creates the objective function — makeObjectiveSSA","title":"Function that creates the objective function — makeObjectiveSSA","text":"Given parameter set, function computes distance experimental data simulated data (coresponding parameter input).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjectiveSSA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that creates the objective function — makeObjectiveSSA","text":"","code":"makeObjectiveSSA(   experiments,   model,   parNames,   distance,   parMap = identity,   Phi,   reactions,   nStochSim = 1 )"},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjectiveSSA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that creates the objective function — makeObjectiveSSA","text":"experiments list experiments parNames names (biological) parameters model distance user supplied function calculates distance simulation data interface distance(simulation, data, errVal), errVal estimate measuremnet noise (e.g. standard deviation), needed function. parMap function translates ABC variables (parABC) something model accept. Phi Volume reactions list encodes reactions GillespieSSA2 nStochSim number stochastic simulations average ","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/makeObjectiveSSA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that creates the objective function — makeObjectiveSSA","text":"closure objective function implicitly depends arguments function explicitly ABC parameters parABC.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":null,"dir":"Reference","previous_headings":"","what":"find the coefficients in a formula — match.coefficients","title":"find the coefficients in a formula — match.coefficients","text":"reaction formula reactants products, separated <=>, reactants left products right (convention). plus separated list reacting compounds modifiers, optional coefficients, e.g.: + 2 B <=> AB2","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find the coefficients in a formula — match.coefficients","text":"","code":"match.coefficients(chrv)"},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find the coefficients in a formula — match.coefficients","text":"chrv character vector returned parse.formula","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find the coefficients in a formula — match.coefficients","text":"coefficients, vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"find the coefficients in a formula — match.coefficients","text":"formula split left right side, function determines coefficients. example, function returns c(1,2) left side 1 right side.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.coefficients.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find the coefficients in a formula — match.coefficients","text":"","code":"lapply(uqsa:::parse.formula(\"A + 2*B <=> AB2\"),uqsa:::match.coefficients) #> Warning: NAs introduced by coercion #> $reactants #> [1]  1 NA #>  #> $products #> [1] 1 #>"},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the variable names in a formula — match.names","title":"Find the variable names in a formula — match.names","text":"reaction formula reactants products, separated <=>, reactants left products right (convention). plus separated list reacting compounds modifiers, optional coefficients, e.g.: + 2 B <=> AB2","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the variable names in a formula — match.names","text":"","code":"match.names(chrv)"},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the variable names in a formula — match.names","text":"chrv character vector returned parse.formula","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the variable names in a formula — match.names","text":"coefficients, vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the variable names in a formula — match.names","text":"formula split left right side, function determines names. example, function returns c(\"\",\"B\") left side \"AB2\" right side.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/match.names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the variable names in a formula — match.names","text":"","code":"lapply(uqsa:::parse.formula(\"A + 2*B <=> AB2\"),uqsa:::match.names) #> $reactants #> [1] \"A\"   \"2*B\" #>  #> $products #> [1] \"AB2\" #>  lapply(uqsa:::parse.formula(\"A + 2*B <=> AB2\"),uqsa:::match.names) #> $reactants #> [1] \"A\"   \"2*B\" #>  #> $products #> [1] \"AB2\" #>"},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Monte Carlo — mcmc","title":"Markov Chain Monte Carlo — mcmc","text":"function creates MCMC function given set experiments.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Monte Carlo — mcmc","text":"","code":"mcmc(update)"},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Monte Carlo — mcmc","text":"update update function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Monte Carlo — mcmc","text":"M(initiPar,N), function initial starting values number Markov chain steps","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain Monte Carlo — mcmc","text":"algorithm entirely determined update function.  intermediate values updates requires aside simulation results attributes MCMC variable: parMCMC. update function: update(parGiven) -> parUpdate depends given parameters, dependencies either implicit (closure) attributes parGiven.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcInit.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the Markov chain — mcmcInit","title":"Initialize the Markov chain — mcmcInit","text":"function must append required attributes MCMC varible, Markov chain update correctly.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcInit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the Markov chain — mcmcInit","text":"","code":"mcmcInit(   beta = 1,   parMCMC,   simulate,   dprior,   logLikelihood,   gradLogLikelihood = NULL,   fisherInformation = NULL )"},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcInit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the Markov chain — mcmcInit","text":"beta inverse temperature Markov chain (parallel tempering) parMCMC plain starting value Markov chain logLikelihood function maps simulations logLikelihood values gradLogLikelihood gradient function logLikelihood (optional) -- algorithm requires fisherInformation function calculates Fisher Information matrix","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcInit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the Markov chain — mcmcInit","text":"starting parameter vector, attributes.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcUpdate.html","id":null,"dir":"Reference","previous_headings":"","what":"This function proposes an MCMC candidate variable, and either accepts or rejects the candidate — mcmcUpdate","title":"This function proposes an MCMC candidate variable, and either accepts or rejects the candidate — mcmcUpdate","text":"function receives current MCMC variable, calculates possible successor returns case acceptance. returns (old) current state upon rejection candidate.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcUpdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function proposes an MCMC candidate variable, and either accepts or rejects the candidate — mcmcUpdate","text":"","code":"mcmcUpdate(   simulate,   experiments,   model,   logLikelihood,   gradLogLikelihood,   fisherInformation,   fisherInformationPrior,   dprior )"},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcUpdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function proposes an MCMC candidate variable, and either accepts or rejects the candidate — mcmcUpdate","text":"logLikelihood function, returns log(p(simulations|experiments)) dprior prior probability density function eps step size parameter Markov chain moves (propotional step size)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcUpdate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function proposes an MCMC candidate variable, and either accepts or rejects the candidate — mcmcUpdate","text":"function returns possibly updated states Markov chain","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/mcmcUpdate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This function proposes an MCMC candidate variable, and either accepts or rejects the candidate — mcmcUpdate","text":"Markov chain current state (MCMC variable, often x literature), context sampling MCMC variables used parameters scientific model sort (often state variables, also x, y). call variables parMCMC (parABC), parCurrent|Given|Proposal, similar.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/observable.mean.in.bin.html","id":null,"dir":"Reference","previous_headings":"","what":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","title":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","text":"model parameters binned histogram function. bin one parameters almost fixed (varies much less parameters full range). function returns mean observable bin, vector.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/observable.mean.in.bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","text":"","code":"observable.mean.in.bin(id, outputSample)"},{"path":"https://icpm-kth.github.io/uqsa/reference/observable.mean.in.bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","text":"id integer vector identifies bin parameter vector falls create row outputSample (output stems model simulation parameters). id length outputSample rows. outputSample matrix output values, one output vector per row (different rows results different parameter values)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/observable.mean.in.bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The mean value of an observable value given a parameter bin — observable.mean.in.bin","text":"Mi,j mean observablej bini","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parUpdate.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates Parameter Values — parUpdate","title":"Updates Parameter Values — parUpdate","text":"valid ABC update conditions (successful simulation) parameters updated new values.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parUpdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates Parameter Values — parUpdate","text":"","code":"parUpdate(objectiveFunction, curPar, canPar, curDelta, curPrior, delta, dprior)"},{"path":"https://icpm-kth.github.io/uqsa/reference/parUpdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates Parameter Values — parUpdate","text":"objectiveFunction function , given (vectorial) parameter input, simulates model, outputs distance experimental data data simulated model parameter provided input curPar current parameter values (ABC samples ) canPar candidate parameter values (MCMC) curDelta current distance data simulation, MCMC chain yet reached point threshold (delta), can accepted new current state chain. curPrior current Prior values given curPar delta distance threshold ABC dprior prior probability density function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parUpdate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates Parameter Values — parUpdate","text":"updated values curPar, curDelta, curPrior","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":null,"dir":"Reference","previous_headings":"","what":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"function assumes kinetic Law mass action kinetics. function helps converting units ODE units work stochastic simulations. Converting units general formula (Michaelis Menten, Hill kinetics, etc.) difficult dubious stochastic simulations.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"","code":"parameter.from.kinetic.law(kineticLaw, tab)"},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"kineticLaw string mathematical formula tab SBtab document, returned SBtabVFGEN::sbtab_from_tsv()","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"parameter value, unit attribute","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parameter.from.kinetic.law.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Attempt to find multiplicative reaction rate coefficients — parameter.from.kinetic.law","text":"reasons, functions assumes: kf**B*[...] first word kf representing reaction rate coefficient. Given SBtab document, function finds value () unit coefficient. coefficient can defined fixed constant, parameter, algebraic expression document. important attribute unit.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits a formula into a left and right side — parse.formula","title":"Splits a formula into a left and right side — parse.formula","text":"function splits reaction formulka apart parts, removing whitespace side: \"+ 2 B <=> AB2\" split list two entries","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits a formula into a left and right side — parse.formula","text":"","code":"parse.formula(reactionFormula)"},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits a formula into a left and right side — parse.formula","text":"string reactionFormula","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits a formula into a left and right side — parse.formula","text":"named list forward component backward component, entry contains character vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.formula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Splits a formula into a left and right side — parse.formula","text":"","code":"list$reactants == c(\"A\",\"2*B\") list$products == c(\"AB2\")"},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Find forward and backward component in a reaction kinetic — parse.kinetic","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"reaction kinetic can almost function, general possible tell apart part kinetic law .","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"","code":"parse.kinetic(reactionKinetic)"},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"reactionKinetic string kinetic law reaction","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"character vector components named 'forward' 'backward'","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"mass action kinetics, positive reaction rate coefficients, expressions mostly look like : functions splits -, none present, reaction assumed irreversible. general setting (- split wrong), splitting done hand complex rules.","code":"kf*prod(reactants.concentration) - kb*prod(product.concentrations)"},{"path":"https://icpm-kth.github.io/uqsa/reference/parse.kinetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find forward and backward component in a reaction kinetic — parse.kinetic","text":"","code":"uqsa:::parse.kinetic(\"kf*A*B-kb*C\") #>  forward backward  #> \"kf*A*B\"   \"kb*C\"   uqsa:::parse.kinetic(\"kf*A*B\") #>  forward backward  #> \"kf*A*B\"      \"0\"   uqsa:::parse.kinetic(\"kf*A/(Km+A)\") #>       forward      backward  #> \"kf*A/(Km+A)\"           \"0\""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotDoseResponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot dose response simulations with experimental data — plotDoseResponse","title":"Plot dose response simulations with experimental data — plotDoseResponse","text":"function plots simulations one dose response experiment plots experimental data.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotDoseResponse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot dose response simulations with experimental data — plotDoseResponse","text":"","code":"plotDoseResponse(simulations, experiments, dose, show.plot = TRUE)"},{"path":"https://icpm-kth.github.io/uqsa/reference/plotDoseResponse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot dose response simulations with experimental data — plotDoseResponse","text":"simulations list simualtions output simulator experiments list experimental data dose response experiment dose vector dose values plot x axis show.plot boolean variable. Set show.plot=TRUE display plots running funcion, FALSE otherwise","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotDoseResponse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot dose response simulations with experimental data — plotDoseResponse","text":"plot simulations experimental data","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotSimualtionsFromSBtab.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","title":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","text":"function imports model experimental data saved SBtab files, simualtes model initial conditions input corresponding experiments, plots simulations together corresponding experimental data. currently works one dimensional output.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotSimualtionsFromSBtab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","text":"","code":"plotSimualtionsFromSBtab(   SBtabDir,   paramVal,   plotDir = NULL,   width = 15,   heigth = 10 )"},{"path":"https://icpm-kth.github.io/uqsa/reference/plotSimualtionsFromSBtab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","text":"SBtabDir directory contains .tsv files (SBtab content) paramVal parameter vector model simulated plotDir directory plots saved .pdf .RData variables width width plot window heigth heigth plot window","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotSimualtionsFromSBtab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate and plot Data and Simulation — plotSimualtionsFromSBtab","text":"vector R plot objects","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotTimeSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time series simulations with experimental data — plotTimeSeries","title":"Plot time series simulations with experimental data — plotTimeSeries","text":"function plots simulations time series experiments plots experimental data. input provided experiments must differ one vector component.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotTimeSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time series simulations with experimental data — plotTimeSeries","text":"","code":"plotTimeSeries(simulations, experiments, show.plot = TRUE)"},{"path":"https://icpm-kth.github.io/uqsa/reference/plotTimeSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time series simulations with experimental data — plotTimeSeries","text":"simulations list simualtions output simulator experiments list experiments show.plot boolean variable. Set show.plot=TRUE display plots running funcion, FALSE otherwise","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/plotTimeSeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot time series simulations with experimental data — plotTimeSeries","text":"list plots simulations experimental data","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/preCalibration.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine a starting value for ABC's delta — preCalibration","title":"Determine a starting value for ABC's delta — preCalibration","text":"ABC settings model solution compared data acceptance threshold: delta. -pre calibration function attempts adjust delta value.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/preCalibration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine a starting value for ABC's delta — preCalibration","text":"","code":"preCalibration(objectiveFunction, npc = 1000, rprior, rep = 1)"},{"path":"https://icpm-kth.github.io/uqsa/reference/preCalibration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine a starting value for ABC's delta — preCalibration","text":"objectiveFunction function , given (vectorial) parameter input, simulates model, outputs distance experimental data data simulated model parameter provided input npc sample size pre-calibration rprior function generates random ABC variables, distributed according prior rep number repetitions preCalibration process","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/preCalibration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine a starting value for ABC's delta — preCalibration","text":"list entries preDelta prePar, final values calibration run","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":null,"dir":"Reference","previous_headings":"","what":"propensity creates a propensity formula — propensity","title":"propensity creates a propensity formula — propensity","text":"given custom math expressions needed calculate propensity, propensity coefficient kinetic law reaction, function makes string can used GillespieSSA2.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"propensity creates a propensity formula — propensity","text":"","code":"propensity(conv.coeff, kinetic.law, rExpressions)"},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"propensity creates a propensity formula — propensity","text":"conv.coeff propensity conversion coefficient: conv.coeff*kinetic.law = propensity function kinetic.law kinetic law reaction (used ODEs) rExpressions named math expressions appear kinetic.law reaction","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"propensity creates a propensity formula — propensity","text":"string representation propensity function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/propensity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"propensity creates a propensity formula — propensity","text":"propensity coefficient translates ","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rCopulaPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","title":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","text":"returned function generates n random vectors, rows matrix.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rCopulaPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","text":"","code":"rCopulaPrior(Copula)"},{"path":"https://icpm-kth.github.io/uqsa/reference/rCopulaPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","text":"Copula return value fitCopula()","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rCopulaPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rCopulaPrior returns a function that generates random values from the copula model — rCopulaPrior","text":"matrix random values","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"rNormalPrior returns a random vector generator — rNormalPrior","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"return value function generates random vectors size mean sd multivariate normal distribution independent components mean \"mean\" standard deviation \"sd\". random vectors returned n rows matrix, n argument returned function.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"","code":"rNormalPrior(mean, sd)"},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"mean mean random variables (vector) sd standard deviation random variables (size vector mean)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"independentent multivariate normal random vector generating function: rprior(n), n requested number vectors (rows)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rNormalPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rNormalPrior returns a random vector generator — rNormalPrior","text":"","code":"rnp<-rNormalPrior(mean=c(0,1,2),sd=c(1,2,3)) rnp(12) #>              [,1]       [,2]       [,3] #>  [1,] -2.34810846  0.4640180  3.8117523 #>  [2,] -0.07678025 -1.7987111  0.5847272 #>  [3,] -0.56703188 -0.9950761 -4.3856407 #>  [4,]  0.94324182  3.2171109  2.6707165 #>  [5,]  0.65501100  0.3042560 -0.5165381 #>  [6,] -0.56693249  3.4833802  3.9427793 #>  [7,] -0.05266878 -2.0695594 -1.1676345 #>  [8,]  0.35210254  2.4123765  2.9622864 #>  [9,] -0.40999232 -1.4416103  1.1162551 #> [10,]  0.38755761  0.4651936  3.1832617 #> [11,]  0.32309852  2.8251179  1.5576210 #> [12,]  0.03665645 -1.4795572 -1.2728469"},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"rUniformPrior returns a random vector generator — rUniformPrior","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"return value function generates random vectors size ll ul uniform distribution within limits defined ul ll. random vectors returned n rows matrix, n argument returned function.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"","code":"rUniformPrior(ll, ul)"},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"ll lower limit random variables (vector) ul upper limit random variables (size vector ll)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"uniform random vector generating function: runiform(n), n requested number vectors (rows)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/rUniformPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rUniformPrior returns a random vector generator — rUniformPrior","text":"","code":"rup<-rUniformPrior(ll=c(0,1,2),ul=c(1,2,3)) rup(12) #>             [,1]     [,2]     [,3] #>  [1,] 0.18092093 1.089484 2.320017 #>  [2,] 0.28134955 1.104391 2.912636 #>  [3,] 0.98648336 1.691841 2.574422 #>  [4,] 0.42772780 1.565265 2.311657 #>  [5,] 0.13999132 1.217287 2.263848 #>  [6,] 0.29647767 1.521218 2.385844 #>  [7,] 0.91369766 1.178954 2.989183 #>  [8,] 0.07609304 1.040488 2.346374 #>  [9,] 0.76448891 1.617785 2.223710 #> [10,] 0.18594355 1.643777 2.509850 #> [11,] 0.88675221 1.268137 2.299295 #> [12,] 0.58800781 1.798984 2.171567"},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an Experiment using the named ODE Model — runModel","title":"Simulate an Experiment using the named ODE Model — runModel","text":"Simulation experiments consist least initial values state variables, parameter vector, list times solution needs known.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an Experiment using the named ODE Model — runModel","text":"","code":"runModel(experiments, modelName, parABC, parMap = identity)"},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an Experiment using the named ODE Model — runModel","text":"experiments list experiments simulate modelName used find model files functions within file (prefix) parABC matrix column vectors; column contains vector normal parameters (e.g. kinetic params like kf kr) input_parameters (concatenated order). N columns, N simulations performed.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate an Experiment using the named ODE Model — runModel","text":"output function values","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/runModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate an Experiment using the named ODE Model — runModel","text":"function use GSL solvers, deSolve [default].  addition, model usually observables: values depend state variables can measured real experiment. modeled output functions. distinguish normal parameters input parameters. Input parameters known subject estimation procedure. Furthermore, meant represent experimental conditions, either direct control experimenter carefully measured. inputs probably different simulation experiment least one value. environment variable set \"C\", function attempt compile file modelName_gvf.c shared library modelName., already exist.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.graph.html","id":null,"dir":"Reference","previous_headings":"","what":"plot the sensitivity matrix — sensitivity.graph","title":"plot the sensitivity matrix — sensitivity.graph","text":"Produce cumulative shaded area plot sensitivity matrix.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot the sensitivity matrix — sensitivity.graph","text":"","code":"sensitivity.graph(   u,   S,   color = hcl.colors(dim(S)[2]),   line.color = hcl.colors(dim(S)[2] + 1),   do.sort = TRUE,   decreasing = FALSE,   title = \"Sensitivity\" )"},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot the sensitivity matrix — sensitivity.graph","text":"u values x-axis plot, named, names put tick-marks S sensitivity matrix returned globalSensitivity(), Si,j respect model output parameter j color list colors use shaded areas, e.g.: rainbow(24) line.color color lines drawn shaded areas .sort parameter sensitivities sorted according mean outputs, parameter sensitivity plotted first, bottom decreasing direction sort, first item sorted list (parameter) plotted first, thus bottom plot title string, written , title","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot the sensitivity matrix — sensitivity.graph","text":"nothing","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Sensitivity Analysis — sensitivity","title":"Global Sensitivity Analysis — sensitivity","text":"function performs binning based estimation global sensitivity model's output respect model's parameters. output can prediction model's behaviour scenario interest (parameters, input, intial values, boundary conditions, scheduled events etc.). output models potentially measurable value (\"observable\"). sample-rows output rows must correspond (must model simulation).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Sensitivity Analysis — sensitivity","text":"","code":"sensitivity(parSample, outputSample, nBins = \"Sturges\")"},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Sensitivity Analysis — sensitivity","text":"parSample matrix parameter vectors (rows) outputSample matrix, rows outputs (row-index sample index) nBins number bins, unset defaults default hist function","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Sensitivity Analysis — sensitivity","text":"sensitivity Si,j outputi respect parameterj","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivityEquilibriumApproximation.html","id":null,"dir":"Reference","previous_headings":"","what":"Equilibrium state approximation of the solution sensitivity for ODE systems — sensitivityEquilibriumApproximation","title":"Equilibrium state approximation of the solution sensitivity for ODE systems — sensitivityEquilibriumApproximation","text":"context, sensitivity S(t;x,p) dx(t;p)/dp, x(t;p) parameterized solution initial value problem ordinary differential equations t independent varibale: x'=f(t,x;p), «'» indicates derivative respect t. cases proxy variable p, e.g. r=log(p), chain rule applies. Similarly, also output sensitivity function g(x(t;p)).  equilibrium approximation exact state-variable values close equilibrium point q(p) (fixed-point): f(t,q(p);p)=0.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivityEquilibriumApproximation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equilibrium state approximation of the solution sensitivity for ODE systems — sensitivityEquilibriumApproximation","text":"","code":"sensitivityEquilibriumApproximation(   experiments,   model,   parMap = identity,   parMapJac = 1 )"},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivityEquilibriumApproximation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equilibrium state approximation of the solution sensitivity for ODE systems — sensitivityEquilibriumApproximation","text":"experiments list simulation experiments model list functions model experiments applicable parMap map transform parMCMC p, parameters model accepts simulations equivalent list simulation results, one parameter vector parMCMC parameters used Markov chain Monte Carlo MC variable","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivityEquilibriumApproximation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equilibrium state approximation of the solution sensitivity for ODE systems — sensitivityEquilibriumApproximation","text":"function S(parMCMC) -> simulations_with_sensitivity, attaches state sensitivity matrix array length(x) × length(p) × length(t) simulations (solutions ODE).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivityEquilibriumApproximation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Equilibrium state approximation of the solution sensitivity for ODE systems — sensitivityEquilibriumApproximation","text":"state sensitivity matrix: param raw model parameters. matrix calculated intermediate transformed : parMCMC Markov chain variable usually shorter param typically sample model's parameters. model parameters may known, may input parameters intrinsic model related experimental setup (parMCMC param different). transformation requires output function jacobian (funcJac) parameter jacobian (funcJacp) model variable. transform parameters , chain rule requests parMapJacl,k = d paraml / d parMCMCk Typically, sensitivity needs known different time-points t_k. 3-dimensional array Si,j,k, index k corrsponds time t_k; closer x(t_k) equilibrium, better approximation; near initial state, sensitivity also correct (intermediate time-span approximate). function requires pracma::expm work. f","code":"d state(time[k],state, param)[i] S[i,j,k] = --------------------------------  ,            d param[j] d func(time[k], state, c(parMap(parMCMC),input))[i] Sh[i,j,k] = --------------------------------------------------             d parMCMC[j]"},{"path":"https://icpm-kth.github.io/uqsa/reference/sensitivityEquilibriumApproximation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equilibrium state approximation of the solution sensitivity for ODE systems — sensitivityEquilibriumApproximation","text":"","code":"if (FALSE) { y <- simulate(parMCMC) S <- sensitivityEquilibriumApproximation(experiments, model, parMap, parMapJac) y <- S(parMap,y) }"},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":null,"dir":"Reference","previous_headings":"","what":"This creates a closure that simulates the model — simulator.R","title":"This creates a closure that simulates the model — simulator.R","text":"shorter alternative runModel function (R, deSolve backend).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This creates a closure that simulates the model — simulator.R","text":"","code":"simulator.R(experiments, model, parMap = identity)"},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This creates a closure that simulates the model — simulator.R","text":"experiments list experiments simulate: inital values, inputs, time vectors, initial times parMap model called parMap(parABC); parameter transformation can happen . modelName string (optional comment indicating .file) points model simulate parABC parameters model, subject change parMap.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This creates a closure that simulates the model — simulator.R","text":"closure returns model's output given parameter vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This creates a closure that simulates the model — simulator.R","text":"returns closure around:     - experiments,     - model,     - parameter mapping returned function depends parABC (sampling parameters).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.R.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This creates a closure that simulates the model — simulator.R","text":"","code":"model.sbtab <- SBtabVFGEN::sbtab_from_tsv(dir(pattern=\"[.]tsv$\")) #> Error in file(con, \"r\"): invalid 'description' argument    experiments <- SBtabVFGEN::sbtab.data(model.sbtab) #> Error in is.factor(x): object 'model.sbtab' not found    parABC <- SBtabVFGEN::sbtab.quantity(model.sbtab$Parameter) #> Error: 'sbtab.quantity' is not an exported object from 'namespace:SBtabVFGEN'     source(\"<model name>.R\") # this defines the `model` variable #> Warning: cannot open file '<model name>.R': No such file or directory #> Error in file(filename, \"r\", encoding = encoding): cannot open the connection    simulate <- simulator.R(experiments, model,  parABC) #> Error in simulator.R(experiments, model, parABC): object 'experiments' not found    yf <- sim(parABC) #> Error in sim(parABC): could not find function \"sim\""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":null,"dir":"Reference","previous_headings":"","what":"This creates a closure that simulates the model — simulator.c","title":"This creates a closure that simulates the model — simulator.c","text":"shorter alternative runModel function (C backend).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This creates a closure that simulates the model — simulator.c","text":"","code":"simulator.c(   experiments,   modelName,   parMap = identity,   noise = FALSE,   sensApprox = NULL )"},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This creates a closure that simulates the model — simulator.c","text":"experiments list experiments simulate: inital values, inputs, time vectors, initial times modelName string (optional comment indicating .file) points model simulate parMap model called parMap(parABC); parameter transformation can happen . noise boolean variable. noise=TRUE, Gaussian noise added output simulations. standard deviation Gaussian noise equal measurement error. noise=FALSE output deterministic solution ODE system. parABC parameters model, subject change parMap.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This creates a closure that simulates the model — simulator.c","text":"closure returns model's output given parameter vector","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This creates a closure that simulates the model — simulator.c","text":"returns closure around: - experiments, - model, - parameter mapping returned function depends parABC (sampling parameters). simulation done suing rgsl backend.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/simulator.c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This creates a closure that simulates the model — simulator.c","text":"","code":"#  model.sbtab <- SBtabVFGEN::sbtab_from_tsv(dir(pattern=\"[.]tsv$\"))  #  experiments <- SBtabVFGEN::sbtab.data(model.sbtab)  #  parABC <- SBtabVFGEN::sbtab.quantity(model.sbtab$Parameter)   #  modelName <- checkModel(\"<insert_model_name>_gvf.c\")  #  simulate <- simulator.c(experiments, modelName,  parABC)  #  yf <- sim(parABC)"},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move.html","id":null,"dir":"Reference","previous_headings":"","what":"SMMALA move — smmala_move","title":"SMMALA move — smmala_move","text":"Simiplified Manifold Metropolis Adjusted Langevin Algorithm uses move instriction uses Gaussian kernel shifted away current point","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SMMALA move — smmala_move","text":"","code":"smmala_move(beta = 1, parGiven, fisherInformationPrior, eps = 0.01)"},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SMMALA move — smmala_move","text":"beta inverse temperature (parallel tempering) parGiven given point","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SMMALA move — smmala_move","text":"SMMALA proposal point","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move_density.html","id":null,"dir":"Reference","previous_headings":"","what":"SMMALA transition kernel density — smmala_move_density","title":"SMMALA transition kernel density — smmala_move_density","text":"Simiplified Manifold Metropolis Adjusted Langevin Algorithm uses move instriction uses Gaussian kernel shifted away current point.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SMMALA transition kernel density — smmala_move_density","text":"","code":"smmala_move_density(   beta = 1,   parProposal,   parGiven,   fisherInformationPrior,   eps = 0.01 )"},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SMMALA transition kernel density — smmala_move_density","text":"beta inverse temperature (parallel tempering) parGiven given point","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/smmala_move_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SMMALA transition kernel density — smmala_move_density","text":"SMMALA proposal point","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sum.of.bin.variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","title":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","text":"function calculates variance sum vector valued observable.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sum.of.bin.variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","text":"","code":"sum.of.bin.variance(hst, binMeans, totalMean)"},{"path":"https://icpm-kth.github.io/uqsa/reference/sum.of.bin.variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","text":"hst histogram parameter sample binMeans means observable within bin (rows means) totalMean mean observable entire sample (vector)","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/sum.of.bin.variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Sum of Bin-specific variances — sum.of.bin.variance","text":"weighted sum square differences binMean totalMean","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/swap_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Swap the end-points of two Markov chains — swap_points","title":"Swap the end-points of two Markov chains — swap_points","text":"conditional swap, according rules parallel tempering.","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/swap_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swap the end-points of two Markov chains — swap_points","text":"","code":"swap_points(parMCMC)"},{"path":"https://icpm-kth.github.io/uqsa/reference/swap_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swap the end-points of two Markov chains — swap_points","text":"parMCMC list Markov chain end points","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/swap_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Swap the end-points of two Markov chains — swap_points","text":"list members swapped","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa-package.html","id":null,"dir":"Reference","previous_headings":"","what":"uqsa: Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling — uqsa-package","title":"uqsa: Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling — uqsa-package","text":"package solve initial value problem (given ordinary differential equation) list simulation experiments. simulations compared data, repeatedly. package can sample parameters model via ABC (approximate Bayesian computation) quantify uncertainty remains within model even considering data. Experiments evaluated sequence, intermediate probability densities modeled using VineCopua package.","code":""},{"path":[]},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"uqsa: Uncertainty Quanitification and Global Sensitivity Analysis via ABC sampling — uqsa-package","text":"Maintainer: Olivia Eriksson olivia@mech.kth.se Authors: Alexandra Jauhiainen Alexandra.Jauhiainen@astrazeneca.com Federica Milinanni fedmil@kth.se Andrei Kramer andreikr@kth.se [contributor]","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Load an example model for this package — uqsa_example","title":"Load an example model for this package — uqsa_example","text":"function finds path example model, given name. SBtab format, model data travel together (different tables, documents).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load an example model for this package — uqsa_example","text":"","code":"uqsa_example(   modelName = NULL,   full.names = TRUE,   pattern = \"[.]tsv$\",   f = NULL )"},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load an example model for this package — uqsa_example","text":"modelName name model, e.g.: \"AKAR4\", \"AKAP79\", \"CaMKII\"; empty, function lists available examples. full.names return full paths files - defaults TRUE pattern pattern find specific files; NULL, function returns directory example f file ending, search file endings f, alternative pattern","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load an example model for this package — uqsa_example","text":"location examples current environment called arguments, paths model files modelName provided full path example file pattern pattern unset","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load an example model for this package — uqsa_example","text":"default function returns names tsv files belonging named model. modelName provided returns possible names (contents top-level example directory).","code":""},{"path":"https://icpm-kth.github.io/uqsa/reference/uqsa_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load an example model for this package — uqsa_example","text":"","code":"uqsa_example() #> [1] \"AKAP79\"    \"AKAP79tc\"  \"AKAR4\"     \"AKAR4cl\"   \"CaMKII\"    \"README.md\" uqsa_example(\"AKAR4\",full.names=FALSE) #> [1] \"AKAR4_100nM.tsv\"       \"AKAR4_25nM.tsv\"        \"AKAR4_400nM.tsv\"       #> [4] \"AKAR4_Compound.tsv\"    \"AKAR4_Experiments.tsv\" \"AKAR4_Output.tsv\"      #> [7] \"AKAR4_Parameter.tsv\"   \"AKAR4_Reaction.tsv\"    uqsa_example(\"AKAP79\",f='R',full.names=FALSE) #> [1] \"AKAP79.R\"            \"AKAP79_out.R\"        \"AKAP79_plots.R\"      #> [4] \"configAKAP79.R\"      \"runABCMCMC_AKAP79.R\" uqsa_example(\"AKAP79\",pat=\"^run.*R$\") #> [1] \"/tmp/RtmpPHuiJ6/temp_libpath29167367bf1e3c/uqsa/extdata/AKAP79/runABCMCMC_AKAP79.R\""},{"path":"https://icpm-kth.github.io/uqsa/news/index.html","id":"uqsa-014","dir":"Changelog","previous_headings":"","what":"uqsa 0.1.4","title":"uqsa 0.1.4","text":"Published Application Note pre-print arxiv.org.","code":""}]
