% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runModel.R
\name{simulator.c}
\alias{simulator.c}
\title{This creates a closure that simulates Experiments using the ODE Model}
\usage{
simulator.c(experiments, modelName, parMap = identity, noise = FALSE)
}
\arguments{
\item{experiments}{a list of experiments to simulate: inital values, inputs, time vectors, initial times}

\item{modelName}{a string (with optional comment indicating an .so file) which points out the model to simulate}

\item{parMap}{the model will be called with parMap(parABC); so any parameter transformation can happen there.}

\item{noise}{boolean variable. If noise=TRUE, Gaussian noise is added to the output of the simulations. The standard
deviation of the Gaussian noise is equal to the measurement error. If noise=FALSE the output is the
deterministic solution of the ODE system.}

\item{parABC}{the parameters for the model, subject to change by parMap.}
}
\value{
a closure that returns the model's output for a given parameter vector
}
\description{
Simulation experiments consist at least of initial values for the
state variables, a parameter vector, and a list of times at which
the solution needs to be known.
}
\details{
This function will use the GSL solvers.  In
addition, a model usually has observables: values that depend on
the state variables and can be measured in a real experiment. These
are modeled by output functions.

We distinguish normal parameters and input parameters. Input
parameters are known and not subject to any estimation
procedure. Furthermore, they are meant to represent the
experimental conditions, so they are either under direct control of
the experimenter or very carefully measured. The inputs are
probably different for each simulation experiment in at least one
value.

It returns a closure around:
    - experiments,
    - the model, and
    - parameter mapping

The returned function depends only on parABC (the sampling
parameters). The simulation will be done suing the rgsl backend.
}
\examples{
   model.sbtab <- SBtabVFGEN::sbtab_from_tsv(dir(pattern="[.]tsv$"))
   experiments <- SBtabVFGEN::sbtab.data(model.sbtab)
   parABC <- SBtabVFGEN::sbtab.quantity(model.sbtab$Parameter)

   modelName <- checkModel("<insert_model_name>_gvf.c")
   simulate <- simulator.c(experiments, modelName,  parABC)
   yf <- sim(parABC)
}
